---
"line_30":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
# Named setup host

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http, transport ]
  - set: {nodes.$master.http.publish_address: host}
  - set: {nodes.$master.transport.publish_address: transport_host}

  - do:
      raw:
        method: PUT
        path: "_cluster/settings"
        body: |
          {
            "persistent": {
              "cluster": {
                "remote": {
                  "cluster_one": {
                    "seeds": [
                      "${transport_host}"
                    ],
                    "skip_unavailable": true
                  },
                  "cluster_two": {
                    "seeds": [
                      "${transport_host}"
                    ],
                    "skip_unavailable": false
                  }
                }
              }
            }
          }
  - is_false: _shards.failures
  - do:
      raw:
        method: GET
        path: "_resolve/cluster/my-index-*,cluster*:my-index-*"
  - is_false: _shards.failures
# Named setup my_index

  - do:
        indices.create:
          index: my-index-000001
          body:
            settings:
              number_of_shards: 1
              number_of_replicas: 1
            mappings:
              properties:
                "@timestamp":
                  type: date
                http:
                  properties:
                    request:
                      properties:
                        method:
                          type: keyword
                message:
                  type: text
                  fields:
                    keyword:
                      type: keyword
                user:
                  properties:
                    id:
                      type: keyword
                      doc_values: true
  - do:
        bulk:
          index: my-index-000001
          refresh: true
          body: |
            { "index":{"_id": "0"} }
            { "@timestamp": "2099-11-15T14:12:12", "http": { "request": { "method": "get" }, "response": { "bytes": 1070000, "status_code": 200 }, "version": "1.1" }, "message": "GET /search HTTP/1.1 200 1070000", "source": { "ip": "127.0.0.1" }, "user": { "id": "kimchy" } }
            { "index":{"_id": "1"} }
            { "@timestamp": "2099-11-15T14:12:12", "http": { "request": { "method": "get" }, "response": { "bytes": 1070000, "status_code": 200 }, "version": "1.1" }, "message": "GET /search HTTP/1.1 200 1070000", "source": { "ip": "10.42.42.42" }, "user": { "id": "elkbee" } }
            { "index":{"_id": "2"} }
            { "@timestamp": "2099-11-15T14:12:12", "http": { "request": { "method": "get" }, "response": { "bytes": 1070000, "status_code": 200 }, "version": "1.1" }, "message": "GET /search HTTP/1.1 200 1070000", "source": { "ip": "10.42.42.42" }, "user": { "id": "elkbee" } }
            { "index":{"_id": "3"} }
            { "@timestamp": "2099-11-15T14:12:12", "http": { "request": { "method": "get" }, "response": { "bytes": 1070000, "status_code": 200 }, "version": "1.1" }, "message": "GET /search HTTP/1.1 200 1070000", "source": { "ip": "10.42.42.42" }, "user": { "id": "elkbee" } }
            { "index":{"_id": "4"} }
            { "@timestamp": "2099-11-15T14:12:12", "http": { "request": { "method": "get" }, "response": { "bytes": 1070000, "status_code": 200 }, "version": "1.1" }, "message": "GET /search HTTP/1.1 200 1070000", "source": { "ip": "10.42.42.42" }, "user": { "id": "elkbee" } }
  - do:
      raw:
        method: GET
        path: "_resolve/cluster/my-index*,clust*:my-index*"
  - is_false: _shards.failures
  - match:
      $body:
        {
          "(local)": {
            "connected": true,
            "skip_unavailable": false,
            "matching_indices": true,
            "version": {
              "number": "$body.$_path",
              "build_flavor": "default",
              "minimum_wire_compatibility_version": "$body.$_path",
              "minimum_index_compatibility_version": "$body.$_path"
            }
          },
          "cluster_one": {
            "connected": true,
            "skip_unavailable": true,
            "matching_indices": true,
            "version": {
              "number": "$body.$_path",
              "build_flavor": "default",
              "minimum_wire_compatibility_version": "$body.$_path",
              "minimum_index_compatibility_version": "$body.$_path"
            }
          },
          "cluster_two": {
            "connected": true,
            "skip_unavailable": false,
            "matching_indices": true,
            "version": {
              "number": "$body.$_path",
              "build_flavor": "default",
              "minimum_wire_compatibility_version": "$body.$_path",
              "minimum_index_compatibility_version": "$body.$_path"
            }
          }
        }
  - do:
      raw:
        method: GET
        path: "_resolve/cluster/not-present,clust*:my-index**"
        ignore_unavailable: "false"
  - is_false: _shards.failures
