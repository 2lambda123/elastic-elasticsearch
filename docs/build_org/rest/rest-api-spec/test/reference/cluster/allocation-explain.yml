---
"line_10":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
# Named setup my_index

  - do:
        indices.create:
          index: my-index-000001
          body:
            settings:
              number_of_shards: 1
              number_of_replicas: 1
            mappings:
              properties:
                "@timestamp":
                  type: date
                http:
                  properties:
                    request:
                      properties:
                        method:
                          type: keyword
                message:
                  type: text
                  fields:
                    keyword:
                      type: keyword
                user:
                  properties:
                    id:
                      type: keyword
                      doc_values: true
  - do:
        bulk:
          index: my-index-000001
          refresh: true
          body: |
            { "index":{"_id": "0"} }
            { "@timestamp": "2099-11-15T14:12:12", "http": { "request": { "method": "get" }, "response": { "bytes": 1070000, "status_code": 200 }, "version": "1.1" }, "message": "GET /search HTTP/1.1 200 1070000", "source": { "ip": "127.0.0.1" }, "user": { "id": "kimchy" } }
            { "index":{"_id": "1"} }
            { "@timestamp": "2099-11-15T14:12:12", "http": { "request": { "method": "get" }, "response": { "bytes": 1070000, "status_code": 200 }, "version": "1.1" }, "message": "GET /search HTTP/1.1 200 1070000", "source": { "ip": "10.42.42.42" }, "user": { "id": "elkbee" } }
            { "index":{"_id": "2"} }
            { "@timestamp": "2099-11-15T14:12:12", "http": { "request": { "method": "get" }, "response": { "bytes": 1070000, "status_code": 200 }, "version": "1.1" }, "message": "GET /search HTTP/1.1 200 1070000", "source": { "ip": "10.42.42.42" }, "user": { "id": "elkbee" } }
            { "index":{"_id": "3"} }
            { "@timestamp": "2099-11-15T14:12:12", "http": { "request": { "method": "get" }, "response": { "bytes": 1070000, "status_code": 200 }, "version": "1.1" }, "message": "GET /search HTTP/1.1 200 1070000", "source": { "ip": "10.42.42.42" }, "user": { "id": "elkbee" } }
            { "index":{"_id": "4"} }
            { "@timestamp": "2099-11-15T14:12:12", "http": { "request": { "method": "get" }, "response": { "bytes": 1070000, "status_code": 200 }, "version": "1.1" }, "message": "GET /search HTTP/1.1 200 1070000", "source": { "ip": "10.42.42.42" }, "user": { "id": "elkbee" } }
  - do:
      raw:
        method: GET
        path: "_cluster/allocation/explain"
        body: |
          {
            "index": "my-index-000001",
            "shard": 0,
            "primary": false
            
          }
  - is_false: _shards.failures
---
"line_89":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "my-index-000001"
        master_timeout: "1s"
        timeout: "1s"
        body: |
          {
            "settings": {
              "index.routing.allocation.include._name": "nonexistent_node",
              "index.routing.allocation.include._tier_preference": null
            }
          }
  - is_false: _shards.failures
  - do:
      raw:
        method: GET
        path: "_cluster/allocation/explain"
        body: |
          {
            "index": "my-index-000001",
            "shard": 0,
            "primary": true
          }
  - is_false: _shards.failures
  - match:
      $body:
        {
          "index" : "my-index-000001",
          "shard" : 0,
          "primary" : true,
          "current_state" : "unassigned",
          "unassigned_info" : {
            "reason" : "INDEX_CREATED",
            "at" : $body.$_path,
            "last_allocation_status" : "no"
          },
          "can_allocate" : "no",
          "allocate_explanation" : "Elasticsearch isn't allowed to allocate this shard to any of the nodes in the cluster. Choose a node to which you expect this shard to be allocated, find this node in the node-by-node explanation, and address the reasons which prevent Elasticsearch from allocating this shard there.",
          "node_allocation_decisions" : [
            {
              "node_id" : $body.$_path,
              "node_name" : "node-0",
              "transport_address" : $body.$_path,
              "roles" : ["data", "data_cold", "data_content", "data_frozen", "data_hot", "data_warm", "ingest", "master", "ml", "remote_cluster_client", "transform"],
              "node_attributes" : $body.$_path,
              "node_decision" : "no",
              "weight_ranking" : 1,
              "deciders" : [
                {
                  "decider" : "filter",
                  "decision" : "NO",
                  "explanation" : "node does not match index setting [index.routing.allocation.include] filters [_name:\"nonexistent_node\"]"
                }
              ]
            }
          ]
        }
---
"line_342":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      catch: bad_request
      raw:
        method: GET
        path: "_cluster/allocation/explain"
  - is_false: _shards.failures
