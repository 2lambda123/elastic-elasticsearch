---
setup:
  - do:
      raw:
        method: PUT
        path: "_watcher/watch/my_watch"
        body: |
          {
            "trigger" : {
              "schedule" : {
                "yearly" : { "in" : "february", "on" : 29, "at" : "noon" }
              }
            },
            "input": {
              "simple": {
                "payload": {
                  "send": "yes"
                }
              }
            },
            "condition": {
              "always": {}
            },
            "actions": {
              "test_index": {
                "throttle_period": "15m",
                "index": {
                  "index": "test"
                }
              }
            }
          }
---
"line_96":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: GET
        path: "_watcher/watch/my_watch"
  - is_false: _shards.failures
  - match:
      $body:
        {
          "found": true,
          "_seq_no": 0,
          "_primary_term": 1,
          "_version": 1,
          "_id": "my_watch",
          "status": {
            "version": 1,
            "actions": {
              "test_index": {
                "ack": {
                  "timestamp": "$body.status.actions.test_index.ack.timestamp",
                  "state": "awaits_successful_execution"
                }
              }
            },
            "state": "$body.status.state"
          },
          "watch": "$body.watch"
        }
  - do:
      raw:
        method: POST
        path: "_watcher/watch/my_watch/_execute"
        body: |
          {
            "record_execution" : true
          }
  - is_false: _shards.failures
  - do:
      raw:
        method: GET
        path: "_watcher/watch/my_watch"
  - is_false: _shards.failures
  - match:
      $body:
        {
          "found": true,
          "_id": "my_watch",
          "_seq_no": 1,
          "_primary_term": 1,
          "_version": 2,
          "status": {
            "version": 2,
            "actions": {
              "test_index": {
                "ack": {
                  "timestamp": "$body.status.actions.test_index.ack.timestamp",
                  "state": "ackable"
                },
                "last_execution" : {
                  "timestamp": "$body.status.actions.test_index.last_execution.timestamp",
                  "successful": true
                },
                "last_successful_execution" : {
                  "timestamp": "$body.status.actions.test_index.last_execution.timestamp",
                  "successful": true
                }
              }
            },
            "state": "$body.status.state",
            "execution_state": "executed",
            "last_checked": "$body.status.last_checked",
            "last_met_condition": "$body.status.last_met_condition"
          },
          "watch": "$body.watch"
        }
  - do:
      raw:
        method: PUT
        path: "_watcher/watch/my_watch/_ack/test_index"
  - is_false: _shards.failures
  - do:
      raw:
        method: GET
        path: "_watcher/watch/my_watch"
  - is_false: _shards.failures
  - match:
      $body:
        {
          "found": true,
          "_id": "my_watch",
          "_seq_no": 2,
          "_primary_term": 1,
          "_version": 3,
          "status": {
            "version": 3,
            "actions": {
              "test_index": {
                "ack": {
                  "timestamp": "$body.status.actions.test_index.ack.timestamp",
                  "state": "acked"
                },
                "last_execution" : {
                  "timestamp": "$body.status.actions.test_index.last_execution.timestamp",
                  "successful": true
                },
                "last_successful_execution" : {
                  "timestamp": "$body.status.actions.test_index.last_execution.timestamp",
                  "successful": true
                }
              }
            },
            "state": "$body.status.state",
            "execution_state": "executed",
            "last_checked": "$body.status.last_checked",
            "last_met_condition": "$body.status.last_met_condition"
          },
          "watch": "$body.watch"
        }
---
"line_245":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: POST
        path: "_watcher/watch/my_watch/_ack/action1,action2"
  - is_false: _shards.failures
---
"line_253":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: POST
        path: "_watcher/watch/my_watch/_execute"
        body: |
          { "record_execution" : true }
  - is_false: _shards.failures
  - do:
      raw:
        method: POST
        path: "_watcher/watch/my_watch/_ack"
  - is_false: _shards.failures
  - match:
      $body:
        {
          "status": {
            "state": {
              "active": true,
              "timestamp": "$body.status.state.timestamp"
            },
            "last_checked": "$body.status.last_checked",
            "last_met_condition": "$body.status.last_met_condition",
            "actions": {
              "test_index": {
                "ack" : {
                  "timestamp": "$body.status.actions.test_index.ack.timestamp",
                  "state": "acked"
                },
                "last_execution" : {
                  "timestamp": "$body.status.actions.test_index.last_execution.timestamp",
                  "successful": true
                },
                "last_successful_execution" : {
                  "timestamp": "$body.status.actions.test_index.last_successful_execution.timestamp",
                  "successful": true
                }
              }
            },
            "execution_state": "executed",
            "version": 2
          }
        }
        
