---
"line_228":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
# Named setup node

  # Fetch the node name. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - is_true: master_node
  - set: { master_node: node_name }

  - do:
      raw:
        method: GET
        path: "_ml/memory/_stats"
        human: ""
  - is_false: _shards.failures
  - match:
      $body:
        {
          "_nodes": {
            "total": 1,
            "successful": 1,
            "failed": 0
          },
          "cluster_name": $body.cluster_name,
          "nodes": {
            $node_name: {
              "name": "node-0",
              "ephemeral_id": "$body.$_path",
              "transport_address": "$body.$_path",
              "attributes": $body.$_path,
              "roles": [
                "data",
                "data_cold",
                "data_content",
                "data_frozen",
                "data_hot",
                "data_warm",
                "ingest",
                "master",
                "ml",
                "remote_cluster_client",
                "transform"
              ],
              "mem": {
                "total": "$body.$_path",
                "total_in_bytes": $body.$_path,
                "adjusted_total": "$body.$_path",
                "adjusted_total_in_bytes": $body.$_path,
                "ml": {
                  "max": "$body.$_path",
                  "max_in_bytes": $body.$_path,
                  "native_code_overhead": "0b",
                  "native_code_overhead_in_bytes": 0,
                  "anomaly_detectors": "0b",
                  "anomaly_detectors_in_bytes": 0,
                  "data_frame_analytics": "0b",
                  "data_frame_analytics_in_bytes": 0,
                  "native_inference": "0b",
                  "native_inference_in_bytes": 0
                }
              },
              "jvm": {
                "heap_max": "$body.$_path",
                "heap_max_in_bytes": $body.$_path,
                "java_inference_max": "$body.$_path",
                "java_inference_max_in_bytes": $body.$_path,
                "java_inference": "0b",
                "java_inference_in_bytes": 0
              }
            }
          }
        }
