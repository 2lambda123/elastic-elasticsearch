---
"line_15":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
# Named setup ledger

  - do:
        indices.create:
          index: ledger
          body:
            settings:
              number_of_shards: 2
              number_of_replicas: 1
            mappings:
              properties:
                type:
                  type: keyword
                amount:
                  type: double
  - do:
        bulk:
          index: ledger
          refresh: true
          body: |
            {"index":{}}
            {"date": "2015/01/01 00:00:00", "amount": 200, "type": "sale", "description": "something"}
            {"index":{}}
            {"date": "2015/01/01 00:00:00", "amount": 10, "type": "expense", "description": "another thing"}
            {"index":{}}
            {"date": "2015/01/01 00:00:00", "amount": 150, "type": "sale", "description": "blah"}
            {"index":{}}
            {"date": "2015/01/01 00:00:00", "amount": 50, "type": "expense", "description": "cost of blah"}
            {"index":{}}
            {"date": "2015/01/01 00:00:00", "amount": 50, "type": "expense", "description": "advertisement"}
  - do:
      raw:
        method: POST
        path: "ledger/_search"
        size: "0"
        body: |
          {
            "query": {
              "match_all": {}
            },
            "aggs": {
              "profit": {
                "scripted_metric": {
                  "init_script": "state.transactions = []",
                  "map_script": "state.transactions.add(doc.type.value == 'sale' ? doc.amount.value : -1 * doc.amount.value)",
                  "combine_script": "double profit = 0; for (t in state.transactions) { profit += t } return profit",
                  "reduce_script": "double profit = 0; for (a in states) { profit += a } return profit"
                }
              }
            }
          }
  - is_false: _shards.failures
  - match:
      $body:
        {
          "took": $body.took,
          "_shards": $body._shards, "hits": $body.hits, "timed_out": false,
          "aggregations": {
            "profit": {
              "value": 240.0
            }
          }
        }
---
"line_59":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
# Named setup ledger

  - do:
        indices.create:
          index: ledger
          body:
            settings:
              number_of_shards: 2
              number_of_replicas: 1
            mappings:
              properties:
                type:
                  type: keyword
                amount:
                  type: double
  - do:
        bulk:
          index: ledger
          refresh: true
          body: |
            {"index":{}}
            {"date": "2015/01/01 00:00:00", "amount": 200, "type": "sale", "description": "something"}
            {"index":{}}
            {"date": "2015/01/01 00:00:00", "amount": 10, "type": "expense", "description": "another thing"}
            {"index":{}}
            {"date": "2015/01/01 00:00:00", "amount": 150, "type": "sale", "description": "blah"}
            {"index":{}}
            {"date": "2015/01/01 00:00:00", "amount": 50, "type": "expense", "description": "cost of blah"}
            {"index":{}}
            {"date": "2015/01/01 00:00:00", "amount": 50, "type": "expense", "description": "advertisement"}
# Named setup stored_scripted_metric_script

  - do:
      put_script:
        id: "my_init_script"
        body: { "script": { "lang": "painless", "source": "state.transactions = []" } }
  - match: { acknowledged: true }

  - do:
      put_script:
        id: "my_map_script"
        body: { "script": { "lang": "painless", "source": "state.transactions.add(doc.type.value == 'sale' ? doc.amount.value : -1 * doc.amount.value)" } }
  - match: { acknowledged: true }

  - do:
      put_script:
        id: "my_combine_script"
        body: { "script": { "lang": "painless", "source": "double profit = 0;for (t in state.transactions) { profit += t; } return profit" } }
  - match: { acknowledged: true }

  - do:
      put_script:
        id: "my_reduce_script"
        body: { "script": { "lang": "painless", "source": "double profit = 0;for (a in states) { profit += a; } return profit" } }
  - match: { acknowledged: true }

  - do:
      raw:
        method: POST
        path: "ledger/_search"
        size: "0"
        body: |
          {
            "aggs": {
              "profit": {
                "scripted_metric": {
                  "init_script": {
                    "id": "my_init_script"
                  },
                  "map_script": {
                    "id": "my_map_script"
                  },
                  "combine_script": {
                    "id": "my_combine_script"
                  },
                  "params": {
                    "field": "amount"
                  },
                  "reduce_script": {
                    "id": "my_reduce_script"
                  }
                }
              }
            }
          }
  - is_false: _shards.failures
  - match:
      $body:
        {
          "took": $body.took,
          "_shards": $body._shards, "hits": $body.hits, "timed_out": false,
          "aggregations": {
            "profit": {
              "value": 240.0
            }
          }
        }
---
"line_155":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "transactions/_bulk"
        refresh: ""
        body: |
          {"index":{"_id":1}}
          {"type": "sale","amount": 80}
          {"index":{"_id":2}}
          {"type": "cost","amount": 10}
          {"index":{"_id":3}}
          {"type": "cost","amount": 30}
          {"index":{"_id":4}}
          {"type": "sale","amount": 130}
  - is_false: _shards.failures
