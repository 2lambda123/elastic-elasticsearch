---
setup:
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "description": "My optional pipeline description",
            "processors": [
              {
                "set": {
                  "description": "My optional processor description",
                  "field": "my-long-field",
                  "value": 10
                }
              },
              {
                "set": {
                  "description": "Set 'my-boolean-field' to true",
                  "field": "my-boolean-field",
                  "value": true
                }
              },
              {
                "lowercase": {
                  "field": "my-keyword-field"
                }
              }
            ]
          }
---
"line_106":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline-id"
        body: |
          {
            "version": 1,
            "processors": [ {"lowercase": {"field":"my-keyword-field"}} ]
          }
  - is_false: _shards.failures
---
"line_135":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: POST
        path: "_ingest/pipeline/my-pipeline/_simulate"
        body: |
          {
            "docs": [
              {
                "_source": {
                  "my-keyword-field": "FOO"
                }
              },
              {
                "_source": {
                  "my-keyword-field": "BAR"
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_157":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: POST
        path: "_ingest/pipeline/_simulate"
        body: |
          {
            "pipeline": {
              "processors": [
                {
                  "lowercase": {
                    "field": "my-keyword-field"
                  }
                }
              ]
            },
            "docs": [
              {
                "_source": {
                  "my-keyword-field": "FOO"
                }
              },
              {
                "_source": {
                  "my-keyword-field": "BAR"
                }
              }
            ]
          }
  - is_false: _shards.failures
  - match:
      $body:
        {
          "docs": [
            {
              "doc": {
                "_index": "_index",
                "_id": "_id",
                "_version": "-3",
                "_source": {
                  "my-keyword-field": "foo"
                },
                "_ingest": {
                  "timestamp": $body.docs.0.doc._ingest.timestamp
                }
              }
            },
            {
              "doc": {
                "_index": "_index",
                "_id": "_id",
                "_version": "-3",
                "_source": {
                  "my-keyword-field": "bar"
                },
                "_ingest": {
                  "timestamp": $body.docs.1.doc._ingest.timestamp
                }
              }
            }
          ]
        }
---
"line_230":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
# Named setup my_data_stream

  - do:
      indices.put_index_template:
        name: my-data-stream-template
        body: |
          {
            "index_patterns": [ "my-data-stream*" ],
            "data_stream": { },
            "priority": 500
          }

  - do:
      raw:
        method: PUT
        path: '_data_stream/my-data-stream'

  - do:
      raw:
        method: POST
        path: "my-data-stream/_doc"
        pipeline: "my-pipeline"
        body: |
          {
            "@timestamp": "2099-03-07T11:04:05.000Z",
            "my-keyword-field": "foo"
          }
  - is_false: _shards.failures
  - do:
      raw:
        method: PUT
        path: "my-data-stream/_bulk"
        pipeline: "my-pipeline"
        body: |
          { "create":{ } }
          { "@timestamp": "2099-03-07T11:04:06.000Z", "my-keyword-field": "foo" }
          { "create":{ } }
          { "@timestamp": "2099-03-07T11:04:07.000Z", "my-keyword-field": "bar" }
  - is_false: _shards.failures
# Named teardown data_stream_cleanup

  - do:
      raw:
        method: DELETE
        path: '_data_stream/*'
  - is_true: acknowledged
  - do:
      raw:
        method: DELETE
        path: '_index_template/*'
  - is_true: acknowledged

---
"line_250":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
# Named setup my_data_stream

  - do:
      indices.put_index_template:
        name: my-data-stream-template
        body: |
          {
            "index_patterns": [ "my-data-stream*" ],
            "data_stream": { },
            "priority": 500
          }

  - do:
      raw:
        method: PUT
        path: '_data_stream/my-data-stream'

  - do:
      raw:
        method: POST
        path: "my-data-stream/_update_by_query"
        pipeline: "my-pipeline"
  - is_false: _shards.failures
  - do:
      raw:
        method: POST
        path: "_reindex"
        body: |
          {
            "source": {
              "index": "my-data-stream"
            },
            "dest": {
              "index": "my-new-data-stream",
              "op_type": "create",
              "pipeline": "my-pipeline"
            }
          }
  - is_false: _shards.failures
# Named teardown data_stream_cleanup

  - do:
      raw:
        method: DELETE
        path: '_data_stream/*'
  - is_true: acknowledged
  - do:
      raw:
        method: DELETE
        path: '_index_template/*'
  - is_true: acknowledged

---
"line_333":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/logs-my_app-default"
        body: |
          {
            "description": "Pipeline for `my_app` dataset",
            "processors": [ {"lowercase": {"field":"my-keyword-field"}} ]
          }
  - is_false: _shards.failures
  - do:
      raw:
        method: PUT
        path: "_component_template/logs-my_app-settings"
        body: |
          {
            "template": {
              "settings": {
                "index.default_pipeline": "logs-my_app-default",
                "index.lifecycle.name": "logs"
              }
            }
          }
  - is_false: _shards.failures
  - do:
      raw:
        method: PUT
        path: "_index_template/logs-my_app-template"
        body: |
          {
            "index_patterns": ["logs-my_app-*"],
            "data_stream": { },
            "priority": 500,
            "composed_of": ["logs-my_app-settings"]
          }
  - is_false: _shards.failures
  - do:
      raw:
        method: PUT
        path: "_data_stream/logs-my_app-default"
  - is_false: _shards.failures
  - do:
      raw:
        method: POST
        path: "logs-my_app-default/_rollover/"
  - is_false: _shards.failures
  - do:
      raw:
        method: DELETE
        path: "_data_stream/*"
  - is_false: _shards.failures
  - do:
      raw:
        method: DELETE
        path: "_index_template/*"
  - is_false: _shards.failures
---
"line_466":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "set": {
                  "field": "my-long-field",
                  "value": 10
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_483":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "set": {
                  "field": "_source.my-long-field",
                  "value": 10
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_504":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "dot_expander": {
                  "description": "Expand 'my-object-field.my-property'",
                  "field": "my-object-field.my-property"
                }
              },
              {
                "set": {
                  "description": "Set 'my-object-field.my-property' to 10",
                  "field": "my-object-field.my-property",
                  "value": 10
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_532":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "set": {
                  "description": "Set dynamic '<service>' field to 'code' value",
                  "field": "{{{service}}}",
                  "value": "{{{code}}}"
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_559":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "set": {
                  "description": "Set '_routing' to 'geoip.country_iso_code' value",
                  "field": "_routing",
                  "value": "{{{geoip.country_iso_code}}}"
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_578":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "set": {
                  "description": "Use geo_point dynamic template for address field",
                  "field": "_dynamic_templates",
                  "value": {
                    "address": "geo_point"
                  }
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_621":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "set": {
                  "description": "Index the ingest timestamp as 'event.ingested'",
                  "field": "event.ingested",
                  "value": "{{{_ingest.timestamp}}}"
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_647":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "rename": {
                  "description": "Rename 'provider' to 'cloud.provider'",
                  "field": "provider",
                  "target_field": "cloud.provider",
                  "ignore_failure": true
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_669":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "rename": {
                  "description": "Rename 'provider' to 'cloud.provider'",
                  "field": "provider",
                  "target_field": "cloud.provider",
                  "on_failure": [
                    {
                      "set": {
                        "description": "Set 'error.message'",
                        "field": "error.message",
                        "value": "Field 'provider' does not exist. Cannot rename to 'cloud.provider'",
                        "override": false
                      }
                    }
                  ]
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_697":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "rename": {
                  "description": "Rename 'provider' to 'cloud.provider'",
                  "field": "provider",
                  "target_field": "cloud.provider",
                  "on_failure": [
                    {
                      "set": {
                        "description": "Set 'error.message'",
                        "field": "error.message",
                        "value": "Field 'provider' does not exist. Cannot rename to 'cloud.provider'",
                        "override": false,
                        "on_failure": [
                          {
                            "set": {
                              "description": "Set 'error.message.multi'",
                              "field": "error.message.multi",
                              "value": "Document encountered multiple ingest errors",
                              "override": true
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_737":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [ {"lowercase": {"field":"my-keyword-field"}} ],
            "on_failure": [
              {
                "set": {
                  "description": "Index document to 'failed-<index>'",
                  "field": "_index",
                  "value": "failed-{{{ _index }}}"
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_763":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [ {"lowercase": {"field":"my-keyword-field"}} ],
            "on_failure": [
              {
                "set": {
                  "description": "Record error information",
                  "field": "error_information",
                  "value": "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message {{ _ingest.on_failure_message }}"
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_793":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "drop": {
                  "description": "Drop documents with 'network.name' of 'Guest'",
                  "if": "ctx?.network?.name == 'Guest'"
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_816":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "set": {
                  "description": "If 'url.scheme' is 'http', set 'url.insecure' to true",
                  "if": "ctx.url?.scheme =~ /^http[^s]/",
                  "field": "url.insecure",
                  "value": true
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_840":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "drop": {
                  "description": "Drop documents that don't contain 'prod' tag",
                  "if": "\n            Collection tags = ctx.tags;\n            if(tags != null){\n              for (String tag : tags) {\n                if (tag.toLowerCase().contains('prod')) {\n                  return false;\n                }\n              }\n            }\n            return true;\n        "
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_868":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_scripts/my-prod-tag-script"
        body: |
          {
            "script": {
              "lang": "painless",
              "source": "\n      Collection tags = ctx.tags;\n      if(tags != null){\n        for (String tag : tags) {\n          if (tag.toLowerCase().contains('prod')) {\n            return false;\n          }\n        }\n      }\n      return true;\n    "
            }
          }
  - is_false: _shards.failures
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "drop": {
                  "description": "Drop documents that don't contain 'prod' tag",
                  "if": { "id": "my-prod-tag-script" }
                }
              }
            ]
          }
  - is_false: _shards.failures
  - do:
      raw:
        method: DELETE
        path: "_scripts/my-prod-tag-script"
  - is_false: _shards.failures
  - do:
      raw:
        method: DELETE
        path: "_ingest/pipeline/my-pipeline"
  - is_false: _shards.failures
---
"line_923":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/my-pipeline"
        body: |
          {
            "processors": [
              {
                "drop": {
                  "description": "Drop documents that contain 'network.name' of 'Guest'",
                  "if": "ctx.network?.name != null && ctx.network.name.contains('Guest')"
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_948":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: PUT
        path: "_ingest/pipeline/one-pipeline-to-rule-them-all"
        body: |
          {
            "processors": [
              {
                "pipeline": {
                  "description": "If 'service.name' is 'apache_httpd', use 'httpd_pipeline'",
                  "if": "ctx.service?.name == 'apache_httpd'",
                  "name": "httpd_pipeline"
                }
              },
              {
                "pipeline": {
                  "description": "If 'service.name' is 'syslog', use 'syslog_pipeline'",
                  "if": "ctx.service?.name == 'syslog'",
                  "name": "syslog_pipeline"
                }
              },
              {
                "fail": {
                  "description": "If 'service.name' is not 'apache_httpd' or 'syslog', return a failure message",
                  "if": "ctx.service?.name != 'apache_httpd' && ctx.service?.name != 'syslog'",
                  "message": "This pipeline requires service.name to be either `syslog` or `apache_httpd`"
                }
              }
            ]
          }
  - is_false: _shards.failures
---
"line_986":
  - skip:
      features:
        - default_shards
        - stash_in_key
        - stash_in_path
        - stash_path_replace
        - warnings
  - do:
      raw:
        method: GET
        path: "_nodes/stats/ingest"
        filter_path: "nodes.*.ingest"
  - is_false: _shards.failures
