--
:api: client-enrollment
:request: ClientEnrollmentRequest
:response: ClientEnrollmentResponse
--

[id="{upid}-{api}"]
=== Enroll Client API

Allows a client to configure itself to communicate with a secured {es} cluster.

[id="{upid}-{api}-request"]
==== Enroll Client Request

A +{request}+:


["source","java",subs="attributes,callouts,macros"]
--------------------------------------------------
include-tagged::{doc-tests-file}[{api}-kibana-request]
--------------------------------------------------


["source","java",subs="attributes,callouts,macros"]
--------------------------------------------------
include-tagged::{doc-tests-file}[{api}-generic-client-request]
--------------------------------------------------

include::../execution.asciidoc[]

[id="{upid}-{api}-response"]
==== Enroll Client Response

The returned +{response}+ allows to retrieve information about the
executed operation as follows:

["source","java",subs="attributes,callouts,macros"]
--------------------------------------------------
include-tagged::{doc-tests-file}[{api}-kibana-response]
--------------------------------------------------
<1> The CA certificate that has signed the certificate that the cluster uses for TLS on the HTTP layer
<2> A list of addresses (`<hostname>:<port>`) where the nodes of the cluster listen for HTTP connections


[id="{upid}-{api}-execute-async"]
==== Asynchronous Execution

This request can be executed asynchronously using the `cluster().enrollClientAsync()`
method:

["source","java",subs="attributes,callouts,macros"]
--------------------------------------------------
include-tagged::{doc-tests-file}[{api}-execute-async]
--------------------------------------------------

A typical listener for a `ClientEnrollmentResponse` looks like:

["source","java",subs="attributes,callouts,macros"]
--------------------------------------------------
include-tagged::{doc-tests-file}[{api}-execute-listener]
--------------------------------------------------
<1> Called when the execution is successfully completed. The response is
provided as an argument
<2> Called in case of failure. The raised exception is provided as an argument
