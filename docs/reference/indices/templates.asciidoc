[[indices-templates]]
== Index Templates

Index templates allow you to define templates that will automatically be
applied when new indices are created. The templates include both 
<<index-modules-settings,settings>> and <<mapping,mappings>>
and a simple pattern template that controls whether the template should be 
applied to the new index.

NOTE: Templates are only applied at index creation time. Changing a template
will have no impact on existing indices. When using the create index API, the
settings/mappings defined as part of the create index call will take precedence
over any matching settings/mappings defined in the template.

For example:

[source,js]
--------------------------------------------------
PUT _template/template_1
{
  "index_patterns": ["te*", "bar*"],
  "settings": {
    "number_of_shards": 1
  },
  "mappings": {
    "type1": {
      "_source": {
        "enabled": false
      },
      "properties": {
        "host_name": {
          "type": "keyword"
        },
        "created_at": {
          "type": "date",
          "format": "EEE MMM dd HH:mm:ss Z YYYY"
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TESTSETUP

NOTE: Index templates provide C-style /* */ block comments. Comments are allowed
everywhere in the JSON document except before the initial opening curly bracket. 

Defines a template named `template_1`, with a template pattern of `te*`.
The settings and mappings will be applied to any index name that matches
the `te*` pattern.

It is also possible to include aliases in an index template as follows:

[source,js]
--------------------------------------------------
PUT _template/template_1
{
    "index_patterns" : ["te*"],
    "settings" : {
        "number_of_shards" : 1
    },
    "aliases" : {
        "alias1" : {},
        "alias2" : {
            "filter" : {
                "term" : {"user" : "kimchy" }
            },
            "routing" : "kimchy"
        },
        "{index}-alias" : {} <1>
    }
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/DELETE _template\/template_1\n/]

<1> the `{index}` placeholder in the alias name will be replaced with the
actual index name that the template gets applied to, during index creation.

[float]
[[delete]]
=== Deleting a Template

Index templates are identified by a name (in the above case
`template_1`) and can be deleted as well:

[source,js]
--------------------------------------------------
DELETE /_template/template_1
--------------------------------------------------
// CONSOLE

[float]
[[getting]]
=== Getting templates

Index templates are identified by a name (in the above case
`template_1`) and can be retrieved using the following:

[source,js]
--------------------------------------------------
GET /_template/template_1
--------------------------------------------------
// CONSOLE

You can also match several templates by using wildcards like:

[source,js]
--------------------------------------------------
GET /_template/temp*
GET /_template/template_1,template_2
--------------------------------------------------
// CONSOLE

To get list of all index templates you can run:

[source,js]
--------------------------------------------------
GET /_template
--------------------------------------------------
// CONSOLE

[float]
[[indices-templates-exists]]
=== Template exists

Used to check if the template exists or not. For example:

[source,js]
-----------------------------------------------
HEAD _template/template_1
-----------------------------------------------
// CONSOLE

The HTTP status code indicates if the template with the given name
exists or not. Status code `200` means it exists and `404` means
it does not.

[float]
[[multiple-templates]]
=== Multiple Templates Matching

Multiple index templates can potentially match an index, in this case,
both the settings and mappings are merged into the final configuration
of the index. The order of the merging can be controlled using the
`order` parameter, with lower order being applied first, and higher
orders overriding them. For example:

[source,js]
--------------------------------------------------
PUT /_template/template_1
{
    "index_patterns" : ["*"],
    "order" : 0,
    "settings" : {
        "number_of_shards" : 1
    },
    "mappings" : {
        "type1" : {
            "_source" : { "enabled" : false }
        }
    }
}

PUT /_template/template_2
{
    "index_patterns" : ["te*"],
    "order" : 1,
    "settings" : {
        "number_of_shards" : 1
    },
    "mappings" : {
        "type1" : {
            "_source" : { "enabled" : true }
        }
    }
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/DELETE _template\/template_1\n/]

The above will disable storing the `_source` on all `type1` types, but
for indices that start with `te*`, `_source` will still be enabled.
Note, for mappings, the merging is "deep", meaning that specific
object/property based mappings can easily be added/overridden on higher
order templates, with lower order templates providing the basis.

[float]
[[versioning-templates]]
=== Template Versioning

Templates can optionally add a `version` number, which can be any integer value,
in order to simplify template management by external systems. The `version`
field is completely optional and it is meant solely for external management of
templates. To unset a `version`, simply replace the template without specifying
one.

[source,js]
--------------------------------------------------
PUT /_template/template_1
{
    "index_patterns" : ["*"],
    "order" : 0,
    "settings" : {
        "number_of_shards" : 1
    },
    "version": 123
}
--------------------------------------------------
// CONSOLE

To check the `version`, you can
<<common-options-response-filtering, filter responses>>
using `filter_path` to limit the response to just the `version`:

[source,js]
--------------------------------------------------
GET /_template/template_1?filter_path=*.version
--------------------------------------------------
// CONSOLE
// TEST[continued]

This should give a small response that makes it both easy and inexpensive to parse:

[source,js]
--------------------------------------------------
{
  "template_1" : {
    "version" : 123
  }
}
--------------------------------------------------
// TESTRESPONSE

[float]
[[infer]]
=== Infer Index Name from Alias Name

It is possible to define that the index name will be inferred from an alias by specifying `"infer_index_name_from_alias" : true` in the template definition.
In this case, prior to creating a new index, the index name will be inferred from one of the templates' aliases if the inferred index name will match the templates's pattern.

This is useful in case all requests to the index (including the first request) are done by the alias, for example:
[source,js]
--------------------------------------------------
PUT _template/template_1
{
    "index_patterns" : ["te*"],
    "infer_index_name_from_alias" : true,
    "settings" : {
        "number_of_shards" : 1
    },
    "aliases" : {
        "{index}-alias" : {}
    }
}

POST template-alias/type1
{
    "field01" : "value01"
}
--------------------------------------------------
// CONSOLE

In the above example an index named `template` and an alias named `template-alias` will be created.
In case `infer_index_name_from_alias` is `false` or not specified an index named `template-alias` and an alias named `template-alias-alias` will be created.

<1> Only aliases containing `{index}` will be used to infer the index name.
<2> In case multiple templates matched a request, higher order templates will be used first to try to infer. First match will be used for the index name.
<3> Inferring index name also works when using <<date-math-index-names, date math index names>>.