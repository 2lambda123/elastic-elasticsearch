[[advanced-configuration]]
=== Advanced configuration

Modifying advanced settings is generally not recommended and could negatively
impact performance and stability. Using the {es}-provided defaults
is recommended in most circumstances.

include::jvm-options.asciidoc[]

[[setting-jvm-heap-size]]
==== Setting the JVM heap size

By default, {es} automatically sets the JVM heap size based on a node's
<<node-roles,roles>> and total memory.
Using the default sizing is recommended for most production environments.

NOTE: Automatic heap sizing requires the <<jvm-version,bundled JDK>> or, if using
a custom JRE location, a Java 14 or later JRE.

To override the default heap size, set the minimum and maximum heap size
settings, `Xms` and `Xmx`. The minimum and maximum values must be the same.

The heap size should be based on the available RAM:

* Set `Xms` and `Xmx` to no more than 50% of your total memory. {es} requires
memory for purposes other than the JVM heap. For example, {es} uses
off-heap buffers for efficient network communication and relies
on the operating system's filesystem cache for
efficient access to files. The JVM itself also requires some memory. It is
normal for the {es} process to use more memory than the limit
configured with the `Xmx` setting.
+
NOTE: When running in a container, such as <<docker,Docker>>, total memory is
defined as the amount of memory visible to the container, not the total system
memory on the host.

* Set `Xms` and `Xmx` to no more than the threshold that the JVM uses for
compressed ordinary object pointers (oops). The exact threshold varies but
is near 32 GB. You can verify that you are under the threshold by checking
the logs for a heap size entry like this:
+
[source,txt]
----
heap size [1.9gb], compressed ordinary object pointers [true]
----

* Set `Xms` and `Xmx` to no more than the threshold for zero-based
compressed oops. The exact threshold varies but 26GB is safe on most
systems and can be as large as 30GB on some systems. You can verify that
you are under this threshold by starting {es} with the JVM options
`-XX:+UnlockDiagnosticVMOptions -XX:+PrintCompressedOopsMode` and checking
the logs for a heap address entry like this:
+
[source,txt]
----
heap address: 0x000000011be00000, size: 27648 MB, zero based Compressed Oops
----
+
This entry shows that zero-based compressed oops are enabled. If zero-based
compressed oops are not enabled, the entry looks like this:
+
[source,txt]
----
heap address: 0x0000000118400000, size: 28672 MB, Compressed Oops with base: 0x00000001183ff000
----

The more heap available to {es}, the more memory it can use for its internal
caches. This leaves less memory for the operating system to use
for the filesystem cache. Larger heaps can also cause longer garbage
collection pauses.

To configure the heap size, add the `Xms` and `Xmx` JVM arguments to a
custom JVM options file with the extension `.options` and
store it in the `jvm.options.d/` directory.
For example, to set the maximum heap size to 2GB, set both `Xms` and `Xmx` to 2g:

[source,txt]
------------------
-Xms2g
-Xmx2g
------------------

For testing, you can also set the heap sizes using the `ES_JAVA_OPTS`
environment variable:

[source,sh]
------------------
ES_JAVA_OPTS="-Xms2g -Xmx2g" ./bin/elasticsearch
------------------

The `ES_JAVA_OPTS` variable overrides all other JVM
options. We do not recommend using `ES_JAVA_OPTS` in production.

NOTE: If you are running {es} as a <<windows-service,Windows service>>,
the heap size is initially populated as specified, but can be modified through
the service manager. For more information, see <<windows-service>>.
