[[setup-upgrade]]
== Upgrading

[float]
[[rolling-upgrades]]
=== Rolling Upgrades

Recent user feedback has led us to revise our guidance on rolling upgrades.  It is no longer recommended to perform a rolling upgrade for Elasticsearch.  We have found that even minor changes in the underlying Lucene version can result in shard incompatibilities between the original and new versions being installed, and running them in parallel has led to cases of shard corruption.  In order to prevent this, we recommend that all nodes be upgraded at the same time, and that the cluster be completely shut down during the upgrade.

TIP: Before upgrading Elasticsearch, it is a good idea to consult the
<<breaking-changes,breaking changes>> docs.

[float]
[[backup]]
=== Back Up Your Data!

Before performing an upgrade, it's a good idea to back up the data on your system.  This will allow you to roll back in the event of a problem with the upgrade.  The upgrades sometimes include upgrades to the Lucene libraries used by Elasticsearch to access the index files, and after an index file has been updated to work with a new version of Lucene, it may not be accessible to the versions of Lucene present in earlier Elasticsearch releases.

To back up a running 1.0 or later system, it is simplest to use the snapshot feature.  Complete instructions for backup and restore with snapshots are available http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-snapshots.html[here].

[float]
[[restart-upgrade]]
=== Upgrade Process

In order to prevent possible shard corruption during and immediately after an upgrade, a full cluster stop and start is required.  In order to perform this upgrade:

* Disable shard reallocation (optional).  This is done to allow for a faster startup after cluster shutdown.  If this step is not performed, the nodes will immediately start trying to replicate shards to each other on startup and will spend a lot of time on wasted I/O.  With shard reallocation disabled, the nodes will join the cluster with their indices intact, without attempting to rebalance.  After startup is complete, reallocation will be turned back on.

* Disable writes and flush indices (optional).  This is done to allow for a faster startup after cluster shutdown.  If this step is performed, the cluster will not be able to perform write operations until after the restart is complete.  Disabling writes and performing a _flush operation will force all indices to wrte their transaction logs to internal index storage.  This will avoid the necessity for transaction log playback on startup, reducing the time needed to start the primary shards and to initialize any replicas.

This syntax is from versions 1.0 and up:

[source,sh]
--------------------------------------------------
	curl -XPUT localhost:9200/_cluster/settings -d '{
		"persistent" : {
		"cluster.routing.allocation.enable" : "none",
		"cluster.blocks.read_only" : true
		}
	}'
--------------------------------------------------

* Stop all Elasticsearch services on all nodes in the cluster.
[source,sh]
------------------------------------------------------
	curl -XPOST 'http://localhost:9200/_flush' -d '{
		"wait_if_ongoing" : true
		}'
	curl -XPOST 'http://localhost:9200/_shutdown'
------------------------------------------------------

* On the first node to be upgraded, extract the archive or install the new package as described above in the Rolling Upgrades section.  Repeat for all nodes.

* After upgrading Elasticsearch on all nodes is complete, the cluster can be started by starting each node individually.
** Start master-eligible nodes first, one at a time.  Verify that a quorum has been reached and a master has been elected before proceeding.
** Start data nodes and then client nodes one at a time, verifying that they successfully join the cluster.

* When the cluster is running and reaches a yellow state, shard reallocation and index writes can be enabled.

[source,sh]
------------------------------------------------------
	curl -XPUT localhost:9200/_cluster/settings -d '{
     		"persistent" : {
         	"cluster.routing.allocation.enable" : "all",
		"cluster.blocks.read_only" : false
     		}
 	}'
------------------------------------------------------

The cluster upgrade can be streamlined by installing the software before stopping cluster services.  If this is done, testing must be performed to ensure that no production data or configuration files are overwritten prior to restart.
