[[foreach-processor]]
=== Foreach processor
++++
<titleabbrev>Foreach</titleabbrev>
++++

Executes a processor on each element in an array or map.

All processors can operate on elements inside arrays and maps, but if the
number of elements is unknown, it can be cumbersome to process each element
in the same way. The `foreach` processor allows users to specify a field holding
an array or map and a processor that should be executed on each element in that
field.

The processor specified inside the foreach processor typically works on a single
element of the array or map. When iterating through the values of an array or
map, the foreach processor places the current value in the ingest metadata under
the `_ingest._value` key. If the value is a JSON object or other complex value,
the entirety of the value and any of its children are accessible through
`_ingest._value`.

When iterating over map values, the foreach processor also places the key value
under `_ingest._key`. Key values are always strings. Both the key and value for
map entries may be modified. If the key is set to `null`, the empty string, or
a string containing only whitespace, the map entry will be removed.

Note that fields from the document other than `_ingest._value` and
`_ingest._key` are accessible and modifiable from any processor specified inside
the foreach processor.

If the `foreach` processor fails to process an element and no `on_failure`
processor has been specified, then it aborts execution and leaves the array
or map unmodified.

[[foreach-options]]
.Foreach Options
[options="header"]
|======
| Name             | Required  | Default  | Description
| `field`          | yes       | -        | The array or map field
| `processor`      | yes       | -        | The processor to execute against each element
| `ignore_missing` | no        | false    | If `true` and `field` does not
exist or is `null`, the processor quietly exits without modifying the document
include::common-options.asciidoc[]
|======

Assume the following document:

[source,js]
--------------------------------------------------
{
  "values" : ["foo", "bar", "baz"]
}
--------------------------------------------------
// NOTCONSOLE

When this `foreach` processor operates on this sample document:

[source,js]
--------------------------------------------------
{
  "foreach" : {
    "field" : "values",
    "processor" : {
      "uppercase" : {
        "field" : "_ingest._value"
      }
    }
  }
}
--------------------------------------------------
// NOTCONSOLE

Then the document will look like this after processing:

[source,js]
--------------------------------------------------
{
  "values" : ["FOO", "BAR", "BAZ"]
}
--------------------------------------------------
// NOTCONSOLE

Let's take a look at another example:

[source,js]
--------------------------------------------------
{
  "persons" : [
    {
      "id" : "1",
      "name" : "John Doe"
    },
    {
      "id" : "2",
      "name" : "Jane Doe"
    }
  ]
}
--------------------------------------------------
// NOTCONSOLE

In this case, the `id` field needs to be removed,
so the following `foreach` processor is used:

[source,js]
--------------------------------------------------
{
  "foreach" : {
    "field" : "persons",
    "processor" : {
      "remove" : {
        "field" : "_ingest._value.id"
      }
    }
  }
}
--------------------------------------------------
// NOTCONSOLE

After processing the result is:

[source,js]
--------------------------------------------------
{
  "persons" : [
    {
      "name" : "John Doe"
    },
    {
      "name" : "Jane Doe"
    }
  ]
}
--------------------------------------------------
// NOTCONSOLE

The foreach processor can also be used on map fields such as:

[source,js]
--------------------------------------------------
{
  "products" : {
    "widgets" : {
      "total_sales" : 50,
      "unit_price": 1.99,
      "display_name": ""
    },
    "sprockets" : {
      "total_sales" : 100,
      "unit_price": 9.99,
      "display_name": "Super Sprockets"
    },
    "whizbangs" : {
      "total_sales" : 200,
      "unit_price": 19.99,
      "display_name": "Wonderful Whizbangs"
    }
  }
}
--------------------------------------------------
// NOTCONSOLE

When the following `foreach` processor operates on the document above with a
map field:

[source,js]
--------------------------------------------------
{
  "foreach": {
    "field": "products",
    "processor": {
      "uppercase": {
        "field": "_ingest._value.display_name"
      }
    }
  }
}
--------------------------------------------------
// NOTCONSOLE

Then the document will look like this after processing:

[source,js]
--------------------------------------------------
{
  "products" : {
    "widgets" : {
      "total_sales" : 50,
      "unit_price" : 1.99,
      "display_name" : ""
    },
    "sprockets" : {
      "total_sales" : 100,
      "unit_price" : 9.99,
      "display_name" : "SUPER SPROCKETS"
    },
    "whizbangs" : {
      "total_sales" : 200,
      "unit_price" : 19.99,
      "display_name" : "WONDERFUL WHIZBANGS"
    }
  }
}
--------------------------------------------------
// NOTCONSOLE

When this `foreach` processor operates on the document, it changes the map
keys resulting in the deletion of one map entry whose key is set to an
empty string.

[source,js]
--------------------------------------------------
{
  "foreach": {
    "field": "products",
    "processor": {
      "set": {
        "field": "_ingest._key",
        "value": "{{_ingest._value.display_name}}"
      }
    }
  }
}
--------------------------------------------------
// NOTCONSOLE

The result of the above processor is:

[source,js]
--------------------------------------------------
{
  "products" : {
    "Wonderful Whizbangs" : {
      "total_sales" : 200,
      "unit_price" : 19.99,
      "display_name" : "Wonderful Whizbangs"
    },
    "Super Sprockets" : {
      "total_sales" : 100,
      "unit_price" : 9.99,
      "display_name" : "Super Sprockets"
    }
  }
}
--------------------------------------------------
// NOTCONSOLE

The wrapped processor can have a `on_failure` definition.
For example, the `id` field may not exist on all person objects.
Instead of failing the index request, you can use an `on_failure`
block to send the document to the 'failure_index' index for later inspection:

[source,js]
--------------------------------------------------
{
  "foreach" : {
    "field" : "persons",
    "processor" : {
      "remove" : {
        "field" : "_value.id",
        "on_failure" : [
          {
            "set" : {
              "field": "_index",
              "value": "failure_index"
            }
          }
        ]
      }
    }
  }
}
--------------------------------------------------
// NOTCONSOLE

In this example, if the `remove` processor does fail, then
the array elements that have been processed thus far will
be updated.

Another advanced example can be found in the {plugins}/ingest-attachment-with-arrays.html[attachment processor documentation].
