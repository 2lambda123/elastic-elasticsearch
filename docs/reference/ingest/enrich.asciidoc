[role="xpack"]
[testenv="basic"]
[[ingest-enriching-data]]
== Enrich your data

You can use an <<enrich-processor,enrich processor>> to add data from your
existing indices to incoming documents during ingest.

For example, you can use an enrich processor to:

* Identify web services or vendors based on known IP addresses
* Add product information to retail orders based on product IDs
* Supplement contact information based on an email address
* Add postal codes based on user coordinates

[discrete]
[[how-enrich-works]]
=== How the enrich processor works

Most processors are self-contained and only change existing data in incoming
documents.

image::images/ingest/ingest-process.svg[align="center"]

The enrich processor adds new data to incoming documents and requires a few
special components:

image::images/ingest/enrich/enrich-process.svg[align="center"]

[[enrich-policy]]
enrich policy::
+
--
A set of configuration options used to add enrich data to incoming documents.
The policy contains:

// tag::enrich-policy-fields[]
* A list of one or more _source indices_ that contain the enrich data
* The _policy type_ that determines how the processor matches the enrich data
  to incoming documents
* A _match field_ from the source indices used to match incoming documents
* _Enrich fields_ containing enrich data from source indices to add
  to incoming documents
// end::enrich-policy-fields[]

You must <<execute-enrich-policy-api,execute>> an enrich policy before using it
with an enrich processor. When executed, an enrich policy uses enrich data from
source indices to create a system index called the _enrich index_. The processor
uses the enrich index to match and enrich incoming documents.
--

[[source-index]]
source index::
An index that contains enrich data to add to incoming documents. You can create
and manage a source index like a regular index. You also can use the same source
index in multiple enrich policies. You cannot use a data stream as a source
index.

[[enrich-index]]
enrich index::
+
--
A system index tied to a specific enrich policy.

Directly matching incoming documents to enrich data in source indices would be
slow and expensive. To speed things up, the enrich processor instead
uses an enrich index.

Enrich indices contain data from source indices but have a few special
properties:

* They are system indices, meaning they're managed internally by {es} and
  intended for use with enrich processors only.
* They always begin with `.enrich-*`.
* They are read-only, meaning you can't directly change them.
* They are <<indices-forcemerge,force merged>> for fast retrieval.
--

[discrete]
[[enrich-prereqs]]
=== Prerequisites

include::{es-repo-dir}/ingest.asciidoc[tag=ingest-prereqs]
include::{es-repo-dir}/ingest/apis/enrich/put-enrich-policy.asciidoc[tag=enrich-policy-api-prereqs]

[discrete]
[[set-up-an-enrich-processor]]
=== Set up an enrich processor

[IMPORTANT]
====
An enrich processor performs several operations and may impact the speed of
your ingest pipeline. Test and benchmark your enrich processors
before deploying them in production.

We do not recommend using an enrich processor to enrich real-time data. Enrich
processors work best with reference data that doesn't change frequently.
====

To set up an enrich processor, follow these steps. For example tutorials,
see <<geo-match-enrich-policy-type>> and <<match-enrich-policy-type>>.

[[create-enrich-source-index]]
. **Add enrich data**
+
--
Add data to one or more source indices.

[source,console]
----
POST my-source-index/_doc
{
  "my-match-field": "foo",
  "my-enrich-field": "enrich data for 'foo' value"
}

POST my-source-index/_doc
{
  "my-match-field": "bar",
  "my-enrich-field": "enrich data for 'bar' value"
}
----
// TEST[s/_doc/_doc?refresh=wait_for/]
--

[[create-enrich-policy]]
. **Create an enrich policy**
+
--
Use the <<put-enrich-policy-api,create enrich policy API>> to create an enrich
policy.

WARNING: Once created, you can't update or change an enrich policy. See
<<update-enrich-policies>>.

[source,console]
----
PUT _enrich/policy/my-enrich-policy
{
  "match": {
    "indices": "my-source-index",
    "match_field": "my-match-field",
    "enrich_fields": [ "my-enrich-field" ]
  }
}
----
// TEST[continued]
--

[[execute-enrich-policy]]
. Execute the enrich policy

Use the <<execute-enrich-policy-api,execute enrich policy API>> to execute the
enrich policy and create an <<enrich-index,enrich index>>.

[source,console]
----
PUT _enrich/policy/my-enrich-policy/_execute
----
// TEST[continued]

[[add-enrich-processor]]
. **Add an enrich processor to an ingest pipeline**
+
--
Set up an ingest pipeline that includes an <<enrich-processor,enrich processor>>
with your policy. To be enriched, incoming documents must contain the `field`
configured in the processor. The processor adds the enrich data to the
`target_field`.

You can create the pipeline using
<<create-manage-ingest-pipelines,{kib}'s **Ingest Node Pipelines** feature>>.

[role="screenshot"]
image::images/ingest/ingest-pipeline-list.png[Kibana's Ingest Node Pipelines list view,align="center"]

You can also create the pipeline using the <<put-pipeline-api,create pipeline
API>>.

[source,console]
----
PUT _ingest/pipeline/my-pipeline
{
  "processors": [
    {
      "enrich": {
        "description": "My optional processor description",
        "policy_name": "my-enrich-policy",
        "field": "my-incoming-match-field",
        "target_field": "my-enrich-data-field",
        "max_matches": "1"
      }
    }
  ]
}
----
// TEST[continued]
--

. **Test the pipeline**
+
--
Before using the pipeline in production, we recommend you test it using sample
data. When creating the pipeline in {kib}, click **Add documents**. In the
**Documents** tab, provide sample documents and click **Run the pipeline**.

[role="screenshot"]
image::images/ingest/test-a-pipeline.png[Test a pipeline in Kibana,align="center"]

You can also test pipelines using the <<simulate-pipeline-api,simulate pipeline
API>>.

[source,console]
----
POST _ingest/pipeline/my-pipeline/_simulate
{
  "docs": [
    {
      "_source": {
        "my-incoming-match-field": "foo"
      }
    },
    {
      "_source": {
        "my-incoming-match-field": "baz"
      }
    }
  ]
}
----
// TEST[continued]

The API returns transformed documents:

[source,console-result]
----
{
  "docs": [
    {
      "doc": {
        "_index": "_index",
        "_id": "_id",
        "_source": {
          "my-enrich-data-field": {
            "my-enrich-field": "enrich data for 'foo' value",
            "my-match-field": "foo"
          },
          "my-incoming-match-field": "foo"
        },
        "_ingest": {
          "timestamp": "2099-03-07T11:04:05.000Z"
        }
      }
    },
    {
      "doc": {
        "_index": "_index",
        "_id": "_id",
        "_source": {
          "my-incoming-match-field": "baz"
        },
        "_ingest": {
          "timestamp": "2099-03-07T11:04:06.000Z"
        }
      }
    }
  ]
}
----
// TESTRESPONSE[s/"2099-03-07T11:04:05.000Z"/$body.docs.0.doc._ingest.timestamp/]
// TESTRESPONSE[s/"2099-03-07T11:04:06.000Z"/$body.docs.1.doc._ingest.timestamp/]
--

[[ingest-enrich-docs]]
. **Enrich documents**

// TODO: ADD AFTER #70907 IS MERGED
// To add the pipeline to a {fleet} integration or {agent}, see
// <<manage-pipelines-for-fleet-elastic-agent>>.

You can also use the `pipeline` query parameter to apply a pipeline to documents
in <<docs-index_,individual>> or <<docs-bulk,bulk>> indexing requests.

[source,console]
----
POST my-data-stream/_doc?pipeline=my-pipeline
{
  "@timestamp": "2099-03-07T11:04:05.000Z",
  "my-incoming-match-field": "foo"
}

PUT my-data-stream/_bulk?pipeline=my-pipeline
{ "create":{ } }
{ "@timestamp": "2099-03-07T11:04:05.000Z", "my-incoming-match-field": "foo" }
{ "create":{ } }
{ "@timestamp": "2099-03-07T11:06:07.000Z", "my-incoming-match-field": "bar" }
----
// TEST[continued]

To enrich indexed documents, use the pipeline with the <<docs-update-by-query,update
by query>> or <<docs-reindex,reindex>> APIs.

[source,console]
----
POST _reindex
{
  "source": {
    "index": "my-data-stream"
  },
  "dest": {
    "index": "my-new-data-stream",
    "op_type": "create",
    "pipeline": "my-pipeline"
  }
}
----
// TEST[continued]

////
[source,console]
----
DELETE _ingest/pipeline/my-pipeline
DELETE _enrich/policy/my-enrich-policy
----
// TEST[continued]
////

[discrete]
[[update-enrich-data]]
=== Update an enrich index

include::{es-repo-dir}/ingest/apis/enrich/execute-enrich-policy.asciidoc[tag=update-enrich-index]

[discrete]
[[update-enrich-policies]]
=== Update an enrich policy

// tag::update-enrich-policy[]
Once created, you can't update or change an enrich policy. Instead, you can:

. Create and <<execute-enrich-policy-api,execute>> a new enrich policy.

. Replace the previous enrich policy with the new enrich policy in any in-use
enrich processors.

. Use the <<delete-enrich-policy-api, delete enrich policy>> API to delete the
previous enrich policy.
// end::update-enrich-policy[]

include::geo-match-enrich-policy-type-ex.asciidoc[]
include::match-enrich-policy-type-ex.asciidoc[]
