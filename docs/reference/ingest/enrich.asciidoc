[role="xpack"]
[testenv="basic"]
[[ingest-enriching-data]]
== Enrich your data using the ingest node

The <<enrich-processor,enrich processor>> allows documents to be enriched with data from
an enrich index that is managed by an enrich policy prior to indexing.

The data that is used by the enrich index is managed by the user in regular indices.
An enrich policy is configuration that indicates how an enrich index is created from
the data in the user's maintained indices. When an enrich policy is executed
a new enrich index is created for that policy, which the enrich process can then use.

An enrich policy also controls what kind of enrichment the `enrich` processor is able to do.

[[enrich-policy-definition]]
=== Enrich Policy Definition

The <<enrich-processor,enrich processor>> requires more than just the configuration in a pipeline.
The main piece to configure is the enrich policy:

[[enrich-policy-options]]
.Enrich policy options
[options="header"]
|======
| Name               | Required  | Default              | Description
| `type`             | yes       | -                    | The policy type.
| `indices`          | yes       | -                    | The indices to fetch the data from.
| `query`            | no        | `match_all` query    | The query to be used to select which documents are included.
| `match_field`      | yes       | -                    | The field that will be used to match against an input document.
| `enrich_fields`    | yes       | -                    | The fields that will be available to enrich the input document.
|======

[[enrich-policy-types]]
==== Policy types

An enrich processor is associated with a policy via the `policy_name` option.
The policy type of the policy determines what kind of enrichment an `enrich` processor is able to do.

The following policy types are currently supported:

* `exact_match` - Can lookup exactly one document and use its content to enrich the document being ingested.

[[enrich-processor-getting-started]]
=== Getting started

Create a regular index that contains data you like to enrich your incoming documents with:

[source,js]
--------------------------------------------------
PUT /users/_doc/1?refresh
{
    "email": "mardy.brown@email.me",
    "first_name": "Mardy",
    "last_name": "Brown",
    "address": "6649 N Blue Gum St",
    "city": "New Orleans",
    "county": "Orleans",
    "state": "LA",
    "zip": 70116,
    "phone1":"504-621-8927",
    "phone2": "504-845-1427",
    "web": "mardy-brown.me"
}
--------------------------------------------------
// CONSOLE

Create an enrich policy:

[source,js]
--------------------------------------------------
PUT /_enrich/policy/users-policy
{
    "exact_match": {
        "indices": "users",
        "match_field": "email",
        "enrich_fields": ["first_name", "last_name", "address", "city", "zip", "state"]
    }
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

Which returns:

[source,js]
--------------------------------------------------
{
    "acknowledged": true
}
--------------------------------------------------
// TESTRESPONSE

Execute that enrich policy:

[source,js]
--------------------------------------------------
POST /_enrich/policy/users-policy/_execute
--------------------------------------------------
// CONSOLE
// TEST[continued]

Which returns:

[source,js]
--------------------------------------------------
{
    "acknowledged": true
}
--------------------------------------------------
// TESTRESPONSE

Create the pipeline and enrich a document:

[source,js]
--------------------------------------------------
PUT _ingest/pipeline/user_lookup
{
  "description" : "Enriching user details to messages",
  "processors" : [
    {
      "enrich" : {
        "policy_name": "users-policy",
        "field" : "email",
        "target_field": "user"
      }
    }
  ]
}

PUT my_index/_doc/my_id?pipeline=user_lookup
{
  "email": "mardy.brown@email.me"
}

GET my_index/_doc/my_id
--------------------------------------------------
// CONSOLE
// TEST[continued]

Which returns:

[source,js]
--------------------------------------------------
{
  "found": true,
  "_index": "my_index",
  "_type": "_doc",
  "_id": "my_id",
  "_version": 1,
  "_seq_no": 55,
  "_primary_term": 1,
  "_source": {
    "user": {
      "email": "mardy.brown@email.me",
      "first_name": "Mardy",
      "last_name": "Brown",
      "zip": 70116,
      "address": "6649 N Blue Gum St",
      "city": "New Orleans",
      "state": "LA"
    },
    "email": "mardy.brown@email.me"
  }
}
--------------------------------------------------
// TESTRESPONSE[s/"_seq_no": \d+/"_seq_no" : $body._seq_no/ s/"_primary_term":1/"_primary_term" : $body._primary_term/]

//////////////////////////

[source,js]
--------------------------------------------------
DELETE /_ingest/pipeline/user_lookup
DELETE /_enrich/policy/users-policy
--------------------------------------------------
// CONSOLE
// TEST[continued]

//////////////////////////

[[enrich-policy-apis]]
=== Enrich Policy APIs

Also there are several APIs in order to manage and execute enrich policies:

* <<put-enrich-policy-api,Put policy api>>.
* <<get-enrich-policy-api,Get enrich policy api>>.
* <<delete-enrich-policy-api,Delete policy api>>.
* <<execute-enrich-policy-api,Execute policy api>>.

If security is enabled then the user managing enrich policies will need to have
the `enrich_user` builtin role. Also the user will need to have read privileges
for the indices the enrich policy is referring to.