[role="xpack"]
[testenv="basic"]
[[sql-functions-conditional]]
=== Conditional Functions And Expressions

Functions that return one of their arguments by evaluating in an if-else manner.

[[sql-functions-conditional-case]]
==== `CASE`

.Synopsis:
[source, sql]
----
CASE WHEN condition THEN result
    [WHEN ...]
    [ELSE defaultResult]
END
----

*Input*:

Multiple but at least one WHEN *condition* THEN *result* clause and optional ELSE *defaultResult* clause.
Every *condition* should be boolean expression.

*Output*: one of the *result* expressions if the corresponding WHEN *condition* evaluates to `true`,
the *defaultResult* if all WHEN *condition* clauses evaluate to `false`. If the optional ELSE *defaultResult*
clause is missing and all WHEN *condition* clauses evaluate to `false` then `null` is returned.

.Description

The case expression is a generic conditional expression which simulates if/else statements of other programming languages
If the conditionâ€™s result is true, the value of the result expression that follows the condition will be the returned
the subsequent when clauses will be skipped and not processed.



["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[case]
----

["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[caseReturnNull]
----

["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[caseWithElse]
----


As a variant, a case expression can be expressed with a syntax similar to *switch-case* of other programming languages:
[source, sql]
----
CASE expression
     WHEN value1 THEN result1
    [WHEN value2 THEN result2]
    [WHEN ...]
    [ELSE defaultResult]
END
----

In this case it's transformed internally to:
[source, sql]
----
CASE WHEN expression = value1 THEN result1
    [WHEN expression = value2 THEN result2]
    [WHEN ...]
    [ELSE defaultResult]
END
----

["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[caseWithOperand]
----

["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[caseWithOperandAndElse]
----

[NOTE]
All result expressions must be of compatible data types.

[[sql-functions-conditional-coalesce]]
==== `COALESCE`

.Synopsis:
[source, sql]
----
COALESCE(
    expression, <1>
    expression, <2>
    ...)
----

*Input*:

<1> 1st expression

<2> 2nd expression

...

**N**th expression

COALESCE can take an arbitrary number of arguments.

*Output*: one of the expressions or `null`

.Description

Returns the first of its arguments that is not null.
If all arguments are null, then it returns `null`.



["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[coalesceReturnNonNull]
----

["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[coalesceReturnNull]
----

[[sql-functions-conditional-greatest]]
==== `GREATEST`

.Synopsis:
[source, sql]
----
GREATEST(
    expression, <1>
    expression, <2>
    ...)
----

*Input*:

<1> 1st expression

<2> 2nd expression

...

**N**th expression

GREATEST can take an arbitrary number of arguments and
all of them must be of the same data type.

*Output*: one of the expressions or `null`

.Description

Returns the argument that has the largest value which is not null.
If all arguments are null, then it returns `null`.



["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[greatestReturnNonNull]
----

["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[greatestReturnNull]
----

[[sql-functions-conditional-ifnull]]
==== `IFNULL`

.Synopsis:
[source, sql]
----
IFNULL(
    expression, <1>
    expression) <2>
----

*Input*:

<1> 1st expression

<2> 2nd expression


*Output*: 2nd expression if 1st expression is null, otherwise 1st expression.

.Description

Variant of <<sql-functions-conditional-coalesce>> with only two arguments.
Returns the first of its arguments that is not null.
If all arguments are null, then it returns `null`.



["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[ifNullReturnFirst]
----

["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[ifNullReturnSecond]
----


[[sql-functions-conditional-isnull]]
==== `ISNULL`

.Synopsis:
[source, sql]
----
ISNULL(
    expression, <1>
    expression) <2>
----

*Input*:

<1> 1st expression

<2> 2nd expression


*Output*: 2nd expression if 1st expression is null, otherwise 1st expression.

.Description

Variant of <<sql-functions-conditional-coalesce>> with only two arguments.
Returns the first of its arguments that is not null.
If all arguments are null, then it returns `null`.



["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[isNullReturnFirst]
----

["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[isNullReturnSecond]
----


[[sql-functions-conditional-least]]
==== `LEAST`

.Synopsis:
[source, sql]
----
LEAST(
    expression, <1>
    expression, <2>
    ...)
----

*Input*:

<1> 1st expression

<2> 2nd expression

...

**N**th expression

LEAST can take an arbitrary number of arguments and
all of them must be of the same data type.

*Output*: one of the expressions or `null`

.Description

Returns the argument that has the smallest value which is not null.
If all arguments are null, then it returns `null`.



["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[leastReturnNonNull]
----

["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[leastReturnNull]
----


[[sql-functions-conditional-nullif]]
==== `NULLIF`

.Synopsis:
[source, sql]
----
NULLIF(
    expression, <1>
    expression) <2>
----

*Input*:

<1> 1st expression

<2> 2nd expression


*Output*: `null` if the 2 expressions are equal, otherwise the 1st expression.

.Description

Returns `null` when the two input expressions are equal and
if not, it returns the 1st expression.


["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[nullIfReturnFirst]
----

["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[nullIfReturnNull]
----


[[sql-functions-conditional-nvl]]
==== `NVL`

.Synopsis:
[source, sql]
----
NVL(
    expression, <1>
    expression) <2>
----

*Input*:

<1> 1st expression

<2> 2nd expression


*Output*: 2nd expression if 1st expression is null, otherwise 1st expression.

.Description

Variant of <<sql-functions-conditional-coalesce>> with only two arguments.
Returns the first of its arguments that is not null.
If all arguments are null, then it returns `null`.



["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[nvlReturnFirst]
----

["source","sql",subs="attributes,callouts,macros"]
----
include-tagged::{sql-specs}/docs/docs.csv-spec[nvlReturnSecond]
----


