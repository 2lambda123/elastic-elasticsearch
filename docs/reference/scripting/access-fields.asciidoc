[[script-fields-api]]
== Access fields in a document with the `field` API
++++
<titleabbrev>Access fields in a document</titleabbrev>
++++

beta::["The `field` API is still in development and should be considered a beta feature. The API is subject to change and this iteration is likely not the final state.",{es-issue}78920]

Use the `field` API to access document fields:

[source,painless]
----
field('my_field').get()
----

This API fundamentally changes how you access documents in Painless. Previously,
you had to access the `doc` map with the field name that you wanted to access:

[source,painless]
----
doc['my_field'].value
----

Accessing document fields this way didn't handle missing values or missing
mappings, which meant that your Painless scripts had to check that fields exist
and create intermediary objects for handling such omissions.

Instead, use the `field` API, which is the preferred approach to access
documents in Painless. The `field` API abstracts access options (such as
`_source` or `doc_values`) and provides a field-centric view of your documents.

NOTE: Some fields aren't yet compatible with the `fields` API, such as `text` or
`geo` fields. since we are still trying to figure out the best values there to return, so continued use of doc there is what is available.

The `field` API returns a `Field` object that iterates over fields with 
multiple values, providing access to the underlying value through the `get()` 
method, as well as type conversion and helper methods. 

The `field` API returns the default value that you specify, regardless of
whether the field exists or has any values for the current document.
This means that the `field` API can handle missing values without requiring 
additional logic. For a reference (`Object`) type such as `keyword`, the default 
value can be `null`. For a primitive type such as `boolean` or `long`, the
default value must be a non-null matching numerical type, such as `false` or `1`. 

[discrete]
=== Convenient, simpler access
Instead of explicitly calling the `field` API with the `get()` method, you can
include the `$` shortcut. Just include the `$` symbol, field name, and value
that you want to retrieve:

[source,painless]
----
$(‘field’, <default>)
----

With these enhanced capabilities and simplified syntax, you can write scripts
that are shorter, less complex, and easier to read. For example, the following
script uses the outdated syntax to determine the difference in milliseconds
between two complex `datetime` values from an indexed document:

[source,painless]
----
if (doc.containsKey('start') && doc.containsKey('end')) {
   if (doc['start'].size() > 0 && doc['end'].size() > 0) {
       ZonedDateTime start = doc['start'].value;
       ZonedDateTime end = doc['end'].value;
       return ChronoUnit.MILLIS.between(start, end);
   } else {
       return -1;
   }
} else {
   return -1;
}
----

Using the `field` API, you can write this same script much more succinctly,
without requiring additional logic to determine whether fields exist before
operating on them:

[source,painless]
----
ZonedDateTime start = field('start').get(null);
ZonedDateTime end = field('end').get(null);
return start == null || end == null ? -1 : ChronoUnit.MILLIS.between(start, end)
----