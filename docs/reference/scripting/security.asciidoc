[[modules-scripting-security]]
== Scripting and security
In addition to user privileges and script sandboxing, {es} uses the
https://www.oracle.com/java/technologies/javase/seccodeguide.html[Java Security Manager (JVM)]
and native security tools as additional layers of security.

As part of its startup sequence, {es} enables the JVM to limit the actions that
can be taken by portions of the code. Painless uses this to limit the actions
that generated Painless scripts can take, preventing them from being able to do 
things like write files and listen to sockets.

{es} uses
{wikipedia}/Seccomp[seccomp] in Linux,
https://www.chromium.org/developers/design-documents/sandbox/osx-sandboxing-design[Seatbelt]
in macOS, and
https://msdn.microsoft.com/en-us/library/windows/desktop/ms684147[ActiveProcessLimit]
on Windows to prevent {es} from forking or executing other processes.

The following sections describe security settings for scripts and how to alter
the default settings. Take extreme caution when providing greater permissions
to scripts beyond the default settings. Any extra permissions weakens the total
security of your {es} deployment.

[[allowed-script-types-setting]]
[discrete]
=== Allowed script types setting

{es} supports two script types: `inline` and `stored` (<<modules-scripting-using>>).
By default, {es} is configured to run both types of scripts.
To limit what type of scripts are run, set `script.allowed_types` to `inline` or `stored`.
To prevent any scripts from running, set `script.allowed_types` to `none`.

IMPORTANT: If you use {kib}, set `script.allowed_types` to `both` or `inline`.
Some {kib} features rely on inline scripts and do not function as expected
if {es} does not allow inline scripts.

For example, to run `inline` scripts but not `stored` scripts, specify:

[source,yaml]
----
script.allowed_types: inline <1>
----
<1> This will allow only inline scripts to be executed but not stored scripts
(or any other types).


[[allowed-script-contexts-setting]]
[discrete]
=== Allowed script contexts setting

By default all script contexts are allowed to be executed. This can be modified using the
setting `script.allowed_contexts`. Only the contexts specified as part of the setting will
be allowed to be executed. To specify no contexts are allowed, set `script.allowed_contexts`
to be `none`.

[source,yaml]
----
script.allowed_contexts: score, update <1>
----
<1> This will allow only scoring and update scripts to be executed but not
aggs or plugin scripts (or any other contexts).
