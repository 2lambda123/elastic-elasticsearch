[[migrating-7.16]]
== Migrating to 7.16
++++
<titleabbrev>7.16</titleabbrev>
++++

This section discusses the changes that you need to be aware of when migrating
your application to {es} 7.16.

See also <<release-highlights>> and <<es-release-notes>>.

* <<breaking_716_settings_changes>>
* <<breaking_716_ilm_changes>>
* <<breaking_716_monitoring_changes>>

* <<breaking_716_settings_deprecations>>

//NOTE: The notable-breaking-changes tagged regions are re-used in the
//Installation and Upgrade Guide

[discrete]
[[breaking-changes-7.16]]
=== Breaking changes

The following changes in {es} 7.16 might affect your applications
and prevent them from operating normally.
Before upgrading to 7.16, review these changes and take the described steps
to mitigate the impact.

NOTE: Breaking changes introduced in minor versions are
normally limited to security and bug fixes.
Significant changes in behavior are deprecated in a minor release and
the old behavior is supported until the next major release.
To find out if you are using any deprecated functionality,
enable <<deprecation-logging, deprecation logging>>.

// tag::notable-breaking-changes[]
[discrete]
[[breaking_716_settings_changes]]
==== Settings changes

[[breaking_716_disk_threshold_enabled_operator_only]]
.Disk threshold enabled setting is operator only
[%collapsible]
====
*Details* +
Orchestrated environments such as {ess} and Elastic Cloud Enterprise rely on
the <<cluster-routing-disk-threshold,disk thresholds>> in {es} to operate the
cluster correctly. For example the disk thresholds help determine how large an
auto-scaled cluster should be. Disabling these disk thresholds prevents the
orchestration system from working correctly, so starting in 7.16.0 the
`cluster.routing.allocation.disk.threshold_enabled` setting is an
<<operator-only-dynamic-cluster-settings, operator only>> setting which cannot
be changed by end-users.

*Impact* +
Discontinue use of this setting in orchestrated environments such as {ess} and
Elastic Cloud Enterprise. Contact the environment administrator for help with
disk space management if needed.
+
This change has no impact on users outside of orchestrated environments.
====
// end::notable-breaking-changes[]

[discrete]
[[deprecated-7.16]]
=== Deprecations

The following functionality has been deprecated in {es} 7.16 and will be removed
in 8.0. While this won't have an immediate impact on your applications, we
strongly encourage you take the described steps to update your code after
upgrading to 7.16.

NOTE: Significant changes in behavior are deprecated in a minor release and the
old behavior is supported until the next major release. To find out if you are
using any deprecated functionality, enable <<deprecation-logging, deprecation
logging>>.

// tag::notable-breaking-changes[]

[discrete]
[[breaking_716_tls_changes]]
==== Security changes

[[tls-ssl-transport-enabled-required]]
.The `xpack.security.transport.ssl.enabled` setting will be required to configure `xpack.security.transport.ssl` settings.
[%collapsible]
====
*Details* +
Configuring any SSL settings for
`xpack.security.transport.ssl` without also configuring
`xpack.security.transport.ssl.enabled` generates warnings in the deprecation
log. In 8.0, this configuration will result in errors.

*Impact* +
To avoid deprecation warnings, either:

* Explicitly set `xpack.security.transport.ssl.enabled` as `false`
* Discontinue use of other `xpack.security.transport.ssl` settings

If you want to enable SSL, follow the instructions to
{ref}/security-basic-setup.html#encrypt-internode-communication[encrypt internode communications with TLS]. As part of this configuration, explicitly set
`xpack.security.transport.ssl.enabled` as `true`.

For example:
[source,yaml]
--------------------------------------------------
xpack.security.transport.ssl.enabled: true <1>
xpack.security.transport.ssl.keystore.path: elastic-certificates.p12
xpack.security.transport.ssl.truststore.path: elastic-certificates.p12
--------------------------------------------------
<1> or `false`.
====

[[tls-ssl-http-enabled-required]]
.The `xpack.security.http.ssl.enabled` setting will be required to configure `xpack.security.http.ssl` settings.
[%collapsible]
====
*Details* +
Configuring any SSL settings for `xpack.security.http.ssl` without also
configuring `xpack.security.http.ssl.enabled` generates warnings in the
deprecation log. In 8.0, this configuration will result in errors.

*Impact* +
To avoid deprecation warnings, either:

* Explicitly set `xpack.security.http.ssl.enabled` as `false`
* Discontinue use of other `xpack.security.http.ssl` settings

If you want to enable SSL, follow the instructions to
{ref}/security-basic-setup-https.html#encrypt-http-communication[encrypt HTTP client communications for {es}]. As part
of this configuration, explicitly set `xpack.security.http.ssl.enabled`
as `true`.

For example:
[source,yaml]
--------------------------------------------------
xpack.security.http.ssl.enabled: true <1>
xpack.security.http.ssl.certificate: elasticsearch.crt
xpack.security.http.ssl.key: elasticsearch.key
xpack.security.http.ssl.certificate_authorities: [ "corporate-ca.crt" ]
--------------------------------------------------
<1> or `false`.
====

[[tls-ssl-transport-cert-required]]
.A `xpack.security.transport.ssl` certificate and key will be required to enable SSL for the transport interface.
[%collapsible]
====
*Details* +
Enabling SSL for the transport interface without also configuring a certificate
and key through use of the `xpack.security.transport.ssl.keystore.path`
setting or the `xpack.security.transport.ssl.certificate` and
`xpack.security.transport.ssl.key` settings generates warnings in the
deprecation log. In 8.0, this configuration will result in errors.

*Impact* +
If `xpack.security.transport.ssl.enabled` is set to `true`, provide a
certificate and key using the `xpack.security.transport.ssl.keystore.path`
setting or the `xpack.security.transport.ssl.certificate` and
`xpack.security.transport.ssl.key` settings. If a certificate and key is not
provided, {es} will generate warnings in the deprecation log.
====

[[tls-ssl-http-cert-required]]
.A `xpack.security.http.ssl` certificate and key will be required to enable SSL for the HTTP layer.
[%collapsible]
====
*Details* +
Enabling SSL for the HTTP layer without also configuring a certificate and key
through use of the `xpack.security.http.ssl.keystore.path` setting or
the `xpack.security.http.ssl.certificate` and `xpack.security.http.ssl.key`
settings generates warnings in the deprecation log. In 8.0, this configuration
will result in errors.

*Impact* +
If `xpack.security.http.ssl.enabled` is set to `true`, provide a
certificate and key using the `xpack.security.http.ssl.keystore.path`
setting or the `xpack.security.http.ssl.certificate` and
`xpack.security.http.ssl.key` settings. If a certificate and key is not
provided, {es} will generate warnings in the deprecation log.
====

[discrete]
[[breaking_716_ilm_changes]]
==== {ilm-cap} ({ilm-init}) changes

[[ilm-freeze-noop]]
.The ILM `freeze` action has been deprecated and will be a no-op in a future release.
[%collapsible]
====
*Details* +
The ILM freeze action is now deprecated. This is because frozen indices provide no benefit given improvements in heap memory
utilization. In 8.0 the freeze action will be a no-op and perform no action on the index, as the freeze API endpoint
has been removed in 8.0.

*Impact* +
Update your ILM policies to remove the `freeze` action from the `cold` phase.
====

[discrete]
[[breaking_716_monitoring_changes]]
==== Monitoring deprecations

[[monitoring-use-ingest-setting-deprecation]]
.The `use_ingest` setting on Monitoring exporter configurations is deprecated.
[%collapsible]
====
*Details* +
The `xpack.monitoring.exporters.*.use_ingest` property has been deprecated in 7.16.0 and
will be removed in 8.0.0. This parameter controls the creation of pipelines for monitoring
indices. These pipelines currently have no function.

*Impact* +
Discontinue the use of the `xpack.monitoring.exporters.*.use_ingest` setting
as it will no longer be recognized in the next major release.
====

[[monitoring-pipeline-master-timeout-setting-deprecation]]
.The `index.pipeline.master_timeout` setting on Monitoring HTTP exporter configurations is deprecated.
[%collapsible]
====
*Details* +
The `xpack.monitoring.exporters.*.index.pipeline.master_timeout` property has been
deprecated in 7.16.0. This parameter sets the timeout when waiting for the remote
Monitoring cluster to create pipelines. These pipelines for monitoring indices currently
have no function and will be removed in 8.0.0.

*Impact* +
Discontinue the use of the `xpack.monitoring.exporters.*.index.pipeline.master_timeout` setting
as it will no longer be recognized in the next major release.
====

[[monitoring-template-create-legacy-setting-deprecation]]
.The `index.template.create_legacy_templates` setting on Monitoring HTTP exporter configurations is deprecated.
[%collapsible]
====
*Details* +
The `xpack.monitoring.exporters.*.index.template.create_legacy_templates` property has been
deprecated in 7.16.0. This parameter instructs the exporter to install the previous version
of monitoring templates on the monitoring cluster. These older templates were meant to assist
in transitioning to the current monitoring data format. They are currently empty and are no
longer of any use.

*Impact* +
Discontinue the use of the `xpack.monitoring.exporters.*.index.template.create_legacy_templates` setting
as it will no longer be recognized in the next major release.
====

[discrete]
[[breaking_716_settings_deprecations]]
==== Settings deprecations

[[deprecate-transient-cluster-settings]]
.Transient cluster settings are now deprecated.
[%collapsible]
====
*Details* +
Transient cluster settings are now deprecated and will be removed in a future release. This is because transient
cluster settings have an unpredictable lifecycle. Transient cluster settings do not survive full cluster restarts,
which can forcibly happen if enough master-eligible nodes fail. In such an event, the cluster state will be recovered
from persistent storage, effectively erasing the transient settings. The loss of transient settings can happen
unexpectedly, leading to a potentially undesired cluster configuration.

*Impact* +
To avoid deprecation warnings, discontinue use of transient settings when modifying
your cluster settings through the `PUT _cluster/settings` REST API. When modifying cluster settings
use only persistent settings.
====

[discrete]
[[breaking_716_cluster_deprecations]]
==== Cluster deprecations

[[deprecate-cluster-health-408]]
.Distinguishing cluster health timeout status by HTTP response code is now deprecated.
[%collapsible]
====
*Details* +
The <<cluster-health>> API includes options for waiting for certain health
conditions to be satisfied. If the requested conditions are not satisfied
within a timeout then {es} will send back a normal response including the field
`"timed_out": true`. In earlier versions it would also use the HTTP response
code `408 Request timeout` if the request timed out, and `200 OK` otherwise.
The `408 Request timeout` response code is not appropriate for this situation
and its use is deprecated. Future versions will use the response code `200 OK`
for both cases.

*Impact* +
Update your application to read the `"timed_out"` field of the response instead
of the HTTP response code to determine whether the request timed out or not. To
avoid deprecation warnings and opt into the future behaviour, include the query
parameter `?return_200_for_cluster_health_timeout` in your request.
====

// end::notable-breaking-changes[]
