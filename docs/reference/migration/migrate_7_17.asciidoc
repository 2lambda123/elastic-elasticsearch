[[migrating-7.17]]
== Migrating to 7.17
++++
<titleabbrev>7.17</titleabbrev>
++++

This section discusses the changes that you need to be aware of when migrating
your application to {es} 7.17.

See also <<release-highlights>> and <<es-release-notes>>.

[discrete]
[[breaking-changes-7.17]]
=== Breaking changes

The following changes in {es} 7.17 might affect your applications
and prevent them from operating normally.
Before upgrading to 7.17, review these changes and take the described steps
to mitigate the impact.

// NOTE: The notable-breaking-changes tagged regions are re-used in the
// Installation and Upgrade Guide
// tag::notable-breaking-changes[]
[discrete]
[[breaking_717_packaging_changes]]
==== Packaging changes

[[windows_msi_installer_package_no_longer_available]]
.The Windows MSI installer package is no longer available.
[%collapsible]
====
*Details* +
We no longer release Windows MSI installer packages for {es}. These packages
were previously released in beta and didn't receive widespread adoption.

*Impact* +
To install {es} on Windows, use the {ref}/zip-windows.html[`.zip` archive
package] instead.
====

[discrete]
[[breaking_717_rest_api_changes]]
==== REST API changes

[[enable_hlrc_compatibility_mode_by_default]]
.Enable HLRC compatibility mode by default
[%collapsible]
====
*Details* +
Compatibility mode allows HLRC to communicate with {es} 8.x by sending version information in the `Content-Type` and `Accept`
request headers, which causes {es} 8 to behave like {es} 7. As this feature isn't very well known, a number of users had
the wrong impression that HLRC 7.17 was not working with {es} 8.

Compatibility mode is now enabled by default, allowing it to work out of the box with {es} 8.

*Impact* +
Compatibilty mode was introduced in {es} 7.11. Using HLRC 7.17.4 with {es} 7.10 and before therefore requires to disable
compatibility mode when creating an HLRC instance.
====
// end::notable-breaking-changes[]


[discrete]
[[deprecated-7.17]]
=== Deprecations

The following functionality has been deprecated in {es} 7.17
and will be removed in 8.0.
While this won't have an immediate impact on your applications,
we strongly encourage you take the described steps to update your code
after upgrading to 7.17.

NOTE: Significant changes in behavior are deprecated in a minor release and
the old behavior is supported until the next major release.
To find out if you are using any deprecated functionality,
enable <<deprecation-logging, deprecation logging>>.

// tag::notable-breaking-changes[]
[discrete]
[[deprecations_717_cluster_and_node_setting]]
==== Cluster and node setting deprecations

[[deprecation_for_truststores_with_no_trust_entries]]
.Deprecation for truststores with no trust entries
[%collapsible]
====
*Details* +
The use of SSL truststores that do not contain any trusted entries has been deprecated.
The various `*.ssl.truststore.path` settings (for example
`xpack.security.transport.ssl.truststore.path` or `xpack.http.ssl.truststore.path`) can
be used to configure a set of "trust anchors" for SSL certificate verification. In {es}
version 7 and earlier, it was permitted to configure a truststore that did not contain
any trust anchors (that is, it was empty, or it contained "private key" entries only).
In {es} version 8 and above, a `truststore.path` without any trusted certificate entries
is no longer accepted, and will cause an error. This configuration is now deprecated in
{es} version 7.17

*Impact* +
To avoid deprecation warnings, remove any SSL truststores that do not
contain any trusted entries.
====

[discrete]
[[deprecations_717_mapping]]
==== Mapping deprecations

[[camel_case_date_formats_are_deprecated]]
.Camel case date formats are deprecated.
[%collapsible]
====
*Details* +
The use of camel case patterns on date formats is deprecated and will be removed
in {es} 8.0.0.

The corresponding snake case pattern should be used instead.

*Impact* +
To avoid deprecation warnings, discontinue use of the camel case pattern.
====
// end::notable-breaking-changes[]

