[[rest-api-compatibility]]
== REST API compatibility

To help REST clients mitigate the impact of non-compatible (breaking) API changes, {es} provides a per-request, opt-in API compatibility mode.  

{es} REST API's are generally stable across major versions. However, there are cases where {es} REST API's are changed in a non compatible ways (breaking) with the prior major version.
For example, {es} 7.x supported custom mapping types in many of the URL paths, but {es} 8.0+ does not support
custom mapping types (see <<removal-of-types>>). As a result a REST client that is still using custom types in the
URL paths to communicating with {es} 8.0+ will error. If requested, REST API compatibility can allow that request to succeed even though mapping types are no longer supported.

All non compatible (breaking) changes to the {es} REST API will be deprecated in the prior major version to where the non compatible (breaking) change occurs.
For example, if a REST API is removed (or changed in some non compatible way) in 8.x it will be will be deprecated in 7.x and will emit deprecation logs anytime that API is invoked.
This provides the opportunity to review the deprecation logs prior to a major version upgrade and take the appropriate actions. However, there are cases where
identifying all usages of deprecated APIs could be difficult or impossible. This is where REST API compatibility can help.

When requested, REST API compatibility instructs the {es} server to attempt to honor the REST API of the prior major version.
For most API's REST API compatibility has no effect. Requests for compatibility only impacts APIs that have non compatible (breaking) changes from the prior major version.
For example, custom mapping types were supported in URL paths for 7.x, but are not supported in 8.x. When compatibility is requested {es} will internally and automatically redirect any URL that
includes the custom mapping type to it's non-typed equivalent URL. In this case, requesting compatibility effectively ignores the custom mapping type of the requested URL.
Additionally, for requests that would have warranted a response that in 7.x that included a type field REST API compatibility will inject a _type field with a hard coded value of _doc as part of the response.


It is important to note that REST API compatibility does not result in the same behavior as the prior version. Rather REST API compatibility is a best effort by the {es} service to find the best way to automatically resolve any incompatibility introduced in the REST API.
This level of compatibility may not work for all workflows and use cases. For example, if the custom mapping types are an integral part of a workflow then ignoring the custom type at the REST API will not help.

When you submit requests using REST API compatibility and {es} resolves the incompatibility, a message is written to the deprecation log with the category "compatible_api". Review the deprecation log to identify any gaps in usage and fully supported features.


For information about specific breaking changes and the impact of requesting compatibility mode, see <<breaking_80_rest_api_changes, REST API changes>> in the migration guide.

[discrete]
[[request-rest-api-compatibility]]
=== Requesting REST API compatibility

REST API compatibility is implemented per request via the Accept and/or Content-Type headers.

For example:

[source, text]
------------------------------------------------------------
Accept: "application/vnd.elasticsearch+json;compatible-with=7"
Content-Type: "application/vnd.elasticsearch+json;compatible-with=7"
------------------------------------------------------------

The Accept header is always required and the Content-Type header is only required when a body is sent with the request.
The following values are valid when communicating with a 7.x or 8.x {es} server:
[source, text]
------------------------------------------------------------
"application/vnd.elasticsearch+json;compatible-with=7"
"application/vnd.elasticsearch+yaml;compatible-with=7"
"application/vnd.elasticsearch+smile;compatible-with=7"
"application/vnd.elasticsearch+cbor;compatible-with=7"
------------------------------------------------------------
The [link:/guide](https://www.elastic.co/guide/en/elasticsearch/client/index.html)[officially supported {es} clients] can enable REST API compatibility for all requests. 

To enable REST API compatibility for all requests received by {es} set the environment variable `ELASTIC_CLIENT_APIVERSIONING` to true.

[discrete]
=== REST API compatibility workflow

To leverage REST API compatibility during an upgrade from 7.17 to {version}:

1. Upgrade your https://www.elastic.co/guide/en/elasticsearch/client/index.html[{es} clients] to the latest 7.x version and enable REST API compatibility. 
2. Use the {kibana-ref}/upgrade-assistant.html[Upgrade Assistant] to review all critical issues and explore the deprecation logs. Some critical issues might be mitigated by REST API compatibility.
3. Resolve all critical issues before proceeding with the upgrade.
4. Upgrade Elasticsearch to {version}.
5. Review the deprecation logs for entries with the category `compatible_api1`. Review the workflow associated with the requests that relied on compatibility mode.
6. Upgrade your {es} clients to 8.x and resolve compatibility issues manually where needed. 

