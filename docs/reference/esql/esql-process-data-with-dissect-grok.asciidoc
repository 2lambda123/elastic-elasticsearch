[[esql-process-data-with-dissect-and-grok]]
=== Process data with `DISSECT` and `GROK`

++++
<titleabbrev>Process data with DISSECT and GROK</titleabbrev>
++++

Your data may contain unstructured strings that you want to structure, so you
can further analyze it. For example, log messages may contain IP addresses that
you want to extract so you can find the most active IP addresses.

Structuring data can be done at index time, using the
<<dissect-processor,Dissect>> or <<grok-processor,Grok>> ingest processors, or
the {ls} {logstash-ref}/plugins-filters-dissect.html[Dissect] or
{logstash-ref}/plugins-filters-grok.html[Grok] filters. With {esql}, you can
also structure data at query time, using the <<esql-dissect>> and <<esql-grok>>
processors.

[[esql-grok-or-dissect]]
==== `GROK` or `DISSECT`? Or both?

`DISSECT` differs from `GROK` in that it does not use regular expressions and is
faster. `DISSECT` works well when data is reliably repeated. `GROK` is a better
choice when the structure of your text varies from row to row.

You can use both `DISSECT` and `GROK` for a hybrid use case when a section of
the line is reliably repeated, but the entire line is not. The `DISSECT` filter
can deconstruct the section of the line that is repeated. The `GROK` filter can
process the remaining field values with more regex predictability.

[[esql-process-data-with-dissect]]
==== Process data with `DISSECT`

The <<esql-dissect>> processing command matches the string against a
delimiter-based pattern, and extracts the specified keys as columns.

For example the following pattern:
[source,txt]
--------------------------------------------------
%{ip} [%{@timestamp}] %{status} 
--------------------------------------------------

will match a log line of this format:
[source,txt]
--------------------------------------------------
1.2.3.4 [30/Apr/2023:22:00:52 +0000] Connected
--------------------------------------------------

and results in adding the following columns to the input table:

[%header.monospaced.styled,format=dsv,separator=|]
|===
ip:keyword | @timestamp:keyword | status:keyword
1.2.3.4 | 30/Apr/2023:22:00:52 +0000 | Connected
|===

include::../ingest/processors/dissect.asciidoc[tag=intro-example-explanation]

An empty key `%{}` or a <<esql-named-skip-key,named skip key>> can be used to
match values, but exclude the value from the output.

All matched values are represented as string data types. Use the
<<esql-type-conversion-functions>> to convert to expected data type.

Dissect also supports <<esql-dissect-key-modifiers,key modifiers>> that can
change dissect's default behavior. For example you can instruct dissect to
ignore certain fields, append fields, skip over padding, etc.

===== Terminology

*dissect pattern*::
the set of fields and delimiters describing the textual 
format. Also known as a dissection. 
The dissection is described using a set of `%{}` sections:
`%{a} - %{b} - %{c}`

*field*::
the text from `%{` to `}` inclusive.

*delimiter*::
the text between `}` and the next `%{` characters.
Any set of characters other than `%{`, `'not }'`, or `}` is a delimiter.

*key*::
+
--
the text between the `%{` and `}`, exclusive of the `?`, `+`, `&` prefixes 
and the ordinal suffix. 

Examples:

* `%{?aaa}` - the key is `aaa` 
* `%{+bbb/3}` - the key is `bbb` 
* `%{&ccc}` - the key is `ccc` 
--

[[esql-dissect-key-modifiers]]
===== Dissect key modifiers

include::../ingest/processors/dissect.asciidoc[tag=dissect-key-modifiers]

[[esql-dissect-key-modifiers-table]]
include::../ingest/processors/dissect.asciidoc[tag=dissect-key-modifiers-table]

[[esql-dissect-modifier-skip-right-padding]]
====== Right padding modifier (`->`)
include::../ingest/processors/dissect.asciidoc[tag=dissect-modifier-skip-right-padding]

[[esql-append-modifier]]
====== Append modifier (`+`)
include::../ingest/processors/dissect.asciidoc[tag=append-modifier]

[[esql-append-order-modifier]]
====== Append with order modifier (`+` and `/n`)
include::../ingest/processors/dissect.asciidoc[tag=append-order-modifier]

[[esql-named-skip-key]]
====== Named skip key (`?`)
include::../ingest/processors/dissect.asciidoc[tag=named-skip-key]

[[esql-reference-keys]]
====== Reference keys (`*` and `&`)
include::../ingest/processors/dissect.asciidoc[tag=reference-keys]

[[esql-process-data-with-grok]]
==== Process data with `GROK`
