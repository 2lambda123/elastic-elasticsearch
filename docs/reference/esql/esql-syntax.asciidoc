[[esql-syntax]]
=== {esql} syntax reference

++++
<titleabbrev>Syntax reference</titleabbrev>
++++

[discrete]
[[esql-basic-syntax]]
=== Basic syntax

An {esql} query is composed of a <<esql-commands,source command>> followed
by an optional series of <<esql-commands,processing commands>>,
separated by a pipe character: `|`. For example:

[source,esql]
----
source-command
| processing-command1
| processing-command2
----

The result of a query is the table produced by the final processing command.

For an overview of all supported commands, functions, and operators, refer to <<esql-commands>> and <<esql-functions-operators>>.

[NOTE]
====
For readability, this documentation puts each processing command on a new
line. However, you can write an {esql} query as a single line. The following
query is identical to the previous one:

[source,esql]
----
source-command | processing-command1 | processing-command2
----
====

[discrete]
[[esql-identifiers]]
==== Identifiers

The identifiers can be used as they are and don't require quoting, unless
containing special characters, in which case they must be quoted with
backticks (```). What "special characters" means is command dependent.

For <<esql-from, FROM>>, <<esql-keep, KEEP>>, <<esql-drop, DROP>>,
<<esql-rename, RENAME>>, <<esql-mv_expand, MV_EXPAND>> and
<<esql-enrich, ENRICH>> these are: `=`, ```, `,`, ` ` (space), `|` ,
`[`, `]`, `\t` (TAB), `\r` (CR), `\n` (LF); one `/` is allowed unquoted, but
a sequence of two or more require quoting.

The rest of the commands - those allowing for identifiers be used in
expressions - require quoting if the identifier contains characters other than
letters, numbers and `_` and doesn't start with a letter, `_` or `@`.

For instance:

[source,esql]
----
// Retain just one field
FROM index
| KEEP 1.field
----

is legal. However, if same field is to be used with an <<esql-eval, EVAL>>,
it'd have to be quoted:

[source,esql]
----
// Copy one field
FROM index
| EVAL my_field = `1.field`
----

[discrete]
[[esql-literals]]
==== Literals

{esql} currently supports numeric and string literals. The string literals
need to be quoted in double quotes (`"`).

[source,esql]
----
// Filter by a string value
FROM index
| WHERE first_name == "Georgi"
----

If the literal string itself contains quotes, these need to be escaped (`\\"`).
{esql} also supports the triple-quotes (`"""`) delimiter, for convenience:

[source,esql]
----
ROW name = """Indiana "Indy" Jones"""
----

The special characters CR, LF and TAB can be provided with the usual escaping:
`\r`, `\n`, `\t`, respectively.


[discrete]
[[esql-comments]]
==== Comments
{esql} uses C++ style comments:

* double slash `//` for single line comments
* `/*` and `*/` for block comments

[source,esql]
----
// Query the employees index
FROM employees
| WHERE height > 2
----

[source,esql]
----
FROM /* Query the employees index */ employees
| WHERE height > 2
----

[source,esql]
----
FROM employees
/* Query the
 * employees
 * index */
| WHERE height > 2
----

[discrete]
[[esql-timespan-literals]]
==== Timespan literals

Datetime intervals and timespans can be expressed using timespan literals.
Timespan literals are a combination of a number and a qualifier. These
qualifiers are supported:

* `millisecond`/`milliseconds`
* `second`/`seconds`
* `minute`/`minutes`
* `hour`/`hours`
* `day`/`days`
* `week`/`weeks`
* `month`/`months`
* `year`/`years`

Timespan literals are not whitespace sensitive. These expressions are all valid:

* `1day`
* `1 day`
* `1       day`
