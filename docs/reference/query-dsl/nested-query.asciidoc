[[query-dsl-nested-query]]
=== Nested Query

A `nested` query allows you to query objects of the <<nested,nested datatype>>
type, executing against each field in an array. You can query each field
independently while maintaining the relationship between fields in a record,
for example, a user's first name, last name, and address.

As an example, let's use the same mapping from <<nested,nested datatype>>.
This `nested` query will correctly select only the arrays that contain both
the first name Alice and the last name White. Because the objects are mapped
as nested, if you queried for user.first Alice and user.last Smith, this query
would return no results.

Enter the mappings, add the data you wish to query, then query the data with a
`nested` query:


[source,js]
--------------------------------------------------
PUT my_index
{
  "mappings": {
    "properties": {
      "user": {
        "type": "nested"
      }
    }
  }
}

PUT my_index/_doc/1
{
  "group" : "fans",
  "user" : [
    {
      "first" : "John",
      "last" :  "Smith"
    },
    {
      "first" : "Alice",
      "last" :  "White"
    }
  ]
}

GET my_index/_search
{
  "query": {
    "nested": {
      "path": "user",
      "query": {
        "bool": {
          "must": [
            { "match": { "user.first": "Alice" }},
            { "match": { "user.last":  "White" }}
          ]
        }
      },
      "inner_hits": {
        "highlight": {
          "fields": {
            "user.first": {}
          }
        }
      }
    }
  }
}

--------------------------------------------------
// CONSOLE

The query `path` points to the nested object path, and the `query` includes the 
query that will run on the nested docs matching the direct path, and joining 
with the root parent docs.

NOTE: Any fields referenced inside the query must use the complete path 
(fully-qualified).

Here is a second example with refinements, showing the mappings followed by the 
nested query usage.

[source,js]
--------------------------------------------------
PUT /my_index
{
    "mappings": {
        "properties" : {
            "obj1" : {
                "type" : "nested"
            }
        }
    }
}

GET /_search
{
    "query": {
        "nested" : {
            "path" : "obj1",
            "score_mode" : "avg",
            "query" : {
                "bool" : {
                    "must" : [
                    { "match" : {"obj1.name" : "blue"} },
                    { "range" : {"obj1.count" : {"gt" : 5}} }
                    ]
                }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE

Adding the option `score_mode` allows you to set how inner children matching
affects scoring of parent. It defaults to `avg`, but can be `sum`, `min`,
`max` and `none`.

The `ignore_unmapped` option set to `true` will ignore an unmapped `path` and
will not match any documents for this query. This can be useful when querying
multiple indexes which might have different mappings. Set to `false` (the
default value) the query will throw an exception if the `path` is not mapped.

==== Multi-level nesting

Multi-level nesting is automatically supported and detected, resulting
in an inner nested query that automatically matches the relevant nesting
level (and not root) if it exists within another nested query.

To set up a multi-level nested query, use this example. Notice that each level
within the nest is separated by a dot (person.car.make).

[source,js]
--------------------------------------------------
PUT customers
{
    "mappings": {
        "properties": {
            "lastUpdated": {
                "type": "long"
            },
            "isDeleted": {
                "type": "boolean"
            },
            "person": {
                "type": "nested",
                "properties": {
                    "car": {
                        "type": "nested",
                        "properties": {
                            "model": {
                                "type": "keyword"
                            },
                            "make": {
                                "type": "keyword"
                            }
                        }
                    },
                    "last_name": {
                        "type": "keyword"
                    },
                    "first_name": {
                        "type": "keyword"
                    }
                }
            }
        }
    }
}

PUT customers/_doc/1
{
    "person": {
        "first_name": "Zach",
        "last_name": "Foobar",
        "car": [
            {
                "make": "Saturn",
                "model": "SL"
            },
            {
                "make": "Subaru",
                "model": "Imprezza"
            }
        ]
    },
    "isDeleted": false,
    "lastUpdated": 1433257051959
}

PUT customers/_doc/2
{
    "person": {
        "first_name": "Bob",
        "last_name": "Doe",
        "car": [
            {
                "make": "Saturn",
                "model": "Imprezza"
            },
            {
                "make": "Honda",
                "model": "Accord"
            }
        ]
    },
    "isDeleted": false,
    "lastUpdated": 1433257051959
}


GET customers/_search
{
  "query": {
    "nested": {
      "path": "person",
      "query": {
        "bool": {
          "must": [
            { "match": { "person.first_name": "Zach" }},
            { "match": { "person.last_name":  "Foobar" }}
          ]
        }
      },
      "inner_hits": {
        "highlight": {
          "fields": {
            "person.first_name": {}
          }
        }
      }
    }
  }
}



GET customers/_search
{
    "query": {
        "nested": {
            "path": "person",
            "query": {
                "nested" : {
                    "path" :  "person.car",
                    "query" :  {
                       "match": {
                           "person.car.make": "Honda"
                        }
                    }
                }
            },
            "inner_hits": {}
        }
    }
}
--------------------------------------------------
// CONSOLE
