[[query-dsl-geo-shape-query]]
=== Geoshape query
++++
<titleabbrev>Geoshape</titleabbrev>
++++

Returns documents matching a provided geometric shape, called a geoshape. To use
the `geo_shape` query, your index must include a <<geo-shape,geoshape>> field
mapping.

This query uses the same <<prefix-trees,grid square representation>> as the geo
shape field mapping to find documents that have a shape that intersects with the
query shape.

[[geo-shape-query-ex-request]]
==== Example request

[[geo-shape-query-index-setup]]
===== Index setup
To see how you can set up an index for the `geo_shape` query, try the following
example.

. Create an index with a <<geo-shape,geoshape>> field mapping.
+
--
[source,js]
----
PUT /locations
{
    "mappings": {
        "properties": {
            "location": {
                "type": "geo_shape"
            }
        }
    }
}
----
// CONSOLE
// TESTSETUP
--

. Index a document with a value in the geoshape field.
+
--
[source,js]
----
POST /locations/_doc?refresh
{
    "name": "Wind & Wetter, Berlin, Germany",
    "location": {
        "type": "point",
        "coordinates": [13.400544, 52.530286]
    }
}
----
// CONSOLE
--

[[geo-shape-query-ex-query]]
===== Example query

The following search uses a `bool` query with a nested `geo_shape`
<<query-dsl-bool-query,filter>> to find the indexed point. The `geo_shape`
filter uses the {es}'s `envelope` http://www.geojson.org[GeoJSON] extension.

[source,js]
----
GET /locations/_search
{
    "query":{
        "bool": {
            "must": {
                "match_all": {}
            },
            "filter": {
                "geo_shape": {
                    "location": {
                        "shape": {
                            "type": "envelope",
                            "coordinates" : [[13.0, 53.0], [14.0, 52.0]]
                        },
                        "relation": "within"
                    }
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-shape-top-level-params]]
==== Top-level parameters for `geo_shape`

`location`::
+
--
(Optional, http://www.geojson.org[GeoJSON object]) Geoshape you wish to find.

[NOTE]
To search for a shape already indexed in another index, use the
<<shape-lookup,shape lookup>> parameters.
--

`ignore_unmapped`::
+
--
(Optional, boolean) Indicates whether to ignore an unmapped `type` and not
return any documents instead of an error. Defaults to `false`.

If `false`, {es} returns an error if the `type` is unmapped.

You can use this parameter to query multiple indices that may not contain the
`type`.
--

[[geo-shape-query-notes]]
==== Notes

[[shape-lookup]]
===== Search using pre-indexed geoshapes
You can use shape lookup parameters to search for a geoshape already indexed in
another index.

This is useful if you want to reference pre-defined geoshapes using a name, such
as `New Zealand`, or document ID rather than coordinates. 

[[shape-lookup-parms]]
====== Shape lookup parameters
`index`::
(Optional, string) Name of the index from which to fetch the shape.

`id`::
(Optional, string) <<mapping-id-field,ID>> of the document from which to fetch
the shape.

`path`::
(Optional, string) Name of the field from which to fetch the shape. Defaults to
`shape`.

`routing`::
(Optional, string) Custom <<mapping-routing-field, routing value>> of the
document from which to fetch the shape. If a custom routing value was provided
when the document was indexed, this parameter is required.

[[pre-indexed-shape-example]]
====== Shape lookup example

To see how shape lookup works, try the following example.  

. Create up an index as shown in the <<geo-shape-query-index-setup,index setup
example>>.

. Create another index to contain your pre-defined geoshapes.
+
--
[source,js]
----
PUT /shapes
{
    "mappings": {
        "properties": {
            "location": {
                "type": "geo_shape"
            }
        }
    }
}
----
// CONSOLE
--

. Index a document containing a pre-defined geoshape.
+
--
[source,js]
----
PUT /shapes/_doc/deu?refresh
{
    "location": {
        "type": "envelope",
        "coordinates" : [[13.0, 53.0], [14.0, 52.0]]
    }
}
----
// CONSOLE
// TEST[continued]
--

. Use the `bool` query with a nested `geo_shape` filter to find the indexed
point. Instead of coordinates, provide the `index`, `id`, and `path` of your
pre-defined geoshape.
+
--
[source,js]
----
GET /locations/_search
{
    "query": {
        "bool": {
            "filter": {
                "geo_shape": {
                    "location": {
                        "indexed_shape": {
                            "index": "shapes",
                            "id": "deu",
                            "path": "location"
                        }
                    }
                }
            }
        }
    }
}
----
// CONSOLE
// TEST[continued]
--

[[geo-shape-query-spatial-relations]]
===== Spatial relations mapping parameter
The <<spatial-strategy, geo_shape strategy>> mapping parameter determines which
spatial relation operators are used at search time. Valid operators are:

`INTERSECTS`::
(Default) Returns documents whose `geo_shape` field intersects the query geometry.

`DISJOINT`::
Returns documents whose `geo_shape` field has nothing in common with the query
geometry.

`WITHIN`::
Returns documents whose `geo_shape` field is within the query geometry.

`CONTAINS`::
+
--
Return all documents whose `geo_shape` field contains the query geometry.

NOTE: This is only supported using the `recursive` Prefix Tree Strategy.
deprecated:[6.6]
--