[[query-dsl-terms-set-query]]
=== Terms Set Query

Returns documents that contain a minimum number of *exact* terms in a provided
field.

The `terms_set` query is the same as the <<query-dsl-terms-query, `terms`
query>>, except you can define a minimum number of matching terms.

[[terms-set-query-ex-request]]
==== Example request

[[terms-set-query-ex-request-index-setup]]
===== Index setup
In most cases, you'll need to include a <<number, numeric>> field mapping in
your index to use the `terms_set` query. This numeric field will contain the
minimum number of matching terms required to return a document.

To see how you can set up an index for the `terms_set` query, try the
following example.

. Create an index with the following field mappings:
+
--

* `color`, a <<keyword, `keyword`>> field.
* `required_matches`, a <<number, numeric>> `long` field. This field will
contain the minimum number of matching terms required to return a document.

[source,js]
----
PUT /my-index
{
    "mappings": {
        "properties": {
            "color": {
                "type": "keyword"
            },
            "required_matches": {
                "type": "long"
            }
        }
    }
}
----
// CONSOLE
// TESTSETUP

--

. Index a document with an ID of `1` and the following values:
+
--

* `["blue", "green"]` in the `color` field.
* `2` in the `required_matches` field. This is the minimum number of matching
terms required to return a document.

Include the `?refresh` parameter so the document is immediately available for
search.

[source,js]
----
PUT /my-index/_doc/1?refresh
{
    "color": ["blue", "green"],
    "required_matches": 2
}
----
// CONSOLE

--

. Index another document with an ID of `2` and the following values:
+
--

* `["blue", "red"]` in the `color` field.
* `2` in the `required_matches` field.

[source,js]
----
PUT /my-index/_doc/2?refresh
{
    "color": ["blue", "red"],
    "required_matches": 2
}
----
// CONSOLE

--

You can now use the `required_matches` field value as a minimum number of
matching terms required in the `terms_set` query.

[[terms-set-query-ex-request-query]]
===== Example query

The following search returns documents where the `color` field contains at least
two of the following terms:

* `blue`
* `green`
* `red`

The `minimum_should_match_field` is `required_matches`. This means the minimum
number of matching terms required is `2`, the value of the `required_matches`
field.

[source,js]
----
GET /my-index/_search
{
    "query": {
        "terms_set": {
            "color": {
                "terms": ["blue", "green", "red"],
                "minimum_should_match_field": "required_matches"
            }
        }
    }
}
----
// CONSOLE

[[terms-set-top-level-params]]
==== Top-level parameters for `terms_set`

`<field>`::
Field you wish to search.

[[terms-set-field-params]]
==== Parameters for `<field>`

`terms`::
+
--
Array of terms you wish to find in the provided `<field>`. To return a document,
a minimum number of terms must exactly match the field values, including
whitespace and capitalization.

The minimum number of matching terms is defined in the `minimum_should_match_field` or `minimum_should_match_script` parameter.
--

`minimum_should_match_field`::
<<number, Numeric>> field containing the minimum number of matching terms
required to return a document.

`minimum_should_match_script`::
+
--
Custom script containing the minimum number of terms to match.

For parameters and valid values, see <<modules-scripting, Scripting>>.

For an example query using the `minimum_should_match_script` parameter, see
<<terms-set-query-script, How to use the `minimum_should_match_script`
parameter>>.
--

[[terms-set-query-notes]]
==== Notes

[[terms-set-query-script]]
===== How to use the `minimum_should_match_script` parameter
You can use `minimum_should_match_script` to define the minimum number of terms
to match using a script. This is useful if you need to set the number of
required terms dynamically.

[[terms-set-query-script-ex]]
====== Example query using `minimum_should_match_script`

The following search returns documents where the `color` field contains at least
two of the following terms:

* `blue`
* `green`
* `red`

The `source` parameter of this query indicates:

* The minimum number of terms to match cannot exceed `params.num_terms`, the
number of terms provided in the `terms` field.
* The minimum number of terms to match is `2`, the value of the
`required_matches` field.

[source,js]
----
GET /my-index/_search
{
    "query": {
        "terms_set": {
            "color": {
                "terms": ["blue", "green", "red"],
                "minimum_should_match_script": {
                   "source": "Math.min(params.num_terms, doc['required_matches'].value)"
                },
                "boost": 1.0
            }
        }
    }
}
----
// CONSOLE