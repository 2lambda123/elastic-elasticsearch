[[query-dsl-bool-query]]
=== Boolean query
++++
<titleabbrev>Boolean</titleabbrev>
++++

Returns documents matching one or more wrapped queries, called query clauses or
clauses, using `and`, `or`, and `not` logic.

[[bool-query-ex-request]]
==== Example request

[source,js]
---------------------------------
GET /_search
{
  "query": {
    "bool" : {
      "must" : {
        "term" : { "user" : "kimchy" }
      },
      "filter": {
        "term" : { "tag" : "tech" }
      },
      "must_not" : {
        "range" : {
          "age" : { "gte" : 10, "lte" : 20 }
        }
      },
      "should" : [
        { "term" : { "tag" : "wow" } },
        { "term" : { "tag" : "elasticsearch" } }
      ],
      "minimum_should_match" : 1,
      "boost" : 1.0
    }
  }
}
---------------------------------
// CONSOLE

[[bool-query-top-level-params]]
==== Top-level parameters for `bool`

`must`::
+
--
(Optional, query object) Contains one or more query clauses. Returned documents
**must match all** of these queries.

This parameter is like the `AND` boolean operator.

{es} calculates <<relevance-scores,relevance scores>> for
any returned documents. 
--

`must_not`::
+
--
(Optional, query object) Contains one or more query clauses. Returned documents
**must not match any** of these queries.

This parameter is like the `NOT` boolean operator.

{es} runs `must_not` queries in the <<query-filter-context,filter context>>. To
speed up performance, {es} automatically caches frequently used filter-context
queries.
--

`should`::
+
--
(Optional, query object) Contains one or more query clauses. Returned documents
**must match one or more** of these queries. You can adjust the number of
required matches using the <<query-dsl-minimum-should-match,
`minimum_should_match` parameter>>.

This parameter is like the `OR` boolean operator.

{es} calculates <<relevance-scores,relevance scores>> for
any returned documents. 
--

`filter`::
+
--
(Optional, query object) Contains one or more query clauses. Returned documents
**must match all** these queries. {es} does not calculate
<<relevance-scores,relevance scores>> for any returned documents.

The `filter` parameter is like the `must` parameter. Unlike the `must`
parameter, filter queries do not calculate <<relevance-scores,relevance
scores>>.  Instead, the `filter` query assigns all matching documents a score of
`0`.

To speed up performance, {es} automatically caches frequently used filter
queries.
--

`minimum_should_match`::
(Optional, string) Number of `should` query clauses returned documents must
match. For valid values and more information, see the
<<query-dsl-minimum-should-match, `minimum_should_match` parameter>>.

[[bool-query-notes]]
==== Notes

[[bool-query-more-matches-better]]
===== Relevance scores for documents matching multiple query clauses
When calculating <<relevance-scores,relevance scores>> for documents
returned by multiple query clauses, the `bool` query takes a
**more-matches-is-better** approach. {es} adds the score from each matching
`must` or `should` clause, calculating a final relevance score for each
document.

[[score-bool-filter]]
===== Scoring with `bool.filter`

Queries specified under the `filter` element have no effect on scoring --
scores are returned as `0`.  Scores are only affected by the query that has
been specified.  For instance, all three of the following queries return
all documents where the `status` field contains the term `active`.

This first query assigns a score of `0` to all documents, as no scoring
query has been specified:

[source,js]
---------------------------------
GET /_search
{
  "query": {
    "bool": {
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
---------------------------------
// CONSOLE

This `bool` query has a `match_all` query, which assigns a score of `1.0` to
all documents.

[source,js]
---------------------------------
GET /_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
---------------------------------
// CONSOLE

This `constant_score` query behaves in exactly the same way as the second example above.
The `constant_score` query assigns a score of `1.0` to all documents matched
by the filter.

[source,js]
---------------------------------
GET /_search
{
  "query": {
    "constant_score": {
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
---------------------------------
// CONSOLE

[[bool-query-named-queries]]
===== Using named queries to see which clauses matched

If you need to know which of the clauses in the bool query matched the documents
returned from the query, you can use
<<request-body-search-queries-and-filters,named queries>> to assign a name to
each clause.
