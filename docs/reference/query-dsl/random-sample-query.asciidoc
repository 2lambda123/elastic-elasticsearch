[role="xpack"]
[[query-dsl-random-sample-query]]
=== Random sample query
++++
<titleabbrev>Random sample</titleabbrev>
++++

experimental::[]

Wraps a <<query-dsl-bool-query, filter query>> and returns a random subset of all the
matching documents. This query is best used expensive <<search-aggregations, aggregations>> over large datasets.
It can provide a significant speed improvement at the cost of loss of accuracy.

This query does not score documents and shouldn't be used outside of pairing it with aggs. Additionally, sampling may
provide poor results when used with a very restrictive `filter`.

[source,console]
----
GET kibana_sample_data_ecommerce/_search?size=0&track_total_hits=false
{
  "query": {
    "random_sample": {
      "probability": 0.1
    }
  },
  "aggregations": {
    "price_percentiles": {
      "percentiles": {
        "field": "taxful_total_price"
      }
    }
  }
}
----
// TEST[setup:kibana_sample_data_ecommerce]

[[random-sample-top-level-params]]
==== Top-level parameters for `random_sample`

`filter`::
+
--
(Optional, query object) <<query-dsl-bool-query, Filter query>> you wish to use.
Any returned documents must match this query. If not provided, all documents are matched.

Filter queries do not calculate <<relevance-scores,relevance scores>>. To
speed up performance, {es} automatically caches frequently used filter queries.
--

`probability`::
(Required, float) Floating point number indicating the sampling rate for the documents.
Must be between (0, 1) exclusive. The `probability` isn't exactly the percentage of documents sampled,
but for the majority of cases, they can be considered equivalent concepts. For example, a `"probability": 0.01` over
`1000000` documents generally samples ` 100000` (or `1%`) documents. But it may not be exactly `100000` and is
usually within the window of `[9900, 101000]`.

`seed`::
(Optional, integer) Seed to generate the random sampling of documents. When the seed is provided, the random subset 
of documents matched is the same between calls. The query may be cached internally when the `seed` is provided.

[[random-sample-inner-workings]]
==== How does the sampling work?

The query is a random sample of all the documents in the index. In other words,
the sampling is over the background documents. If a query is provided, a document is returned if it is matched by the
query and if the document is in the random sampling. The sampling is not done over the matched documents.

Consider the set of documents `[1, 2, 3, 4, 5]`. Your query matches `[1, 3, 5]` and the randomly sampled
set is `[2, 4, 5]. So, the document returned would be `[2]`.

This type of sampling provides almost linear performance in relation to sampling probability.

This sample is generated by sampling values from the geometric distribution (`(1-p)^(k-1)*p`) at the
provided `probability` (`p` in distribution equation). The values returned from the distribution indicates how many
documents to skip in the background. It follows that the expected success from the distribution is
`(1-p)/p`. For example, with the `"probability": 0.01`, the expected success (or average number of documents skipped),
would be `99` with a variance of `9900`. Consequently, if you only had `80` documents in your index, or matched by your
filter, you would most likely receive no results.
