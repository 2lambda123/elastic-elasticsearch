[[query-dsl-geo-polygon-query]]
=== Geo polygon query
++++
<titleabbrev>Geo polygon</titleabbrev>
++++

Returns documents containing a point location, or <<geo-point,geopoint>>, within
a provided polygon.

[[geo-polygon-query-ex-request]]
==== Example request

[[geo-polygon-query-index-setup]]
===== Index setup
To see how you can set up an index for the `geo_polygon` query, try the
following example.

. Create an index with a <<geo-point,geopoint>> field mapping.
+
--
[source,js]
----
PUT /my_locations
{
    "mappings": {
        "properties": {
            "pin": {
                "properties": {
                    "location": {
                        "type": "geo_point"
                    }
                }
            }
        }
    }
}
----
// CONSOLE
// TESTSETUP
--

. Index a document with a value in the geopoint field.
+
--
[source,js]
----
PUT /my_locations/_doc/1
{
    "pin" : {
        "location" : {
            "lat" : 40.12,
            "lon" : -69.34
        }
    }
}
----
// CONSOLE
--

[[geo-polygon-query-ex-query]]
===== Example query

The following search uses a `bool` query with a nested `geo_polygon`
<<query-dsl-bool-query,filter>> to find the indexed geopoint.

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_polygon" : {
                    "pin.location" : {
                        "points" : [
                            {"lat" : 40, "lon" : -70},
                            {"lat" : 30, "lon" : -80},
                            {"lat" : 20, "lon" : -90}
                        ]
                    }
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-polygon-top-level-params]]
==== Top-level parameters for `geo_polygon`

`<field>`::
(Required, object) <<geo-point,Geopoint>> field you wish to search. If this is
not a <<geo-point,geopoint>> field, {es} returns an error.

[[geo-polygon-field-params]]
==== Parameters for `<field>`

`points`::
+
--
(Required, array of <<geo-polygon-accepted-formats,latitude-longitude pairs>>)
Array of latitude-longitude pairs used to create a polygon. The query returns
documents containing geopoints in the provided `<field>` that are within this
polygon.

See <<geo-polygon-accepted-formats>> for a list of supported formats.
--

`ignore_unmapped`::
+
--
(Optional, boolean) Indicates whether to ignore an unmapped `<field>` and not
return any documents instead of an error. Defaults to `false`.

If `false`, {es} returns an error if the `<field>` is unmapped.

You can use this parameter to query multiple indices that may not contain the
`<field>`.
--

`validation_method`::
+
--
(Optional, string) Indicates whether the query accepts invalid
latitude or longitude values in the `<field>` parameter.

`STRICT` (Default):: Do not accept invalid latitude or longitude values.

`COERCE`:: Accept invalid latitude or longitude values. Attempt to infer the
correct latitude or longitude.

`IGNORE_MALFORMED`:: Accept invalid latitude or longitude values. Do not attempt
to infer the correct latitude or longitude.
--


[[geo-polygon-query-notes]]
==== Notes

[[geo-polygon-accepted-formats]]
===== Accepted latitude-longitude formats

The `points` parameter accepts the following latitude-longitude formats:

* <<geo-polygon-format-array,Array>>
* <<geo-polygon-format-geohash,Geohash>>
* <<geo-polygon-format-string,String>>

[[geo-polygon-format-array]]
====== Array
The following search uses the `[longitude, latitude]` array format. Note
the longitude-latitude order conforms with http://geojson.org/[GeoJSON].

[source,js]
----
GET /_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_polygon" : {
                    "pin.location" : {
                        "points" : [
                            [-70, 40],
                            [-80, 30],
                            [-90, 20]
                        ]
                    }
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-polygon-format-geohash]]
====== Geohash
The following search uses the https://en.wikipedia.org/wiki/Geohash[geohash]
format.

[source,js]
----
GET /_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
               "geo_polygon" : {
                    "pin.location" : {
                        "points" : [
                            "drn5x1g8cu2y",
                            "30, -80",
                            "20, -90"
                        ]
                    }
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-polygon-format-string]]
====== String
The following search uses the `latitude, longitude` string format.

[source,js]
----
GET /_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
               "geo_polygon" : {
                    "pin.location" : {
                        "points" : [
                            "40, -70",
                            "30, -80",
                            "20, -90"
                        ]
                    }
                }
            }
        }
    }
}
----
// CONSOLE