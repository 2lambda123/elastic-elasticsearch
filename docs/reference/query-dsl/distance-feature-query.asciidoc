[[query-dsl-distance-feature-query]]
=== Distance Feature Query

The `distance_feature` query is a specialized query that only works
on <<number,`long`>>, <<date, `date`>> or <<geo-point,`geo_point`>>
fields. Its goal is to boost documents' scores based on proximity
to some given origin. For example, use this query if you want to
give more weight to documents with dates closer to a certain date,
or to documents with locations closer to a certain location,
or to documents with a long field closer to a certain number.

This query is called `distance_feature` query, because it dynamically
calculates distances between the given origin and documents' field values,
and use these distances as features to boost the documents' scores.

`distance_feature` query is typically put in a `should` clause of a
<<query-dsl-bool-query,`bool`>> query so that its score is added to the score
of the query.

Compared to using <<query-dsl-function-score-query,`function_score`>> or other
ways to modify the score, this query has the benefit of being able to
efficiently skip non-competitive hits when
<<search-uri-request,`track_total_hits`>> is not set to `true`. Speedups may be
spectacular.

==== Syntax of distance_feature query

`distance_feature` query has the following syntax:
[source,js]
--------------------------------------------------
"distance_feature": {
  "field": "my_field",
  "origin": <origin>,
  "pivot": <pivot>,
  "boost" : <boost>
}
--------------------------------------------------
// NOTCONSOLE

[horizontal]
`field`::
    Required parameter. Defines a name of the field on which to calculate
    distances. Must be a field of type `long`, `date`, or `geo_point`,
    and must be indexed and has <<doc-values, doc values>>.

`origin`::
    Required parameter. Defines a point of origin used for calculating
    distances. Must be a long number for numeric fields, date for date fields
    and geo point for geo fields. Date math (for example `now-1h`) is
    supported for a date origin.

`pivot`::
    Required parameter. Defines the distance from origin at which the computed
    score will equal to a half of the `boost` parameter. Must be a long
    number for numeric fields, a `number+date unit` ("1h", "10d",...) for
    date fields, and a `number + geo unit` ("1km", "12m",...) for geo fields.

`boost`::
    Optional parameter with a default value of `1`. Defines the factor by which
    to multiply the score. Must be a non-negative float number.


The `distance_feature` query computes a document's score as following:

`score = boost * pivot / (pivot + distance)`

where `distance` is the absolute difference between the origin and
a document's field value. For date field the distance will be in
milliseconds; for geo fields the distance is a haversine distance in meters.

==== Example using distance_feature query

Let's look at an example. We index several documents containing
information about sales items, such as name, production date,
price, and location.

[source,js]
--------------------------------------------------
PUT items
{
  "mappings": {
    "properties": {
      "item_name": {
        "type": "keyword"
      },
      "item_production_date": {
        "type": "date"
      },
      "item_price": {
        "type": "long"
      },
      "item_location": {
        "type": "geo_point"
      }
    }
  }
}

PUT items/_doc/1
{
  "item_name" : "chocolate",
  "item_production_date": "2018-02-01",
  "item_price": 22,
  "item_location": [-71.34, 41.12]
}

PUT items/_doc/2
{
  "item_name" : "chocolate",
  "item_production_date": "2018-01-01",
  "item_price": 25,
  "item_location": [-71.3, 41.15]
}


PUT items/_doc/3
{
  "item_name" : "chocolate",
  "item_expiry_date": "2017-12-01",
  "item_production_date": 19,
  "item_location": [-71.3, 41.12]
}

POST items/_refresh
--------------------------------------------------
// CONSOLE

We look for all chocolate items, but we also want chocolates
that are closer to our origin price come first in the result list.

[source,js]
--------------------------------------------------
GET items/_search
{
  "query": {
    "bool": {
      "must": {
        "match": {
          "item_name": "chocolate"
        }
      },
      "should": {
        "distance_feature": {
          "boost" :2,
          "field": "item_price",
          "pivot": 5,
          "origin": 15
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TEST[continued]


We look for all chocolate items, but we also want chocolates
that are produced recently (closer to the date `now`)
to be ranked higher.

[source,js]
--------------------------------------------------
GET items/_search
{
  "query": {
    "bool": {
      "must": {
        "match": {
          "item_name": "chocolate"
        }
      },
      "should": {
        "distance_feature": {
          "field": "item_production_date",
          "pivot": "7d",
          "origin": "now"
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

We look for all chocolate items, but we also want chocolates
that are produced locally (closer to our geo origin)
come first in the result list.

[source,js]
--------------------------------------------------
GET items/_search
{
  "query": {
    "bool": {
      "must": {
        "match": {
          "item_name": "chocolate"
        }
      },
      "should": {
        "distance_feature": {
          "field": "item_location",
          "pivot": "1000m",
          "origin": [-71.3, 41.15]
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TEST[continued]
