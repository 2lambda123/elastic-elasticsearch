[[query-dsl-geo-distance-query]]
=== Geo distance query
++++
<titleabbrev>Geo distance</titleabbrev>
++++

Returns documents containing a point location, or <<geo-point,geopoint>>,
within a provided distance from another geopoint.

[[geo-distance-query-ex-request]]
==== Example request

[[geo-distance-query-index-setup]]
===== Index setup
To see how you can set up an index for the `geo_distance` query, try the
following example.

. Create an index with a <<geo-point,geopoint>> field mapping.
+
--
[source,js]
----
PUT /my_locations
{
    "mappings": {
        "properties": {
            "pin": {
                "properties": {
                    "location": {
                        "type": "geo_point"
                    }
                }
            }
        }
    }
}
----
// CONSOLE
// TESTSETUP
--

. Index a document with a value in the geopoint field.
+
--
[source,js]
----
PUT /my_locations/_doc/1
{
    "pin" : {
        "location" : {
            "lat" : 40.12,
            "lon" : -71.34
        }
    }
}
----
// CONSOLE
--

[[geo-distance-query-ex-query]]
===== Example query
The following search uses a `bool` query with a nested `geo_distance`
<<query-dsl-bool-query,filter>> to find the indexed geopoint.


[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_distance" : {
                    "distance" : "200km",
                    "pin.location" : {
                        "lat" : 40,
                        "lon" : -70
                    }
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-distance-top-level-params]]
==== Top-level parameters for `geo_distance`

`<field>`::
+
--
(Required, <<geo-point, geopoint object>>)
<<geo-point,Geopoint>> field you wish to search. If this is not a
<<geo-point,geopoint>> field, {es} returns an error.

The value of this parameter is a <<geo-point,geopoint>> object. The query
returns documents containing geopoints within a provided distance of this
geopoint.

See <<geo-distance-accepted-formats>> for a list of supported formats.
--

`distance`::
(Required, <<distance-units, distance unit>>) Radius of the circle centered on
the geopoint provided in the `<field>` parameter. The query returns documents
containing geopoints within this circle.

`distance_type`::
+
--
(Optional, string) Indicates how to compute the distance. Valid values are:

* `ARC` (Default)
* `PLANE`

`PLANE` is faster but inaccurate on long distances and close to the poles.
--

`ignore_unmapped`::
+
--
(Optional, boolean) Indicates whether to ignore an unmapped `<field>` and not
return any documents instead of an error. Defaults to `false`.

If `false`, {es} returns an error if the `<field>` is unmapped.

You can use this parameter to query multiple indices that may not contain the
`<field>`.
--

`validation_method`::
+
--
(Optional, string) Indicates whether the query accepts an invalid geopoint in
the `<field>` parameter.

`STRICT` (Default):: Do not accept an invalid geopoint.

`COERCE`:: Accept an invalid geopoint. Attempt to infer the correct latitude
and longitude of the geopoint.

`IGNORE_MALFORMED`:: Accept an invalid geopoint. Do not attempt to infer the
correct latitude and longitude of the geopoint.
--


[[geo-distance-query-notes]]
==== Notes

[[geo-distance-accepted-formats]]
===== Accepted geopoint formats
Like the <<geo-point,geopoint datatype>>, the `<field>` parameter accepts 
the following geopoint formats:

* <<geo-distance-format-array,Array>>
* <<geo-distance-format-geohash,Geohash>>
* <<geo-distance-format-property,Property>>
* <<geo-distance-format-string,String>>

[[geo-distance-format-array]]
====== Array
The following search uses the `[longitude, latitude]` array format. Note the
longitude-latitude order conforms with http://geojson.org/[GeoJSON].

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_distance" : {
                    "distance" : "12km",
                    "pin.location" : [-70, 40]
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-distance-format-geohash]]
===== Geohash
The following search uses the geohash format.

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_distance" : {
                    "distance" : "12km",
                    "pin.location" : "drm3btev3e86"
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-distance-format-property]]
====== Property
The following search uses the property format.

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_distance" : {
                    "distance" : "12km",
                    "pin.location" : {
                        "lat" : 40,
                        "lon" : -70
                    }
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-distance-format-string]]
====== String
The following search uses the `latitude, longitude` string format.

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_distance" : {
                    "distance" : "12km",
                    "pin.location" : "40,-70"
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-distance-multi-loc]]
===== Multiple locations per document
The `geo_distance` query can work with multiple locations / points per document.
Once a single location / point matches the query, the document will be included
in the query.