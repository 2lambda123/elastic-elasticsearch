[[query-dsl-vector-similarity-query]]
=== Vector Similarity query
++++
<titleabbrev>Vector Similarity</titleabbrev>
++++

A query that allows approximate nearest neighbors search over <<dense-vector,`dense_vector`>> fields.
The query will find vectors that are within or equal to the given similarity threshold of the provide
query vector.

[[vector-similarity-query-ex-request]]
==== Example request

Let's assume we have an `l2_norm` <<dense-vector,`dense_vector`>> field.

[source,console]
----
PUT my-index
{
  "mappings": {
    "properties": {
      "title": {
        "type": "text"
      },
      "image-vector": {
        "type": "dense_vector",
        "dims": 3,
        "index": true,
        "similarity": "l2_norm"
      }
    }
  }
}
----

The following query finds vectors that are within the sphere with radius `10`
surrounding the query vector `[-5, 9, -12]`

[source,console]
----
GET /_search
{
  "query": {
    "vector_similarity": {
      "field": "image-vector",
      "query_vector": [-5, 9, -12],
      "num_candidates": 100,
      "similarity": 10.0
    }
  }
}
----

Since this is a regular query, it can be used in filter contexts and combined with other queries
within a <<query-dsl-bool-query,`bool`>> query.

NOTE: When combined with other queries that are filters or `must` clauses, it is the same as applying a post-filter
on the vector similarity results. If you only want to do vector similarity with a pre-filter, supply the `filter`
field in the `vector_similarity` configuration. Once the documents with that filter applied, and within the provided
similarity are gathered, they are combined as normal document results with the other clauses within your query.

The following query is a <<query-dsl-term-query,`term`>> query against `title`. If the field `image-vector` is also
within the sphere of radius `10` with origin at `[-5, 9, -12]`, `boost*similarity_score`
is added to the matching document `_score`.

[source,console]
----
GET /_search
{
  "query": {
    "bool": {
      "must": {
        "term": {
          "title": "snow"
        }
      },
      "should": {
        "vector_similarity": {
          "field": "image-vector",
          "query_vector": [-5, 9, -12],
          "num_candidates": 100,
          "similarity": 10.0,
          "boost": 5.0,
          "filter": { "term": {"title": "snow" } }
        }
      }
    }
  }
}
----

[[vector-similarity-top-level-params]]
==== Top-level parameters for `vector_similarity`
`field`::
(Required, string)
include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=knn-field]

`query_vector`::
(Required, array of floats)
include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=knn-query-vector]

`num_candidates`::
(Required, int)
The number of nearest neighbor candidates to consider per shard. Cannot exceed
10,000.

`filter`::
(Optional, <<query-dsl,Query DSL object>>)
Query to filter the documents that can match. The search will return documents matching this filter AND are within
the similarity threshold. The value can be a single query or a
list of queries. If `filter` is not provided, all documents are allowed to
match. This filter is applied **during** the approximate kNN search. This contrasts with a
post-filtering approach, where the filter is applied **after** the approximate
kNN search completes. Post-filtering has the downside that it sometimes
returns fewer than k results, even when there are enough matching documents.

`similarity`::
(Required, float)
The minimum similarity required for a document to be considered a match. The similarity
value calculated relates to the raw <<dense-vector-similarity, `similarity`>> used. Not the
document score. The matched documents are then scored according to <<dense-vector-similarity, `similarity`>>
and the provided `boost` is applied.

+
--
The `similarity` parameter is the direct vector similarity calculation.

* `l2_norm`: also known as Euclidean, will include documents where the vector is within
the `dims` dimensional hypersphere with radius `similarity` with origin at `query_vector`.
* `cosine` & `dot_product`: Only return vectors where the cosine similarity or dot-product are at least the provided
`similarity`.
--

`boost`::
(Optional, float) Floating point number used to decrease or increase the
<<relevance-scores,relevance scores>>. Defaults to `1.0`.

[[vector-similarity-pre-or-post-filtering]]
==== Pre vs Post filtering

NOTE: Only `num_candidates` are explored per shard. The fewer `num_candidates` explored the faster the query. However, accuracy
of the results may suffer as documents that fit within the similarity threshold could be missed.
So, picking the correct `num_candidates` for your use-case and combining that with pre-filtering or post-filtering
may change per use-case.

Vector similarity gives you the flexibility to configure either (or both) pre-filtering and post-filtering to your
vector search. Here is an example of a query that supplies pre-filtering:

[source,console]
----
GET /_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "title": "snow"
          }
        },
        {
          "vector_similarity": {
            "field": "image-vector",
            "query_vector": [-5, 9, -12],
            "num_candidates": 100,
            "similarity": 10.0,
            "boost": 5.0,
            "filter": { "term": {"title": "snow" } }
          }
        }
      ]
    }
  }
}
----

Note how `vector_similarity.filter` is provided. This means that the query only searches for similar vectors
over documents that match that filter. Then those resulting documents are combined with the other filter
within the <<query-dsl-bool-query, `bool`>>. This ensures that as many as the documents that match that filter
and are within that given similarity are matched.

Here is an example of only a post-filter:

[source,console]
----
GET /_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "title": "snow"
          }
        },
        {
          "vector_similarity": {
            "field": "image-vector",
            "query_vector": [-5, 9, -12],
            "num_candidates": 100,
            "similarity": 10.0,
            "boost": 5.0
          }
        }
      ]
    }
  }
}
----

See how no `vector_similarity.filter` is provided? This means that vector_similarity will find similary vectors
over ALL documents and once the nearest ones are found, those are combined with the other filter in the
<<query-dsl-bool-query, `bool`>>.

Post-filtering may miss documents if the similarity threshold is broad and can match many vectors. This is because
filtering AFTER finding vectors could remove all the matched vectors. If a pre-filter is provided, there is a better
guarantee to find all the similar vectors that match a filter.

But, post-filtering isn't all bad, if you know your similarity threshold is very restrictive, post-filtering can be
faster than pre-filtering and still provide good results.
