[[query-dsl-geo-bounding-box-query]]
=== Geo bounding box query
++++
<titleabbrev>Geo bounding box</titleabbrev>
++++

Returns documents based on point locations, or <<geo-point,geopoints>>, within a
provided rectangle. This rectangle is called a bounding box.

[[geo-bbox-query-ex-request]]
==== Example request

[[geo-bbox-query-index-setup]]
===== Index setup

To see how you can set up an index for the `geo_bounding_box` query, try the
following example.

. Create an index with a <<geo-point,geopoint>> field mapping.
+
--
[source,js]
----
PUT /my_locations
{
    "mappings": {
        "properties": {
            "pin": {
                "properties": {
                    "location": {
                        "type": "geo_point"
                    }
                }
            }
        }
    }
}
----
// CONSOLE
// TESTSETUP
--

. Index a document with a value in the geopoint field.
+
--
[source,js]
----
PUT /my_locations/_doc/1
{
    "pin" : {
        "location" : {
            "lat" : 40.12,
            "lon" : -71.34
        }
    }
}
----
// CONSOLE
--

[[geo-bbox-query-ex-query]]
===== Example query

The following search uses a `bool` query with a nested `geo_bounding_box`
<<query-dsl-bool-query,filter>> to find the indexed geopoint.

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_bounding_box" : {
                    "pin.location" : {
                        "top_left" : {
                            "lat" : 40.73,
                            "lon" : -74.1
                        },
                        "bottom_right" : {
                            "lat" : 40.01,
                            "lon" : -71.12
                        }
                    }
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-bbox-top-level-params]]
==== Top-level parameters for `geo_bounding_box`

`<field>`::
+
--
(Required, <<geo-bbox-accepted-formats,latitude-longitude object>>)
<<geo-point,Geopoint>> field you wish to search.

The value of this parameter is a latitude-longitude object used to create a
bounding box. The query returns documents containing geopoints in the provided
field that are within this box.

See <<geo-bbox-accepted-formats>> for a
list of supported formats.
--


`ignore_unmapped`::
+
--
(Optional, boolean) Indicates whether to ignore an unmapped `<field>` and not
return any documents instead of an error. Defaults to `false`.

If `false`, {es} returns an error if the `<field>` is unmapped.

You can use this parameter to query multiple indices that may not contain the
`<field>`.
--



`type`::
+
--
(Optional, string) Indicates whether the query runs in memory or indexed.

* `MEMORY` (Default)
* `INDEXED`

See <<geo-bbox-type>>.
-- 

`validation_method`::
+
--
(Optional, string) Indicates whether the query accepts invalid
latitude or longitude values in the `<field>` parameter. 

`STRICT` (Default):: Do not accept invalid latitude or longitude values.

`COERCE`:: Accept invalid latitude or longitude values. Attempt to infer the
correct latitude or longitude.

`IGNORE_MALFORMED`:: Accept invalid latitude or longitude values. Do not attempt
to infer the correct latitude or longitude.
--

[[geo-bbox-query-notes]]
==== Notes

[[geo-bbox-accepted-formats]]
===== Accepted latitude-longitude formats
Like the <<geo-point,geopoint datatype>>, the `<field>` parameter accepts 
the following latitude-longitude formats:

* <<geo-bbox-format-array,Array>>
* <<geo-bbox-format-geohash,Geohash>>
* <<geo-bbox-format-property,Property>>
* <<geo-bbox-format-string,String>>
* <<geo-bbox-format-vertices,Vertices>>
* <<geo-bbox-format-wkt,Well-known text (WKT)>>

[[geo-bbox-format-array]]
====== Array
The following search uses the `[longitude, latitude]` array format. Note
the longitude-latitude order conforms with http://geojson.org/[GeoJSON].

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_bounding_box" : {
                    "pin.location" : {
                        "top_left" : [-74.1, 40.73],
                        "bottom_right" : [-71.12, 40.01]
                    }
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-bbox-format-geohash]]
====== Geohash
The following search uses the geohash format.

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_bounding_box" : {
                    "pin.location" : {
                        "top_left" : "dr5r9ydj2y73",
                        "bottom_right" : "drj7teegpus6"
                    }
                }
            }
        }
    }
}
----
// CONSOLE

When used to specify the edges of a bounding box, geohashes are treated as
rectangles. The bounding box is defined in such a way that its top left
corresponds to the top left corner of the geohash specified in the `top_left`
parameter and its bottom right is defined as the bottom right of the geohash
specified in the `bottom_right` parameter.

In order to specify a bounding box that would match entire area of a
geohash the geohash can be specified in both `top_left` and
`bottom_right` parameters:

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "geo_bounding_box" : {
            "pin.location" : {
                "top_left" : "dr",
                "bottom_right" : "dr"
            }
        }
    }
}
----
// CONSOLE

In this example, the geohash `dr` will produce the bounding box
query with the top left corner at `45.0,-78.75` and the bottom right
corner at `39.375,-67.5`.

[[geo-bbox-format-property]]
====== Property
The following search uses the property format.

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_bounding_box" : {
                    "pin.location" : {
                        "top_left" : {
                            "lat" : 40.73,
                            "lon" : -74.1
                        },
                        "bottom_right" : {
                            "lat" : 40.01,
                            "lon" : -71.12
                        }
                    }
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-bbox-format-string]]
====== String
The following search uses the `latitude, longitude` string format.

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_bounding_box" : {
                    "pin.location" : {
                        "top_left" : "40.73, -74.1",
                        "bottom_right" : "40.01, -71.12"
                    }
                }
            }
    }
}
}
----
// CONSOLE

[[geo-bbox-format-vertices]]
====== Vertices
The following search uses the vertices format.

The vertices of the bounding box can either be set by `top_left` and
`bottom_right` or by `top_right` and `bottom_left` parameters. More
over the names `topLeft`, `bottomRight`, `topRight` and `bottomLeft`
are supported. Instead of setting the values pairwise, one can use
the simple names `top`, `left`, `bottom` and `right` to set the
values separately.

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_bounding_box" : {
                    "pin.location" : {
                        "top" : 40.73,
                        "left" : -74.1,
                        "bottom" : 40.01,
                        "right" : -71.12
                    }
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-bbox-format-wkt]]
====== Well-known text (WKT)
The following search uses the well-known text (WKT) format.

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_bounding_box" : {
                    "pin.location" : {
                        "wkt" : "BBOX (-74.1, -71.12, 40.73, 40.01)"
                    }
                }
            }
        }
    }
}
----
// CONSOLE

[[geo-bbox-multi-loc]]
===== Multiple locations per document
The filter can work with multiple locations / points per document. Once
a single location / point matches the filter, the document will be
included in the filter

[[geo-bbox-type]]
===== Use the `type` parameter to speed up performance
The type of the bounding box execution by default is set to `memory`,
which means in memory checks if the doc falls within the bounding box
range. In some cases, an `indexed` option will perform faster (but note
that the `geo_point` type must have lat and lon indexed in this case).
Note, when using the indexed option, multi locations per document field
are not supported. Here is an example:

[source,js]
----
GET /my_locations/_search
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_bounding_box" : {
                    "pin.location" : {
                        "top_left" : {
                            "lat" : 40.73,
                            "lon" : -74.1
                        },
                        "bottom_right" : {
                            "lat" : 40.10,
                            "lon" : -71.12
                        }
                    },
                    "type" : "indexed"
                }
            }
        }
    }
}
----
// CONSOLE

[[geopoint-precision]]
===== Geopoint precision
Geopoints have limited precision and are always rounded down during index time.
During the query time, upper boundaries of the bounding boxes are rounded down,
while lower boundaries are rounded up. As a result, the points along on the
lower bounds (bottom and left edges of the bounding box) might not make it into
the bounding box due to the rounding error. At the same time points alongside
the upper bounds (top and right edges) might be selected by the query even if
they are located slightly outside the edge. The rounding error should be less
than 4.20e-8 degrees on the latitude and less than 8.39e-8 degrees on the
longitude, which translates to less than 1cm error even at the equator.