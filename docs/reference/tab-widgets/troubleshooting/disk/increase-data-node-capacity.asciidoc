// tag::cloud[]
In order to increase the data node capacity in your cluster:

. Log in to the {ess-console}[{ecloud} console].
+
. On the **Elasticsearch Service** panel, click the gear under the `Manage deployment` column that corresponds to the
name of your deployment.
+
. If autoscaling is available but not enabled, please enable it. You can do this by clicking the button
`Enable autoscaling` on a banner like the one below:
+
[role="screenshot"]
image::images/troubleshooting/disk/autoscaling_banner.png[Autoscaling banner,align="center"]
+
Or you can go to `Actions > Edit deployment`, check the checkbox `Autoscale` and click `save` at the bottom of the page.
+
[role="screenshot"]
image::images/troubleshooting/disk/enable_autoscaling.png[Enabling autoscaling,align="center"]

. If autoscaling has succeeded the cluster should return to `healthy` status. If the cluster is still out of disk
please check if autoscaling has reached its limits. You will be notified about this by the following banner:
+
[role="screenshot"]
image::images/troubleshooting/disk/autoscaling_limits_banner.png[Autoscaling banner,align="center"]
+
or you can go to `Actions > Edit deployment` and check for the label `LIMIT REACHED`:
+
[role="screenshot"]
image::images/troubleshooting/disk/reached_autoscaling_limits.png[Autoscaling limits reached,align="center"]
+
If you are seeing the banner click `Update autoscaling settings` to go to the `Edit` page. Otherwise, you are already
in the `Edit` page, click `Edit settings` to increase the autoscaling limits. After you perform the change click `save`
at the bottom of the page.

// end::cloud[]

// tag::self-managed[]
In order to increase the data node capacity in your cluster, you will need to calculate the amount of extra disk space
needed.

. First, we need to retrieve the relevant disk thresholds that will indicate how much space should be released. The
relevant thresholds are the <<cluster-routing-watermark-high, high watermark>> for all the tiers apart from the frozen
and the <<cluster-routing-flood-stage-frozen, frozen flood stage watermark>> for the frozen tier. We can retrieve them
via the following commands:
+
[source,console]
----
GET _cluster/settings?include_defaults&filter_path=*.cluster.routing.allocation.disk.watermark.high*
GET _cluster/settings?include_defaults&filter_path=*.cluster.routing.allocation.disk.watermark.flood_stage*
----
+
The response will look like this:
+
[source,console-result]
----
{
  "defaults": {
    "cluster": {
      "routing": {
        "allocation": {
          "disk": {
            "watermark": {
              "high": "90%",
              "high.max_headroom": "150GB"
            }
          }
        }
      }
    }
  }
}

# Frozen tier
{
  "defaults": {
    "cluster": {
      "routing": {
        "allocation": {
          "disk": {
            "watermark": {
              "flood_stage.frozen.max_headroom": "20GB",
              "flood_stage.frozen": "95%"
            }
          }
        }
      }
    }
  }
}
----
// TEST[skip:illustration purposes only]
+
The above means that in order to resolve the disk shortage we need to either drop our disk usage below the 90% or have
more than 150GB available, read more on how this threshold works <<cluster-routing-watermark-high, here>>.

. The next step is to find out the current disk usage, this will indicate how much extra space is needed. For simplicity,
our example has one node, but you can apply the same for every node over the relevant threshold.
+
[source,console]
----
GET _cat/allocation?v&s=disk.avail&h=node,disk.percent,disk.avail,disk.total,disk.used,disk.indices,shards
----
+
The response will look like this:
+
[source,console-result]
----
node                disk.percent disk.avail disk.total disk.used disk.indices shards
instance-0000000000           91     4.6gb       35gb    31.1gb       29.9gb    111
----
// TEST[skip:illustration purposes only]

. The desirable situation is to drop the disk usage of all the nodes bellow the relevant threshold, in our example 90%.
To achieve this, we can do 2 things:
- Add an extra data node to the cluster (this requires that you have more than one shard in your cluster).
- Extend the disk space of the current node by approximately 20% to allow this node to drop to 70% which will give
enough space in our use case to not run out of space soon.

. In the case of adding another data node, the cluster will not recover immediately. It might take some time to
relocate shards in order to relieve the node that is out of space. You can check the progress here:
+
[source,console]
----
GET /_cat/shards?v&h=state,node&s=state
----
+
If in the response you see the word `RELOCATING` this means that shards are still moving. Wait until all shards turn
to `STARTED` or until the health disk indicator turns to `green`.
// end::self-managed[]
