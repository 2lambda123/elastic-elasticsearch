[[analysis-lang-analyzer]]
=== Language Analyzers

The language analyzers perform language-specific text processing, including stemming. 
You can use the language analyzers as-is, or configure custom stopword lists and specify
terms that should not be stemmed. 

Elasticsearch provides the following language-specific analyzers:
<<arabic-analyzer,`arabic`>>,
<<armenian-analyzer,`armenian`>>,
<<basque-analyzer,`basque`>>,
<<brazilian-analyzer,`brazilian`>>,
<<bulgarian-analyzer,`bulgarian`>>,
<<catalan-analyzer,`catalan`>>,
<<cjk-analyzer,`cjk`>>,
<<czech-analyzer,`czech`>>,
<<danish-analyzer,`danish`>>,
<<dutch-analyzer,`dutch`>>,
<<english-analyzer,`english`>>,
<<finnish-analyzer,`finnish`>>,
<<french-analyzer,`french`>>,
<<galician-analyzer,`galician`>>,
<<german-analyzer,`german`>>,
<<greek-analyzer,`greek`>>,
<<hindi-analyzer,`hindi`>>,
<<hungarian-analyzer,`hungarian`>>,
<<indonesian-analyzer,`indonesian`>>,
<<irish-analyzer,`irish`>>,
<<italian-analyzer,`italian`>>,
<<latvian-analyzer,`latvian`>>,
<<norwegian-analyzer,`norwegian`>>,
<<persian-analyzer,`persian`>>,
<<portuguese-analyzer,`portuguese`>>,
<<romanian-analyzer,`romanian`>>,
<<russian-analyzer,`russian`>>,
<<sorani-analyzer,`sorani`>>,
<<spanish-analyzer,`spanish`>>,
<<swedish-analyzer,`swedish`>>,
<<turkish-analyzer,`turkish`>>,
<<thai-analyzer,`thai`>>.

You can configure the following settings for language analyzers:

[cols="<,<",options="header",]
|=======================================================================
|Setting |Description
|`stopwords` |A list of stopwords or the name of a predefined list. 
For more information, see <<configuring-stopwords, 
Configuring Stopwords>>.
|`stopwords_path` |A path to a file that contains a list of stopwords. 
Can be relative to the `config` location or an absolute path.
|`stem_exclusion`|A list of words that should not be stemmed. Supported 
by a subset of the language analyzers. For more information, see <<configuring-stemming, 
Configuring Stemming>>.
|=======================================================================

For example, using the `english` analyzer to process the string 
"There is no way that writers can be tamed and rendered civilized" with the default 
stop words generates the following tokens:

 `wai, writer, can, start, tame, render, civil`

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/english-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/english-analyzer.json

[[configuring-stopwords]]
==== Configuring Stopwords

All of the language analyzers support setting custom `stopwords`. Stopwords
are frequently occurring terms that you want to exclude from the index, such
as `a`, `and`, and `the`. You can specify stopwords directly in the analyzer
configuration, specify one of the predefined stopword lists, or set the 
`stopwords_path` to use an external stopwords file. See <<analysis-stop-tokenfilter,Stop Token Filter>> for the predefined stopword lists.

For example, the following `english` analyzer configuration defines `a`, `and`, 
and `the` as stopwords.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-english-analyzer-stopwords.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-english-analyzer-stopwords.json

Using this analyzer to process the string "There is no way that writers can be 
tamed and rendered civilized" generates the following tokens:

`there, is, no, wai, that, writer, can, be, tame, and, render, civil`

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/my-english-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/my-english-analyzer.json

[[configuring-stemming]]
==== Configuring Stemming

Several language analyzers support disabling stemming for particular words.
Stemming is the process of reducing words to the base or root form.
You set the `stem_exclusion` parameter to specify which words should not be
stemmed. This parameter takes an array of lowercase words.
For more information, see <<analysis-keyword-marker-tokenfilter,Keyword Marker Token Filter>>.

The following analyzers support the `stem_exclusion` parameter:
`arabic`, `armenian`, `basque`, `catalan`, `bulgarian`, `catalan`,
`czech`, `finnish`, `dutch`, `english`, `finnish`, `french`, `galician`,
`german`, `irish`, `hindi`, `hungarian`, `indonesian`, `italian`, `latvian`, `norwegian`,
`portuguese`, `romanian`, `russian`, `sorani`, `spanish`, `swedish`, `turkish`.

For example, the following `english` analyzer configuration prevents `civilized` and `way` from
being stemmed. 

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-english-analyzer-keywords.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-english-analyzer-keywords.json

Using this analyzer to process the string  "There is no way that writers can be 
tamed and rendered civilized" generates the following tokens:

`there, is, no, way, that, writer, can, be, tame, and, render, civilized`

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/my-english-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/my-english-analyzer.json

==== Customizing Language Analyzers

You can reimplement the built-in language analyzers as <<analysis-custom-analyzer, `custom`>> analyzers
if you need to alter their behaviour. The following examples show how
to replicate each language analyzer.

NOTE: If you do not intend to exclude words from being stemmed, 
omit the `keyword_marker` token filter from your custom analyzer configuration.

[[arabic-analyzer]]
===== Arabic Analyzer

The following example shows how to reimplement the  `arabic` analyzer
as a `custom` analyzer. You can omit the `keyword_marker` filter if you 
don't need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-arabic-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-arabic-analyzer.json

[[armenian-analyzer]]
===== Armenian Analyzer

The following example shows how to reimplement the `armenian` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-armenian-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-armenian-analyzer.json

[[basque-analyzer]]
===== Basque Analyzer

The following example shows how to reimplement the `basque` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-basque-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-basque-analyzer.json

[[brazilian-analyzer]]
===== Brazilian Analyzer

The following example shows how to reimplement the `brazilian` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-brazilian-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-brazilian-analyzer.json

[[bulgarian-analyzer]]
===== Bulgarian Analyzer
The following example shows how to reimplement the `bulgarian` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-bulgarian-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-bulgarian-analyzer.json

[[catalan-analyzer]]
===== Catalan Analyzer
The following example shows how to reimplement the `catalan` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-catalan-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-catalan-analyzer.json

[[cjk-analyzer]]
===== CJK Analyzer
The following example shows how to reimplement the `cjk` analyzer 
as a `custom` analyzer.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-cjk-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-cjk-analyzer.json

[[czech-analyzer]]
===== Czech Analyzer
The following example shows how to reimplement the `czech` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-czech-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-czech-analyzer.json

[[danish-analyzer]]
===== Danish Analyzer

The following example shows how to reimplement the `danish` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-danish-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-danish-analyzer.json

[[dutch-analyzer]]
===== Dutch Analyzer

The following example shows how to reimplement the `dutch` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-dutch-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-dutch-analyzer.json

[[english-analyzer]]
===== English Analyzer

The following example shows how to reimplement the `english` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-english-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-english-analyzer.json

[[finnish-analyzer]]
===== Finnish Analyzer

The following example shows how to reimplement the `finnish` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-finnish-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-finnish-analyzer.json

[[french-analyzer]]
===== French Analyzer

The following example shows how to reimplement the `french` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-french-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-french-analyzer.json


[[galician-analyzer]]
===== Galician Analyzer

The following example shows how to reimplement the `galician` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-galician-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-galician-analyzer.json

[[german-analyzer]]
===== German Analyzer

The following example shows how to reimplement the `german` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-german-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-german-analyzer.json


[[greek-analyzer]]
===== Greek Analyzer

The following example shows how to reimplement the `greek` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-greek-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-greek-analyzer.json

[[hindi-analyzer]]
===== Hindi Analyzer

The following example shows how to reimplement the `hindi` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-hindi-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-hindi-analyzer.json

[[hungarian-analyzer]]
===== Hungarian Analyzer

The following example shows how to reimplement the `hungarian` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-hungarian-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-hungarian-analyzer.json


[[indonesian-analyzer]]
===== Indonesian Analyzer

The following example shows how to reimplement the `indonesian` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-indonesian-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-indonesian-analyzer.json

[[irish-analyzer]]
===== Irish Analyzer

The following example shows how to reimplement the `irish` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-irish-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-irish-analyzer.json

[[italian-analyzer]]
===== Italian Analyzer

The following example shows how to reimplement the `italian` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-italian-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-italian-analyzer.json

[[latvian-analyzer]]
===== Latvian Analyzer

The following example shows how to reimplement the `latvian` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-latvian-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-latvian-analyzer.json

[[norwegian-analyzer]]
===== Norwegian Analyzer

The following example shows how to reimplement the `norwegian` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-norwegian-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-norwegian-analyzer.json

[[persian-analyzer]]
===== Persian Analyzer

The following example shows how to reimplement the `persian` analyzer 
as a `custom` analyzer. This analyzer uses a `mapping` character filter to
replace zero-width non-joiners with an ASCII space.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-persian-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-persian-analyzer.json

[[portuguese-analyzer]]
===== Portuguese Analyzer

The following example shows how to reimplement the `portuguese` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-portuguese-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-portuguese-analyzer.json

[[romanian-analyzer]]
===== Romanian Analyzer

The following example shows how to reimplement the `romanian` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-romanian-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-romanian-analyzer.json

[[russian-analyzer]]
===== Russian Analyzer

The following example shows how to reimplement the `russian` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-russian-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-russian-analyzer.json

[[sorani-analyzer]]
===== Sorani Analyzer

The following example shows how to reimplement the `sorani` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-sorani-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-sorani-analyzer.json

[[spanish-analyzer]]
===== Spanish Analyzer

The following example shows how to reimplement the `spanish` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-spanish-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-spanish-analyzer.json

[[swedish-analyzer]]
===== Swedish Analyzer

The following example shows how to reimplement the `swedish` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-swedish-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-swedish-analyzer.json

[[turkish-analyzer]]
===== Turkish Analyzer

The following example shows how to reimplement the `turkish` analyzer 
as a `custom` analyzer. You can omit the `keyword_marker` filter if you don't 
need to exclude words from stemming.

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-turkish-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-turkish-analyzer.json

[[thai-analyzer]]
===== Thai Analyzer

The following example shows how to reimplement the `thai` analyzer 
as a `custom` analyzer. 

[source,js]
--------------------------------------------------------------------------------
include::../../snippets/analysis/configure-thai-analyzer.json[]
--------------------------------------------------------------------------------
// SENSE: analysis/configure-thai-analyzer.json