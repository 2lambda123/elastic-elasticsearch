[[analysis-pattern-analyzer]]
=== Pattern Analyzer

The `pattern` analyzer uses a regular expression to separate text into terms and
wraps the <<analysis-lowercase-tokenfilter,`lowercase`>> and 
<<analysis-stop-tokenfilter,`stop`>> token filters. 

You can configure the following settings for a `pattern` analyzer:

[cols="<,<",options="header",]
|===================================================================
|Setting |Description
|`flags` |Regular expression flags. Flags should be pipe-separated, for example 
`"CASE_INSENSITIVE\|COMMENTS"`. See http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html#field_summary[Java
Pattern API] for more information about the flags you can specify.
|`lowercase` |Whether or not terms should be lowercased. Defaults to `true`.
|`pattern` |The regular expression pattern to use for tokenization. Defaults to `\W+`.
*IMPORTANT*: The regular expression should match the *token separators*,
not the tokens themselves.
|`stopwords` |A list of stopwords or the name of a predefined list. 
Defaults to `_none_`. See <<analysis-stop-tokenfilter>>
for the available predefined lists.
|===================================================================

[float]
==== Pattern Analyzer Examples

[source,js]
--------------------------------------------------
include::../../snippets/analysis/configure-whitespace-pattern-analyzer.json[]
--------------------------------------------------
// SENSE: analysis/configure-whitespace-pattern-analyzer.json

[source,js]
--------------------------------------------------
include::../../snippets/analysis/configure-nonword-pattern-analyzer.json[]
--------------------------------------------------
// SENSE: analysis/configure-nonword-pattern-analyzer.json

[source,js]
--------------------------------------------------
include::../../snippets/analysis/configure-camelcase-pattern-analyzer.json[]
--------------------------------------------------
// SENSE: analysis/configure-camelcase-pattern-analyzer.json

Let's break that regex down and take a closer look:

[source,js]
--------------------------------------------------

      ([^\\p{L}\\d]+)                 # Drop anything that isn't a letters or number
                                      # Detect the following boundaries:
    | (?<=\\D)(?=\\d)                 #   non-number followed by a number
    | (?<=\\d)(?=\\D)                 #   number followed by a non-number
    | (?<=[ \\p{L} && [^\\p{Lu}]])    #   lower case that is
      (?=\\p{Lu})                     #     followed by upper case
    | (?<=\\p{Lu})                    #   upper case that is 
      (?=\\p{Lu}                      #     followed by upper case
        [\\p{L}&&[^\\p{Lu}]]          #     or lower case
      )
--------------------------------------------------
