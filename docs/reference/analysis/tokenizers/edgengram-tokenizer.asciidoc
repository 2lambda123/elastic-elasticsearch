[[analysis-edgengram-tokenizer]]
=== Edge Ngram Tokenizer

The `edgeNgram` is an <<analysis-ngram-tokenizer,n-gram tokenizer>> that only 
keeps the n-grams that start at the beginning of a token. 

You can configure the following settings for an `edgeNgram` tokenizer:

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Description 
|`min_gram` |Minimum size of a single n-gram, in codepoints. Defaults to `1`.
|`max_gram` |Maximum size of a single n-gram, in codepoints. Defaults to `2`.
|`token_chars` | The types of characters to keep in the
tokens. The `edgeNgram` tokenizer splits on characters that don't belong to any
of these classes. Specified as an array of character classes. The supported
character classes are: `letter` (for example `a`, `b`, `ï` or `京`), 
`digit` (for example,  `3` or `7`),
`whitespace`  (for example `" "` or `"\n"`), 
`punctuation` (for example `!` or `"`), 
`symbol`     (for example `$` or `√`).
 Defaults to `[]` (Keep all characters).
|=======================================================================


[float]
==== Example

[source,js]
--------------------------------------------------
    curl -XPUT 'localhost:9200/test' -d '
    {
        "settings" : {
            "analysis" : {
                "analyzer" : {
                    "my_edge_ngram_analyzer" : {
                        "tokenizer" : "my_edge_ngram_tokenizer"
                    }
                },
                "tokenizer" : {
                    "my_edge_ngram_tokenizer" : {
                        "type" : "edgeNGram",
                        "min_gram" : "2",
                        "max_gram" : "5",
                        "token_chars": [ "letter", "digit" ]
                    }
                }
            }
        }
    }'

    curl 'localhost:9200/test/_analyze?pretty=1&analyzer=my_edge_ngram_analyzer' -d 'FC Schalke 04'
    # FC, Sc, Sch, Scha, Schal, 04
--------------------------------------------------

[float]
==== `side` deprecated

There used to be a `side` parameter up to `0.90.1` but it is now deprecated. In
order to emulate the behavior of `"side" : "BACK"` a
<<analysis-reverse-tokenfilter,`reverse` token filter>>  should be used together
with the <<analysis-edgengram-tokenfilter,`edgeNGram` token filter>>. The
`edgeNGram` filter must be enclosed in `reverse` filters like this:

[source,js]
--------------------------------------------------
    "filter" : ["reverse", "edgeNGram", "reverse"]
--------------------------------------------------

which essentially reverses the token, builds front `EdgeNGrams` and reverses
the ngram again. This has the same effect as the previous `"side" : "BACK"` setting.

