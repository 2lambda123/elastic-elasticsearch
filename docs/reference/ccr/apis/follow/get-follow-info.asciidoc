[role="xpack"]
[testenv="platinum"]
[[ccr-get-follow-info]]
=== Get follower info API
++++
<titleabbrev>Get follower info</titleabbrev>
++++

beta[]

Get follower info.

==== Description

This API returns information about all follower indices.

For each follower index that gets returned, the configured parameters
(e.g. follower index name, leader index name, replication options) and
the status (whether follower index is active or paused) is included.

==== Request

//////////////////////////

[source,js]
--------------------------------------------------
PUT /follower_index/_ccr/follow
{
  "remote_cluster" : "remote_cluster",
  "leader_index" : "leader_index"
}
--------------------------------------------------
// CONSOLE
// TESTSETUP
// TEST[setup:remote_cluster_and_leader_index]

[source,js]
--------------------------------------------------
POST /follower_index/_ccr/pause_follow
--------------------------------------------------
// CONSOLE
// TEARDOWN

//////////////////////////

[source,js]
--------------------------------------------------
GET /<index>/_ccr/info
--------------------------------------------------
// CONSOLE
// TEST[s/<index>/follower_index/]

==== Path Parameters
`index` ::
  (string) a comma-delimited list of follower index patterns

==== Results

This API returns the following information:

`follower_indices`::
  (array) an array of follower index statistics

The `indices` array consists of objects containing two fields:

`indices[].follower_index`::
  (string) the name of the follower index

`indices[].remote_cluster`::
  (string) the <modules-remote-clusters,remote cluster>> containing the leader
  index

`indices[].leader_cluster`::
  (string) the name of the index in the leader cluster being followed

`indices[].status`::
  (string) whether index following is `active` or `paused`

`indices[].parameters`::
  (object) an object encapsulating ccr replication related parameters

The `parameters` contains the following fields:

`indices[].parameters.max_read_request_operation_count`::
  (integer) the configured maximum number of operations to pull per read from the remote
  cluster

`indices[].parameters.max_outstanding_read_requests`::
  (long) the configured maximum number of outstanding reads requests from the remote
  cluster

`indices[].parameters.max_read_request_size`::
  (<<byte-units,byte value>>) the configured maximum size in bytes of per read of a batch
  of operations pulled from the remote cluster

`indices[].parameters.max_write_request_operation_count`::
  (integer) the configured maximum number of operations per bulk write request executed on
  the follower

`indices[].parameters.max_write_request_size`::
  (<<byte-units,byte value>>) the configured maximum total bytes of operations per bulk write request
  executed on the follower

`indices[].parameters.max_outstanding_write_requests`::
  (integer) the configured maximum number of outstanding write requests on the follower

`indices[].parameters.max_write_buffer_count`::
  (integer) th configurede maximum number of operations that can be queued for writing;
  when this limit is reached, reads from the remote cluster will be deferred
  until the number of queued operations goes below the limit

`indices[].parameters.max_write_buffer_size`::
  (<<byte-units,byte value>>) the configured maximum total bytes of operations that can be queued for
  writing; when this limit is reached, reads from the remote cluster will be
  deferred until the total bytes of queued operations goes below the limit

`indices[].parameters.max_retry_delay`::
  (<<time-units,time value>>) the configured maximum time to wait before retrying an
  operation that failed exceptionally; an exponential backoff strategy is
  employed when retrying

`indices[].parameters.read_poll_timeout`::
  (<<time-units,time value>>) the configured maximum time to wait for new operations on the
  remote cluster when the follower index is synchronized with the leader index;
  when the timeout has elapsed, the poll for operations will return to the
  follower so that it can update some statistics, and then the follower will
  immediately attempt to read from the leader again

==== Authorization

If the {es} {security-features} are enabled, you must have `monitor` cluster
privileges. For more information, see {stack-ov}/security-privileges.html[Security privileges].

==== Example

This example retrieves follower info:

[source,js]
--------------------------------------------------
GET /follower_index/_ccr/info
--------------------------------------------------
// CONSOLE

The API returns the following results:

[source,js]
--------------------------------------------------
{
    "follower_indices" : [
        {
            "follower_index" : "follower_index",
            "remote_cluster" : "remote_cluster",
            "leader_index" : "leader_index",
            "status" : "active",
            "parameters" : {
                "max_read_request_operation_count" : 5120,
                "max_read_request_size" : "32mb",
                "max_outstanding_read_requests" : 12,
                "max_write_request_operation_count" : 5120,
                "max_write_request_size" : "9223372036854775807b",
                "max_outstanding_write_requests" : 9,
                "max_write_buffer_count" : 2147483647,
                "max_write_buffer_size" : "512mb",
                "max_retry_delay" : "500ms",
                "read_poll_timeout" : "1m"
            }
        }
    ]
}
--------------------------------------------------
// TESTRESPONSE
