[role="xpack"]
[testenv="platinum"]
[[ccr-getting-started]]
=== Configure {ccr}
You configure {ccr} by manually creating specific follower indices or by automatically creating follower indices from auto-follow patterns. When you initiate replication, the follower index is created on the local cluster.
After the follower index is created, the <<ccr-remote-recovery, remote recovery>>
process copies all of the Lucene segment files from the remote cluster to the
local cluster.

To set up {ccr}:

. <<ccr-getting-started-security,Configure security roles>>
. <<ccr-getting-started-remote-cluster,Connect a local cluster to a remote cluster>>
. <<ccr-getting-started-leader-index,Create a leader index in a remote cluster>>
. <<ccr-enable-soft-deletes,Enable soft deletes on the leader index>>
. <<ccr-getting-started-follower-index,Create a follower index to replicate the leader index>>
. <<ccr-getting-started-auto-follow,Automatically create follower indices>>


[[ccr-getting-started-before-you-begin]]
==== Before you begin
. {stack-gs}/get-started-elastic-stack.html#install-elasticsearch[Install {es}]
  on your local and remote clusters.

. Obtain a   https://www.elastic.co/subscriptions[license] that includes the
{ccr} features. You can enable {ccr} features in {kib} through
{kibana-ref}/managing-licenses.html[License management].

[[ccr-getting-started-security]]
==== Configure security roles
The {ccr} features use cluster privileges and built-in roles to make it easier
to control which users have authority to manage {ccr}.

If the Elastic {security-features} are enabled in your local and remote
clusters, you need a user that has appropriate authority to perform the steps
in this tutorial.

By default, you can perform all steps in this tutorial by
using the built-in `elastic` user. However, you must <<get-started-built-in-users,set a password>> for this
user before proceeding

IMPORTANT: If you are performing these steps in a production environment, take
extra care because the `elastic` user has the `superuser` role and you could
inadvertently make significant changes.

Alternatively, you can assign the appropriate privileges to a user ID of your
choice. On the remote cluster that contains the leader index, a user must have
the `read_ccr` cluster privilege and `monitor` and `read` privileges on the
leader index.

[source,yml]
--------------------------------------------------
ccr_user:
  cluster:
    - read_ccr
  indices:
    - names: [ 'leader-index' ]
      privileges:
        - monitor
        - read
--------------------------------------------------

On the local cluster that contains the follower index, the same user will need
the `manage_ccr` cluster privilege and `monitor`, `read`, `write` and
`manage_follow_index` privileges on the follower index.

[source,yml]
--------------------------------------------------
ccr_user:
  cluster:
    - manage_ccr
  indices:
    - names: [ 'follower-index' ]
      privileges:
        - monitor
        - read
        - write
        - manage_follow_index
--------------------------------------------------

If you are managing
<<ccr-getting-started-remote-cluster,connecting to the remote cluster>> using
the cluster update settings API, you will also need a user with the `all`
cluster privilege.

[[ccr-getting-started-remote-cluster]]
==== Connect to a remote cluster

The {ccr} features require that you connect your local cluster to a
<<modules-remote-clusters,remote cluster>>. In this tutorial, you connect your
local cluster to a remote cluster with the cluster alias `leader`.

Add a {kibana-ref}/working-remote-clusters.html[remote cluster] in {kib}:

. Open a browser to access {kib} on your _local_ cluster.
. From the {kib} menu, select *Management -> Stack Management*.
. Under *Data*, select *Remote Clusters* to access the Remote Clusters
page.
. Choose *Add a remote cluster*.
. Enter `leader` as the name for the remote cluster.
. Enter an IP address or host name, followed by the transport port of the
remote cluster.
. Click *Save*.

[role="screenshot"]
image::images/remote-clusters.png["The Remote Clusters page in {kib}"]

[%collapsible]
.API example
====
Use the <<cluster-update-settings,cluster update settings API>> to add a remote cluster:

[source,console]
--------------------------------------------------
PUT /_cluster/settings
{
  "persistent" : {
    "cluster" : {
      "remote" : {
        "leader" : {
          "seeds" : [
            "127.0.0.1:9300" <1>
          ]
        }
      }
    }
  }
}
--------------------------------------------------
// TEST[setup:host]
// TEST[s/127.0.0.1:9300/\${transport_host}/]
<1> Specifies the hostname and transport port of a seed node in the remote
    cluster.

You can verify that the local cluster is successfully connected to the remote
cluster.

[source,console]
--------------------------------------------------
GET /_remote/info
--------------------------------------------------
// TEST[continued]

The API will respond by showing that the local cluster is connected to the
remote cluster.

[source,console-result]
--------------------------------------------------
{
  "leader" : {
    "seeds" : [
      "127.0.0.1:9300"
    ],
    "connected" : true, <1>
    "num_nodes_connected" : 1, <2>
    "max_connections_per_cluster" : 3,
    "initial_connect_timeout" : "30s",
    "skip_unavailable" : false,
    "mode" : "sniff"
  }
}
--------------------------------------------------
// TESTRESPONSE[s/127.0.0.1:9300/$body.leader.seeds.0/]
// TEST[s/"connected" : true/"connected" : $body.leader.connected/]
// TEST[s/"num_nodes_connected" : 1/"num_nodes_connected" : $body.leader.num_nodes_connected/]
<1> This shows the local cluster is connected to the remote cluster with cluster
    alias `leader`
<2> This shows the number of nodes in the remote cluster the local cluster is
    connected to.
====

[[ccr-getting-started-leader-index]]
==== Create a leader index
Create a leader index in your remote cluster using {kib}:

. Open a browser to access {kib} on your _remote_ cluster.
. From the {kib} menu, select *Management -> Dev Tools*.
. Copy the following example into the Console to create a leader index named
`server-metrics` in your remote cluster:
+
[%collapsible]
.Leader index example
====
[source,console]
--------------------------------------------------
PUT /server-metrics
{
  "settings" : {
    "index" : {
      "number_of_shards" : 1,
      "number_of_replicas" : 0
    }
  },
  "mappings" : {
    "properties" : {
      "@timestamp" : {
        "type" : "date"
      },
      "accept" : {
        "type" : "long"
      },
      "deny" : {
        "type" : "long"
      },
      "host" : {
        "type" : "keyword"
      },
      "response" : {
        "type" : "float"
      },
      "service" : {
        "type" : "keyword"
      },
      "total" : {
        "type" : "long"
      }
    }
  }
}
--------------------------------------------------
// TEST[continued]
====

[[ccr-enable-soft-deletes]]
==== Enable soft deletes on leader indices
<<ccr-leader-requirements,Soft deletes>> must be enabled for indices that you want to
use as leader indices. Soft deletes are enabled by default on new indices
created on or after {es} 7.0.0, so no further action is required if your
cluster is running {es} 7.0.0 or later.

include::{es-ref-dir}/ccr/index.asciidoc[tag=ccr-existing-indices-tag]

To enable soft deletes on indices created on versions of
{es} between 6.5.0 and 7.0.0, set <<ccr-index-soft-deletes,`index.soft_deletes.enabled`>> to `true`.

[[ccr-getting-started-follower-index]]
==== Create a follower index
When you create a {kibana-ref}/managing-cross-cluster-replication.html#_create_specific_follower_indices[follower index], you
must reference the
<<ccr-getting-started-remote-cluster,remote cluster>> and the
<<ccr-getting-started-leader-index,leader index>> that you created in the remote
cluster:

. Open a browser to access {kib} on your _local_ cluster.
. From the {kib} menu, click *Management -> Stack Management*.
. Under *Data*, select *Cross Cluster Replication*.
. Choose the *Follower indices* tab.
. Click *Create a follower index*.
  . Choose the remote cluster containing the index you want to replicate, which
  is `leader` if you are following the tutorial.
  . Enter the name of the leader index, which is `server-metrics` if you are
  following the tutorial.
  . Enter a name for your follower index, such as `server-metrics-follower`.
  . Click *Create* to create the follower index.

The follower index is initialized using the
<<ccr-remote-recovery, remote recovery>>
process, and the index status changes to *Paused*. When the
remote recovery process is complete, the index following begins and the status
changes to *Active*.

The remote recovery process transfers the existing Lucene segment files from
the leader to the follower.
When you index documents into your leader index, these
documents are replicated in the follower index.

[role="screenshot"]
image::images/ccr-follower-index.png["The Cross-Cluster Replication page in {kib}"]

[%collapsible]
.API example
====
Use the <<ccr-put-follow,create follower API>> to create follower indices.
When you create a follower index, you must reference the
<<ccr-getting-started-remote-cluster,remote cluster>> and the
<<ccr-getting-started-leader-index,leader index>> that you created in the
remote cluster.

When initiating the follower request, the response returns before the
<<ccr-remote-recovery, remote recovery>> process completes. To wait for the process
to complete, add the `wait_for_active_shards` parameter to your request.

[source,console]
--------------------------------------------------
PUT /server-metrics-follower/_ccr/follow?wait_for_active_shards=1
{
  "remote_cluster" : "leader",
  "leader_index" : "server-metrics"
}
--------------------------------------------------
// TEST[continued]

//////////////////////////

[source,console-result]
--------------------------------------------------
{
  "follow_index_created" : true,
  "follow_index_shards_acked" : true,
  "index_following_started" : true
}
--------------------------------------------------

//////////////////////////

Use the
<<ccr-get-follow-stats,get follower stats API>> to inspect the status of
replication

//////////////////////////

[source,console]
--------------------------------------------------
POST /server-metrics-follower/_ccr/pause_follow

POST /server-metrics-follower/_close

POST /server-metrics-follower/_ccr/unfollow
--------------------------------------------------
// TEST[continued]

//////////////////////////
====

[[ccr-getting-started-auto-follow]]
==== Automatically create follower indices
The <<ccr-auto-follow,auto-follow>> feature in {ccr} is useful for time series
use cases where you want to follow new indices that are periodically created in
the remote cluster, such as daily {beats} indices.

With an auto-follow pattern, you reference the
<<ccr-getting-started-remote-cluster,remote cluster>> connected to your
local cluster. You must also specify a collection of patterns that match the
indices you want to automatically follow.

// tag::ccr-create-auto-follow-pattern-tag[]
Create follower indices from an {kibana-ref}/managing-cross-cluster-replication.html#_create_follower_indices_from_an_auto_follow_pattern[auto-follow pattern]:

. Open a browser to access {kib} on your _remote_ cluster.
. From the {kib} menu, click *Management -> Stack Management*.
. Under *Data*, select *Cross Cluster Replication*.
. Choose the *Auto-follow patterns* tab.
. Click *Create an auto-follow pattern*.
  . Enter a name for the auto-follow pattern. For this tutorial, enter `beats`
  as the name.
  . Choose the remote cluster containing the index you want to replicate, which
  is `leader` if you are following the tutorial.
  . Enter one or more index patterns that identify the indices you want to
  replicate from the remote cluster. For this tutorial, type
  `metricbeat-*,packetbeat-*` as the index pattern and then press *Enter* or
  *Return* on your keyboard.
  +
  As new indices matching these patterns are
  created, they are replicated to follower indices on the local cluster.
  . Enter *copy-* in the Prefix field, and then click *Create*.

[role="screenshot"]
image::images/auto-follow-patterns.png["The Auto-follow patterns page in {kib}"]
// end::ccr-create-auto-follow-pattern-tag[]

[%collapsible]
.API example
====
Use the <<ccr-put-auto-follow-pattern,create auto-follow pattern API>> to
configure auto-follow patterns.

[source,console]
--------------------------------------------------
PUT /_ccr/auto_follow/beats
{
  "remote_cluster" : "leader",
  "leader_index_patterns" :
  [
    "metricbeat-*", <1>
    "packetbeat-*" <2>
  ],
  "follow_index_pattern" : "{{leader_index}}-copy" <3>
}
--------------------------------------------------
// TEST[continued]
<1> Automatically follow new {metricbeat} indices.
<2> Automatically follow new {packetbeat} indices.
<3> The name of the follower index is derived from the name of the leader index
    by adding the suffix `-copy` to the name of the leader index.

//////////////////////////

[source,console-result]
--------------------------------------------------
{
  "acknowledged" : true
}
--------------------------------------------------

//////////////////////////

//////////////////////////

[source,console]
--------------------------------------------------
DELETE /_ccr/auto_follow/beats
--------------------------------------------------
// TEST[continued]

//////////////////////////
====
