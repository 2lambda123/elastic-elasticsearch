[[mapping-types]]
== Field data types [[_core_datatypes]]

Each field has a _field data type_, or _field type_. This type indicates the
kind of data the field contains, such as strings or boolean values, and its
intended use. For example, you can index strings to both `text` and `keyword`
fields. However, `text` field values are <<analysis,analyzed>> for full-text
search while `keyword` strings are left as-is for filtering and sorting.

Field types are grouped by _family_. Types in the same family behave similarly
and can be used interchangeably in your application. For example, the `keyword`
family consists of the `keyword`, `constant_keyword`, and `wildcard` field
types. In most cases, the type family is the same as the field type. For
example, the `boolean` type family consists of one field type: `boolean`.

You can retrieve a field's type family using the <<search-field-caps,field
capabilities API>>.

The following sections organize the available field types based on their
intended use. Except where noted, the type family is the same as the field type.

<<binary,`binary`>>::
Binary value encoded as a {wikipedia}/Base64[Base64] string.

<<boolean,`boolean`>>::
`true` or `false` value. Also accepts the `"true"` or `"false"` string
equivalents.

<<ip,`ip`>>::
IPv4 or IPv6 address.


[discrete]
[[date-field-types]]
==== Dates

<<date_nanos,`date_nanos`>>::
Date with a nanosecond resolution.

<<date,`date`>>::
Date with a millisecond resolution.


[discrete]
[[full-text-field-types]]
==== Full-text search

<<text,`text`>>::
<<analysis,Analyzed>> string used for full-text searches.

{plugins}/mapper-annotated-text.html[`annotated_text`]::
Used for text containing special markup. Often used for identifying named
entities.

<<completion-suggester,`completion`>>::
Used for query auto-completion using <<search-suggesters,suggesters>>.

<<search-as-you-type,`search_as_you_type`>>::
Used for query auto-completion without suggesters.

<<dense-vector,`dense_vector`>>::
Dense vectors of float values. Often used for document scoring.

{plugins}/mapper-murmur3.html[`murmur3`]::
Computes and stores a hash of a provided value.

<<percolator,`percolator`>>::
Stores queries written in <<query-dsl,Query DSL>>. Often used to find queries
that match a specific set of documents.

<<rank-feature,`rank_feature`>>::
Numeric value used to boost specific search results.

<<rank-features,`rank_features`>>::
Multiple numeric values used to boost specific search results.

<<token-count,`token_count`>>::
Token count for a `text` field.


[discrete]
[[keyword-field-types]]
==== Keywords

These field types are in the `keyword` type family.

<<keyword,`keyword`>>::
String used for filtering, sorting, aggregations, and exact matches.

<<constant-keyword,`constant_keyword`>>::
Used when all documents have a `keyword` field with the same value.

<<wildcard,`wildcard`>>::
Optimizes `keyword` field values for grep-like wildcard queries.


[discrete]
[[numeric-field-types]]
==== Numbers

<<number,`long`>>::
Signed 64-bit integer with a minimum value of +-2^63^+ and a maximum value of
+2^63^-1+.

<<number,`integer`>>::
Signed 32-bit integer with a minimum value of +-2^31^+ and a maximum value of
+2^31^-1+.

<<number,`short`>>::
Signed 16-bit integer with a minimum value of +-32,768+ and a maximum value of
+32,767+.

<<number,`byte`>>::
Signed 8-bit integer with a minimum value of +-128+ and a maximum value of
+127+.

<<number,`double`>>::
Double-precision 64-bit IEEE 754 floating point number, restricted to finite
values.

<<number,`float`>>::
Single-precision 32-bit IEEE 754 floating point number, restricted to finite
values.

<<number,`half_float`>>::
Half-precision 16-bit IEEE 754 floating point number, restricted to finite
values.

<<number,`scaled_float`>>::
Floating point number that is backed by a `long`, scaled by a fixed `double`
scaling factor.

<<histogram,`histogram`>>::
Pre-aggregated numerical values for
<<search-aggregations-metrics-percentile-aggregation,percentiles aggregations>>.


[discrete]
[[object-field-types]]
==== Objects and relational data

<<alias,`alias`>>::
Used to create an alias for an existing field.

<<flattened,`flattened`>>::
Indexes an entire JSON object as a single field value.

<<parent-join,`join`>>::
Creates parent-child relationship between documents in the same index.

<<nested,`nested`>>::
Array of JSON objects.

<<object,`object`>>::
Single JSON object.


[discrete]
[[range-field-types]]
==== Ranges

<<range,`date_range`>>::
Range of date values.

<<range,`ip_range`>>::
Range of IPv4 or IPv6 (or mixed) addresses.

<<range,`long_range`>>::
Range of signed 64-bit integers with a minimum value of +-2^63^+ and maximum
of +2^63^-1+.

<<range,`integer_range`>>::
Range of signed 32-bit integers with a minimum value of +-2^31^+ and maximum
of +2^31^-1+.

<<range,`double_range`>>::
Range of double-precision 64-bit IEEE 754 floating point values.

<<range,`float_range`>>::
Range of single-precision 32-bit IEEE 754 floating point values.


[discrete]
[[spatial_datatypes]]
==== Spatial data

<<geo-point,`geo_point`>>::
Latitudinal and longitudinal points.

<<geo-shape,`geo_shape`>>::
Complex shapes, such as polygons.

<<point,`point`>>::
Arbitrary cartesian points.

<<shape,`shape`>>::
Arbitrary cartesian geometries.


[discrete]
[[types-array-handling]]
=== Arrays
In {es}, arrays do not require a dedicated field data type. Any field can contain
zero or more values by default, however, all values in the array must be of the
same field type. See <<array>>.

[discrete]
=== Multi-fields

It is often useful to index the same field in different ways for different
purposes. For instance, a `string` field could be mapped as
a `text` field for full-text search, and as a `keyword` field for
sorting or aggregations.  Alternatively, you could index a text field with
the <<analysis-standard-analyzer,`standard` analyzer>>, the
<<english-analyzer,`english`>> analyzer, and the
<<french-analyzer,`french` analyzer>>.

This is the purpose of _multi-fields_. Most field types support multi-fields
via the <<multi-fields>> parameter.

include::types/alias.asciidoc[]

include::types/array.asciidoc[]

include::types/binary.asciidoc[]

include::types/boolean.asciidoc[]

include::types/date.asciidoc[]

include::types/date_nanos.asciidoc[]

include::types/dense-vector.asciidoc[]

include::types/histogram.asciidoc[]

include::types/flattened.asciidoc[]

include::types/geo-point.asciidoc[]

include::types/geo-shape.asciidoc[]

include::types/ip.asciidoc[]

include::types/parent-join.asciidoc[]

include::types/keyword.asciidoc[]

include::types/nested.asciidoc[]

include::types/numeric.asciidoc[]

include::types/object.asciidoc[]

include::types/percolator.asciidoc[]

include::types/point.asciidoc[]

include::types/range.asciidoc[]

include::types/rank-feature.asciidoc[]

include::types/rank-features.asciidoc[]

include::types/search-as-you-type.asciidoc[]

include::types/text.asciidoc[]

include::types/token-count.asciidoc[]

include::types/shape.asciidoc[]

include::types/constant-keyword.asciidoc[]

include::types/wildcard.asciidoc[]
