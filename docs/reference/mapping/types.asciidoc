[[mapping-types]]
== Field data types [[_core_datatypes]]

Each field has a _field data type_, or _field type_. This type indicates the
kind of data the field contains, such as strings or boolean values, and its
intended use. For example, you can index strings to both `text` and `keyword`
fields. However, `text` field values are <<analysis,analyzed>> for full-text
search while `keyword` strings are left as-is for filtering and sorting.

Field types are grouped by _family_. Types in the same family support the same
search functionality but may have different space usage or performance
characteristics.

Currently, the only type family is `keyword`, which consists of the `keyword`,
`constant_keyword`, and `wildcard` field types. Other type families have only a
single field type. For example, the `boolean` type family consists of one field
type: `boolean`.

[discrete]
[[_core_datatypes]]
==== Core types

<<binary>>::          `binary`
<<boolean>>::         `boolean`
keyword::             <<keyword,`keyword`>>,
                      <<constant-keyword,`constant_keyword`>>, and
                      <<wildcard,`wildcard`>>
<<number,Numbers>>::  `long`, `integer`, `short`, `byte`, `double`, `float`,
                      `half_float`, `scaled_float`
Dates::               <<date,`date`>>, <<date_nanos,`date_nanos`>>
<<alias,Alias>>::     `alias`. Defines an alias to an existing field.


[discrete]
[[object-types]]
==== Objects and relational types

<<object>>::      `object` for single JSON objects
<<flattened>>::   `flattened`. Allows an entire JSON object to be indexed as a
                  single field.
<<nested>>::      `nested` for arrays of JSON objects
<<parent-join>>:: `join`. Defines parent/child relation for documents within the
                  same index


[discrete]
[[structured-data-types]]
==== Structured data types

<<range>>::      `integer_range`, `float_range`, `long_range`, `double_range`,
                `date_range`, `ip_range`
<<ip>>::        `ip` for IPv4 and IPv6 addresses
{plugins}/mapper-murmur3.html[`mapper-murmur3`]:: `murmur3` to compute hashes of
values at index-time and store them in the index


[discrete]
[[aggregated-data-types]]
==== Aggregated data types

<<histogram>>:: `histogram` for pre-aggregated numerical values for percentiles
                aggregations.


[discrete]
[[text-search--types]]
==== Text search types

<<text,Text>>::   `text` for analyzed, unstructured content
{plugins}/mapper-annotated-text.html[`mapper-annotated-text`]:: `annotated-text` to index text containing special markup (typically used for identifying named entities)
<<completion-suggester,Completion>>:: `completion` to provide auto-complete suggestions
<<search-as-you-type>>:: `search_as_you_type`. A `text`-like field optimized for
queries to implement as-you-type completion
<<token-count>>::        `token_count` to count the number of tokens in a string


[discrete]
[[document-ranking-types]]
==== Document ranking types

<<dense-vector>>::   `dense_vector`. Records dense vectors of float values.
<<rank-feature>>::   `rank_feature`. Records a numeric feature to boost hits at
                      query time.
<<rank-features>>::  `rank_features`. Records numeric features to boost hits at
                      query time.


[discrete]
[[spatial_datatypes]]
==== Spatial data types

<<geo-point>>::     `geo_point` for lat/lon points
<<geo-shape>>::     `geo_shape` for complex shapes like polygons
<<point>>::         `point` for arbitrary cartesian points.
<<shape>>::         `shape` for arbitrary cartesian geometries.


[discrete]
[[other-types]]
==== Other
<<percolator>>::    `percolator`. Accepts queries from the <<query-dsl,Query
                    DSL>>.


[discrete]
[[types-array-handling]]
=== Arrays
In {es}, arrays do not require a dedicated field data type. Any field can contain
zero or more values by default, however, all values in the array must be of the
same field type. See <<array>>.

[discrete]
=== Multi-fields

It is often useful to index the same field in different ways for different
purposes. For instance, a `string` field could be mapped as
a `text` field for full-text search, and as a `keyword` field for
sorting or aggregations.  Alternatively, you could index a text field with
the <<analysis-standard-analyzer,`standard` analyzer>>, the
<<english-analyzer,`english`>> analyzer, and the
<<french-analyzer,`french` analyzer>>.

This is the purpose of _multi-fields_. Most field types support multi-fields
via the <<multi-fields>> parameter.

include::types/alias.asciidoc[]

include::types/array.asciidoc[]

include::types/binary.asciidoc[]

include::types/boolean.asciidoc[]

include::types/date.asciidoc[]

include::types/date_nanos.asciidoc[]

include::types/dense-vector.asciidoc[]

include::types/histogram.asciidoc[]

include::types/flattened.asciidoc[]

include::types/geo-point.asciidoc[]

include::types/geo-shape.asciidoc[]

include::types/ip.asciidoc[]

include::types/parent-join.asciidoc[]

include::types/keyword.asciidoc[]

include::types/nested.asciidoc[]

include::types/numeric.asciidoc[]

include::types/object.asciidoc[]

include::types/percolator.asciidoc[]

include::types/point.asciidoc[]

include::types/range.asciidoc[]

include::types/rank-feature.asciidoc[]

include::types/rank-features.asciidoc[]

include::types/search-as-you-type.asciidoc[]

include::types/text.asciidoc[]

include::types/token-count.asciidoc[]

include::types/shape.asciidoc[]

include::types/constant-keyword.asciidoc[]

include::types/wildcard.asciidoc[]
