[[geo-shape]]
=== Geo-Shape datatype

The `geo_shape` datatype facilitates the indexing of and searching
with arbitrary geo shapes such as rectangles and polygons. It should be
used when either the data being indexed or the queries being executed
contain shapes other than just points.

You can query documents using this type using
<<query-dsl-geo-shape-query,geo_shape Query>>.

[[geo-shape-mapping-options]]
[float]
==== Mapping Options

The geo_shape mapping maps geo_json geometry objects to the geo_shape
type. To enable it, users must explicitly map fields to the geo_shape
type.

[cols="<,<,<",options="header",]
|=======================================================================
|Option |Description| Default

|`orientation` |Optionally define how to interpret vertex order for
polygons / multipolygons.  This parameter defines one of two coordinate
system rules (Right-hand or Left-hand) each of which can be specified in three
different ways. 1. Right-hand rule: `right`, `ccw`, `counterclockwise`,
2. Left-hand rule: `left`, `cw`, `clockwise`. The default orientation
(`counterclockwise`) complies with the OGC standard which defines
outer ring vertices in counterclockwise order with inner ring(s) vertices (holes)
in clockwise order. Setting this parameter in the geo_shape mapping explicitly
sets vertex order for the coordinate list of a geo_shape field but can be
overridden in each individual GeoJSON or WKT document.
| `ccw`

|`ignore_malformed` |If true, malformed GeoJSON or WKT shapes are ignored. If
false (default), malformed GeoJSON and WKT shapes throw an exception and reject the
entire document.
| `false`

|`ignore_z_value` |If `true` (default) three dimension points will be accepted (stored in source)
but only latitude and longitude values will be indexed; the third dimension is ignored. If `false`,
geo-points containing any more than latitude and longitude (two dimensions) values throw an exception
and reject the whole document.
| `true`


|=======================================================================


[[geoshape-indexing-approach]]
[float]
==== Indexing approach and Accuracy
GeoShape types are indexed by decomposing the shape into a triangular mesh and
indexing each triangle as a 7 dimension point in a BKD tree. This provides
near perfect spatial resolution (down to 1e-7 decimal degree precision) since all
spatial relations are computed using an encoded vector representation of the
original shape. Performance of the tessellator primarily depends on the number of
vertices that define the polygon/multi-polygon.

[float]
===== Example

[source,js]
--------------------------------------------------
PUT /example
{
    "mappings": {
        "doc": {
            "properties": {
                "location": {
                    "type": "geo_shape"
                }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE
// TESTSETUP

This mapping definition maps the location field to the geo_shape
type with approximately 1e-7 decimal degree spatial precision.

[[input-structure]]
[float]
==== Input Structure

Shapes can be represented using either the http://www.geojson.org[GeoJSON]
or http://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]
(WKT) format. The following table provides a mapping of GeoJSON and WKT
to Elasticsearch types:

[cols="<,<,<,<",options="header",]
|=======================================================================
|GeoJSON Type |WKT Type |Elasticsearch Type |Description

|`Point` |`POINT` |`point` |A single geographic coordinate. Note: Elasticsearch uses WGS-84 coordinates only.
|`LineString` |`LINESTRING` |`linestring` |An arbitrary line given two or more points.
|`Polygon` |`POLYGON` |`polygon` |A _closed_ polygon whose first and last point
must match, thus requiring `n + 1` vertices to create an `n`-sided
polygon and a minimum of `4` vertices.
|`MultiPoint` |`MULTIPOINT` |`multipoint` |An array of unconnected, but likely related
points.
|`MultiLineString` |`MULTILINESTRING` |`multilinestring` |An array of separate linestrings.
|`MultiPolygon` |`MULTIPOLYGON` |`multipolygon` |An array of separate polygons.
|`GeometryCollection` |`GEOMETRYCOLLECTION` |`geometrycollection` | A GeoJSON shape similar to the
`multi*` shapes except that multiple types can coexist (e.g., a Point
and a LineString).
|`N/A` |`BBOX` |`envelope` |A bounding rectangle, or envelope, specified by
specifying only the top left and bottom right points.
|`N/A` |`N/A` |`circle` |A circle specified by a center point and radius with
units, which default to `METERS`.
|=======================================================================

[NOTE]
=============================================
For all types, both the inner `type` and `coordinates` fields are
required.

In GeoJSON and WKT, and therefore Elasticsearch, the correct *coordinate
order is longitude, latitude (X, Y)* within coordinate arrays. This
differs from many Geospatial APIs (e.g., Google Maps) that generally
use the colloquial latitude, longitude (Y, X).
=============================================

[[point]]
[float]
===== http://geojson.org/geojson-spec.html#id2[Point]

A point is a single geographic coordinate, such as the location of a
building or the current position given by a smartphone's Geolocation
API. The following is an example of a point in GeoJSON.

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "point",
        "coordinates" : [-77.03653, 38.897676]
    }
}
--------------------------------------------------
// CONSOLE

The following is an example of a point in WKT:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "POINT (-77.03653 38.897676)"
}
--------------------------------------------------
// CONSOLE

[float]
===== http://geojson.org/geojson-spec.html#id3[LineString]

A `linestring` defined by an array of two or more positions. By
specifying only two points, the `linestring` will represent a straight
line.  Specifying more than two points creates an arbitrary path. The
following is an example of a LineString in GeoJSON.

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "linestring",
        "coordinates" : [[-77.03653, 38.897676], [-77.009051, 38.889939]]
    }
}
--------------------------------------------------
// CONSOLE

The following is an example of a LineString in WKT:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "LINESTRING (-77.03653 38.897676, -77.009051 38.889939)"
}
--------------------------------------------------
// CONSOLE

The above `linestring` would draw a straight line starting at the White
House to the US Capitol Building.

[float]
===== http://www.geojson.org/geojson-spec.html#id4[Polygon]

A polygon is defined by a list of a list of points. The first and last
points in each (outer) list must be the same (the polygon must be
closed). The following is an example of a Polygon in GeoJSON.

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "polygon",
        "coordinates" : [
            [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE

The following is an example of a Polygon in WKT:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0))"
}
--------------------------------------------------
// CONSOLE

The first array represents the outer boundary of the polygon, the other
arrays represent the interior shapes ("holes"). The following is a GeoJSON example
of a polygon with a hole:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "polygon",
        "coordinates" : [
            [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],
            [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE

The following is an example of a Polygon with a hole in WKT:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2))"
}
--------------------------------------------------
// CONSOLE

*IMPORTANT NOTE:* WKT does not enforce a specific order for vertices thus
ambiguous polygons around the dateline and poles are possible.
https://tools.ietf.org/html/rfc7946#section-3.1.6[GeoJSON] mandates that the
outer polygon must be counterclockwise and interior shapes must be clockwise,
which agrees with the Open Geospatial Consortium (OGC)
http://www.opengeospatial.org/standards/sfa[Simple Feature Access]
specification for vertex ordering.

Elasticsearch accepts both clockwise and counterclockwise polygons if they
appear not to cross the dateline (i.e. they cross less than 180° of longitude),
but for polygons that do cross the dateline (or for other polygons wider than
180°) Elasticsearch requires the vertex ordering to comply with the OGC and
GeoJSON specifications. Otherwise, an unintended polygon may be created and
unexpected query/filter results will be returned.

The following provides an example of an ambiguous polygon.  Elasticsearch will
apply the GeoJSON standard to eliminate ambiguity resulting in a polygon that
crosses the dateline.

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "polygon",
        "coordinates" : [
            [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ],
            [ [178.2, 8.2], [-178.8, 8.2], [-180.8, -8.8], [178.2, 8.8] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE
// TEST[catch:/mapper_parsing_exception/]

An `orientation` parameter can be defined when setting the geo_shape mapping (see <<geo-shape-mapping-options>>). This will define vertex
order for the coordinate list on the mapped geo_shape field. It can also be overridden on each document.  The following is an example for
overriding the orientation on a document:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "polygon",
        "orientation" : "clockwise",
        "coordinates" : [
            [ [100.0, 0.0], [100.0, 1.0], [101.0, 1.0], [101.0, 0.0], [100.0, 0.0] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE

[float]
===== http://www.geojson.org/geojson-spec.html#id5[MultiPoint]

The following is an example of a list of geojson points:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "multipoint",
        "coordinates" : [
            [102.0, 2.0], [103.0, 2.0]
        ]
    }
}
--------------------------------------------------
// CONSOLE

The following is an example of a list of WKT points:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "MULTIPOINT (102.0 2.0, 103.0 2.0)"
}
--------------------------------------------------
// CONSOLE

[float]
===== http://www.geojson.org/geojson-spec.html#id6[MultiLineString]

The following is an example of a list of geojson linestrings:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "multilinestring",
        "coordinates" : [
            [ [102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0] ],
            [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ],
            [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE

The following is an example of a list of WKT linestrings:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "MULTILINESTRING ((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0), (100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8))"
}
--------------------------------------------------
// CONSOLE

[float]
===== http://www.geojson.org/geojson-spec.html#id7[MultiPolygon]

The following is an example of a list of geojson polygons (second polygon contains a hole):

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "multipolygon",
        "coordinates" : [
            [ [[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]] ],
            [ [[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],
              [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE

The following is an example of a list of WKT polygons (second polygon contains a hole):

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "MULTIPOLYGON (((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0, 102.0 2.0)), ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2)))"
}
--------------------------------------------------
// CONSOLE

[float]
===== http://geojson.org/geojson-spec.html#geometrycollection[Geometry Collection]

The following is an example of a collection of geojson geometry objects:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type": "geometrycollection",
        "geometries": [
            {
                "type": "point",
                "coordinates": [100.0, 0.0]
            },
            {
                "type": "linestring",
                "coordinates": [ [101.0, 0.0], [102.0, 1.0] ]
            }
        ]
    }
}
--------------------------------------------------
// CONSOLE

The following is an example of a collection of WKT geometry objects:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "GEOMETRYCOLLECTION (POINT (100.0 0.0), LINESTRING (101.0 0.0, 102.0 1.0))"
}
--------------------------------------------------
// CONSOLE


[float]
===== Envelope

Elasticsearch supports an `envelope` type, which consists of coordinates
for upper left and lower right points of the shape to represent a
bounding rectangle in the format [[minLon, maxLat],[maxLon, minLat]]:

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "envelope",
        "coordinates" : [ [100.0, 1.0], [101.0, 0.0] ]
    }
}
--------------------------------------------------
// CONSOLE

The following is an example of an envelope using the WKT BBOX format:

*NOTE:* WKT specification expects the following order: minLon, maxLon, maxLat, minLat.

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "BBOX (100.0, 102.0, 2.0, 0.0)"
}
--------------------------------------------------
// CONSOLE

[float]
==== Sorting and Retrieving index Shapes

Due to the complex input structure and index representation of shapes,
it is not currently possible to sort shapes or retrieve their fields
directly. The geo_shape value is only retrievable through the `_source`
field.
