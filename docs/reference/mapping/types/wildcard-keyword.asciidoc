[role="xpack"]
[testenv="basic"]
[[wildcard-keyword]]
=== Wildcard keyword datatype
++++
<titleabbrev>Wildcard keyword</titleabbrev>
++++

A `wildcard_keyword` field stores values optimised for wildcard queries.
Wildcard queries are possible on other field types but suffer from constraints:
* `text` fields limit matching of any wildcard expressions to individual tokens rather than the original whole value held in a field
* `keyword` fields are untokenized but slow at performing wildcard queries (especially patterns with leading wildcards).

Internally the `wildcard_keyword` field indexes the whole field value using ngrams and stores the full string in compressed chunks.
The index is used as a rough filter to cut down the number of values that are then checked by retrieving and checking the full values from the compressed store.
Storage costs are typically lower than those of `keyword` fields

You index and search a wildcard field as follows

[source,console]
--------------------------------------------------
PUT my_index
{
  "mappings": {
    "properties": {
      "my_wildcard": {
        "type": "wildcard_keyword"
      }
    }
  }
}

PUT my_index/_doc/1
{
  "my_wildcard" : "This string can be quite lengthy"
}

GET my_index/_doc/_search
{
  "query": {
      "wildcard" : "*quite*lengthy"
  }
}


--------------------------------------------------


==== Limitations

* `wildcard_keyword` fields are untokenized like keyword fields, so do not support queries that rely on word positions such as phrase queries.
* `wildcard_keyword` fields cannot be used as a value source in aggregations such as the `terms` aggregation.

