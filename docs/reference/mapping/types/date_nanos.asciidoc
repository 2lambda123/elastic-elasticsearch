[[date_nanos]]
=== date_nanos datatype

This datatype is an addition to the `date` datatype. However there is an
important distinction between the two. The existing `date` datatype stores
dates in millisecond resolution. The `date_nanos` data type stores dates
in nanosecond resolution, which limits its range of dates from roughly
1677 to 2262, as dates are still stored as a long representing nanoseconds
since the epoch.

Queries on nanoseconds are internally converted to range queries on this long
representation, and the result of aggregations and stored fields is converted
back to a string depending on the date format that is associated with the field.

Date formats can be customised, but if no `format` is specified then it uses
the default:

    "strict_date_optional_time||epoch_millis"

This means that it will accept dates with optional timestamps, which conform
to the formats supported by
<<strict-date-time,`strict_date_optional_time`>> including up to nine second
fractionals or milliseconds-since-the-epoch (thus losing precision on the
nano second part).

For instance:

[source,js]
--------------------------------------------------
PUT my_index?include_type_name=true
{
  "mappings": {
    "_doc": {
      "properties": {
        "date": {
          "type": "date_nanos" <1>
        }
      }
    }
  }
}

PUT my_index/_doc/1
{ "date": "2015-01-01" } <2>

PUT my_index/_doc/2
{ "date": "2015-01-01T12:10:30.123456789Z" } <3>

PUT my_index/_doc/3
{ "date": 1420070400 } <4>

GET my_index/_search
{
  "sort": { "date": "asc"} <5>
}
--------------------------------------------------
// CONSOLE
<1> The `date` field uses the default `format`.
<2> This document uses a plain date.
<3> This document includes a time.
<4> This document uses milliseconds-since-the-epoch.
<5> Note that the `sort` values that are returned are all in
nanoseconds-since-the-epoch.

You can also specify multiple date formats separated by `||`. The
same mapping parameters than with the `date` field can be used.

[[date-nanos-limitations]]
==== Limitations

There are a couple of limitations when using the `date_nanos` data type.

Aggregations and scripts are still on millisecond resolution, even when
using a `date_nanos` field.

