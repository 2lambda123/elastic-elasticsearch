[[null-value]]
=== `null_value`

A `null` value cannot be indexed or searched.  When a field is set to `null`,
(or an empty array or an array of `null` values)  it is treated as though that
field has no values.

The `null_value` parameter allows you to replace explicit `null` values with
the specified value so that it can be indexed and searched.  For instance:

[source,js]
--------------------------------------------------
PUT my_index
{
  "mappings": {
    "my_type": {
      "properties": {
        "status_code": {
          "type":       "keyword",
          "null_value": "NULL" <1>
        }
      }
    }
  }
}

PUT my_index/my_type/1
{
  "status_code": null
}

PUT my_index/my_type/2
{
  "status_code": [] <2>
}

GET my_index/_search
{
  "query": {
    "term": {
      "status_code": "NULL" <3>
    }
  }
}
--------------------------------------------------
// CONSOLE
<1> Replace explicit `null` values with the term `NULL`.
<2> An empty array does not contain an explicit `null`, and so won't be replaced with the `null_value`.
<3> A query for `NULL` returns document 1, but not document 2.

IMPORTANT: The `null_value` needs to be the same datatype as the field.  For
instance, a `long` field cannot have a string `null_value`.

`null_value` is not supported by all field data types. Here is a list of field supporting `null_value`

[float]
=== Core datatypes

<<boolean>>::   `boolean`
<<date>>::      `date`
<<keyword>>::   `keyword`
<<number>>::    `long`, `integer`, `short`, `byte`, `double`, `float`
<<range>>::     `integer_range`, `float_range`, `long_range`, `double_range`, `date_range`

[float]
=== Specialised datatypes

<<ip>>::            `ip` for IPv4 and IPv6 addresses
<<token-count>>::   `token_count` to count the number of tokens in a string

include::../types/boolean.asciidoc[]

include::../types/date.asciidoc[]

include::../types/keyword.asciidoc[]

include::../types/numeric.asciidoc[]

include::../types/range.asciidoc[]

include::../types/ip.asciidoc[]

include::../types/token-count.asciidoc[]
