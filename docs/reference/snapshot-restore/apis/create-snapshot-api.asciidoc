[[create-snapshot-api]]
=== Create index snapshot API
++++
<titleabbrev>Create index snapshot</titleabbrev>
++++

Takes a <<snapshot-restore,snapshot>> of a cluster or specified data streams and
indices.

////
[source,console]
-----------------------------------
PUT /_snapshot/my_backup
{
  "type": "fs",
  "settings": {
    "location": "my_backup_location"
  }
}
-----------------------------------
// TESTSETUP
////

[source,console]
-----------------------------------
PUT /_snapshot/my_repository/my_snapshot
-----------------------------------

[[create-snapshot-api-request]]
==== {api-request-title}

`PUT /_snapshot/<repository>/<snapshot>`

`POST /_snapshot/<repository>/<snapshot>`

[[create-snapshot-api-desc]]
==== {api-description-title}

You can use the create snapshot API to create a <<snapshot-restore,snapshot>>, a
backup taken from a running {es} cluster.

By default, a snapshot includes all data streams and open indices in the
cluster, as well as the cluster state.  You can change this behavior by
specifying a list of data streams and indices to back up in the body of the
snapshot request.

NOTE: You must register a snapshot before performing snapshot and restore operations. Use the <<put-snapshot-repo-api,put snapshot repository API>> to register new repositories and update existing ones.

The snapshot process is incremental. When creating a  snapshot, {es} analyzes the list of files that are already stored in the repository and copies only files that were created or changed since the last snapshot. This process allows multiple snapshots to be preserved in the repository in a compact form.

The snapshot process is executed in non-blocking fashion, so all indexing and searching operations can run concurrently against the data stream or index that {es} is snapshotting. Only one snapshot process can run in the cluster at any time.

A snapshot represents a point-in-time view of the moment when the snapshot was created. No records that were added to a data stream or index after the snapshot process started will be present in the snapshot.

For primary shards that have not been started and are not currently relocating, the snapshot process starts immediately. If shards are in the process of starting or relocating, {es} waits for these processes to complete before taking a snapshot.

IMPORTANT: While a snapshot of a particular shard is being created, this shard cannot be moved to another node. Relocating a shard during the snapshot process can interfere with rebalancing and allocation filtering. {es} can move a shard to another node (according to the current allocation filtering settings and rebalancing algorithm) only after the snapshot process completes.

Besides creating a copy of each data stream and index, the snapshot process can also store global cluster metadata, including persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.

[[create-snapshot-api-path-params]]
==== {api-path-parms-title}

`<repository>`::
(Required, string)
Name of the repository to create a snapshot in.

`<snapshot-name>`::
(Required, string)
Name of the snapshot to create. This name must be unique in the snapshot repository.

`wait_for_completion`::
(Optional, boolean)
Specifies whether the request returns immediately after snapshot initialization (default), or wait for snapshot completion. Defaults to `false`.
+
NOTE: During snapshot initialization, information about all
previous snapshots is loaded into memory. In large repositories, this load time can cause this command to take several seconds (or even minutes) to return, even if the `wait_for_completion` parameter is set to `false`.

[[create-snapshot-api-query-params]]
==== {api-query-parms-title}

`indices`::
(Optional, string)
A list of indices to include in the snapshot. This parameter supports <<multi-index,multi index syntax>>, although the options that control the behavior of multi index syntax
must be supplied in the body of the request, rather than as request parameters.

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]

`include_global_state`::
(Optional, boolean)
If `false`, this parameter prevents the cluster global state from being stored as part of the snapshot. Defaults to `false`.
+
If `true`, the snapshot's persistent settings, index templates, ingest
pipelines, and {ilm-init} policies are restored into the current cluster. This
overwrites any existing cluster settings, templates, pipelines and {ilm-init}
policies whose names match those in the snapshot.
+
IMPORTANT: By default, the entire snapshot will fail if one or more indices participating in the snapshot do not have all primary shards available. You can change this behavior by setting `partial` to `true`.

`metadata`::
(Optional, string)
Attaches arbitrary metadata to the snapshot, such as a record of who took the snapshot, why it was taken, or any other useful data.

[[create-snapshot-api-example]]
==== {api-examples-title}

In the following example, `index_1` and `index_2` are the indices to take snapshots of.

[source,console]
-----------------------------------
PUT /_snapshot/my_backup/snapshot_2?wait_for_completion=true
{
  "indices": "index_1,index_2",
  "ignore_unavailable": true,
  "include_global_state": false,
  "metadata": {
    "taken_by": "user123",
    "taken_because": "backup before upgrading"
  }
}
-----------------------------------

The API returns the following response:

[source,console-result]
----
{
  "accepted" : true
}
----
// TEST[skip:cannot complete subsequent snapshot]
