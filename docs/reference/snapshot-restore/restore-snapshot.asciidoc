[[snapshots-restore-snapshot]]
== Restore a snapshot

This guide shows you how to restore a snapshot. Snapshots are a convenient way
to transfer data between clusters. You can also restore a snapshot to recover
indices and data streams after deletion or a hardware failure.

In this guide, you'll learn how to:

* Retrieve available snapshots
* Restore an index or data stream from a snapshot
* Monitor the restore operation
* Cancel an ongoing restore

The guide also provides tips for <<restore-different-cluster,restoring to
another cluster>> and <<troubleshoot-snapshot-restore,troubleshooting common
restore errors>>.

[discrete]
[[restore-snapshot-prereqs]]
=== Prerequisites

include::apis/restore-snapshot-api.asciidoc[tag=restore-prereqs]

[discrete]
[[retrieve-snapshot]]
=== Retrieve a snapshot

To view a list of available snapshots in {kib}, go to the main menu and click
*Stack Management > Snapshot and Restore*.

You can also use the <<get-snapshot-repo-api,get repository API>> to fetch a
list of registered snapshot repositories.

[source,console]
----
GET _snapshot
----
// TEST[setup:setup-snapshots]

Use the <<get-snapshot-api,get snapshot API>> to retrieve snapshots for a
repository.

[source,console]
----
GET _snapshot/my_repository/*?verbose=false
----
// TEST[setup:setup-snapshots]

[discrete]
[[restore-index-data-stream]]
=== Restore an index or data stream

You can restore an index or data stream from a snapshot using {kib}'s *Snapshot
and Restore* feature or the <<restore-snapshot-api,restore snapshot API>>.

You can't restore an existing open index or an existing data stream. To avoid
conflicts with existing indices and data streams, use one of the following
methods:

* <<delete-restore>>
* <<close-restore>>
* <<rename-on-restore>>

[discrete]
[[delete-restore]]
==== Delete and restore

The simplest way to avoid conflicts is to delete an existing index or data
stream before restoring it. To prevent the accidental recreation of the index or
data stream, we recommend you temporarily stop all indexing until the restore
operation is complete.

// Only display warning in 7.x.
// In 7.x, `action.destructive_requires_name` defaults to false.
ifeval::[ "{major-version}" == "7.x" ]
WARNING: Don't use the <<indices-delete-index,delete index API>> to target the
`*` or `.*` wildcard expression. If you use {es}'s security features, this will
delete system indices required for authentication. To delete all regular
indices, use `*,-.*`.
endif::[]

[source,console]
----
# Delete an index
DELETE my-index

# Delete a data stream
DELETE _data_stream/logs-my_app-default

# Restore the index and data stream from a snapshot
POST _snapshot/my_repository/my_snapshot_2099.05.06/_restore 
{
  "indices": "my-index,logs-my_app-default"
}
----
// TEST[setup:setup-snapshots]
// TEST[s/_restore/_restore?wait_for_completion=true/]

[discrete]
[[close-restore]]
==== Close and restore

You can only restore an existing index if it's closed. Typically, you'd only use
this method if you've already closed an index for other reasons. Otherwise, the
results are the same as the <<delete-restore,delete and restore>> method.

You can close an index using the <<indices-close,close index API>>.
You can't close a data stream.

// Only display warning in 7.x.
// In 7.x, `action.destructive_requires_name` defaults to false.
ifeval::["{major-version}" == "7.x"]
WARNING: Don't use the close index API to target the `*` or `.*` wildcard
expression. If you use {es}'s security features, this will close system indices
required for authentication. To close all regular indices, use `*,-.*`.
endif::[]

[source,console]
----
POST my-index/_close
----
// TEST[setup:setup-snapshots]

To restore the closed index, the index in the snapshot must have the same
number of primary shards. You can check the primary shard counts using the
<<cat-indices,cat indices>> and <<get-snapshot-api,get snapshot>> APIs.

[source,console]
----
# Get the primary shard count for the closed index
GET /_cat/indices/my-index?v=true&h=index,pri,status,health

# Get the primary shard count for the index in the snapshot
GET _snapshot/my_repository/my_snapshot_2099.05.06?index_details=true&filter_path=*.index_details.my-index.shard_count
----
// TEST[continued]

If the primary shard counts match, you can restore the closed index. Restoring
the index deletes its existing data and automatically opens it.

[source,console]
----
POST _snapshot/my_repository/my_snapshot_2099.05.06/_restore 
{
  "indices": "my-index"
}
----
// TEST[continued]
// TEST[s/_restore/_restore?wait_for_completion=true/]

[discrete]
[[rename-on-restore]]
==== Rename on restore

If you want to avoid deleting or overwriting existing data, you can instead
rename the indices and data streams you restore. You typically use this method
to compare existing data to historical data from a snapshot.

Before you start, ensure the cluster has enough capacity for both the existing
and restored data.

The following restore snapshot API request prepends `restored-` to the name of
any restored index or data stream.

[source,console]
----
POST _snapshot/my_repository/my_snapshot_2099.05.06/_restore 
{
  "indices": "my-index,logs-my_app-default",
  "rename_pattern": "(.+)",
  "rename_replacement": "restored-$1"
}
----
// TEST[setup:setup-snapshots]
// TEST[s/_restore/_restore?wait_for_completion=true/]

When the restore operation is complete, you can compare the original and
restored data. If you no longer need an original index or data stream, you can
delete it and use a <<docs-reindex,reindex>> to rename the restored one.

[source,console]
----
# Delete the original index
DELETE my-index

# Reindex the restored index to rename it
POST _reindex
{
  "source": {
    "index": "restored-my-index"
  },
  "dest": {
    "index": "my-index"
  }
}

# Delete the original data stream
DELETE _data_stream/logs-my_app-default

# Reindex the restored data stream to rename it
POST _reindex
{
  "source": {
    "index": "restored-logs-my_app-default"
  },
  "dest": {
    "index": "logs-my_app-default",
    "op_type": "create"
  }
}
----
// TEST[continued]

[discrete]
[[monitor-restore]]
=== Monitor a restore

The restore operation uses the <<indices-recovery,recovery process>> to restore
an index's primary shards from a snapshot. While the restore operation
recovers primary shards, the cluster will have a `yellow`
<<cluster-health,health status>>.

After all primary shards are recovered, the replication process creates and
distributes replicas across eligible data nodes. When replication is complete,
the cluster health status typically becomes `green`.

You can monitor the cluster health status using the <<cluster-health,cluster
health API>>.

[source,console]
----
GET _cluster/health
----

To get detailed information about ongoing shard recoveries, use the
<<indices-recovery,index recovery API>>.

[source,console]
----
GET my-index/_recovery
----
// TEST[setup:setup-snapshots]

To view any unassigned shards, use the <<cat-shards,cat shards API>>.

[source,console]
----
GET _cat/shards?v=true&h=index,shard,prirep,state,node,unassigned.reason&s=state
----

Unassigned shards have a `state` of `UNASSIGNED`. The `prirep` value is `p` for
primary shards and `r` for replicas. The `unassigned.reason` describes why the
shard remains unassigned.

To get a more in-depth explanation of an unassigned shard's allocation status,
use the <<cluster-allocation-explain,cluster allocation explanation API>>.

[source,console]
----
GET _cluster/allocation/explain?filter_path=index,node_allocation_decisions.node_name,node_allocation_decisions.deciders.*
{
  "index": "my-index",
  "shard": 0,
  "primary": false,
  "current_node": "my-node"
}
----
// TEST[s/^/PUT my-index\n/]
// TEST[s/"primary": false,/"primary": false/]
// TEST[s/"current_node": "my-node"//]

[discrete]
[[cancel-restore]]
=== Cancel a restore

You can delete an index or data stream to cancel its ongoing restore. This also
deletes any existing data for the index or data stream.

[source,console]
----
# Delete an index
DELETE my-index

# Delete a data stream
DELETE _data_stream/logs-my_app-default
----
// TEST[setup:setup-snapshots]

[discrete]
[[restore-different-cluster]]
=== Restore to a different cluster

TIP: {ess} can help you restore snapshots from other deployment. See
{cloud}/ec-restoring-snapshots.html#ec-restore-across-clusters[Restore across
clusters].

The information stored in a snapshot is not tied to a particular cluster or a cluster name. Therefore, it's possible to
restore a snapshot created from one cluster into another cluster by registering the repository that contains the snapshot in the new cluster and starting the restore process.

The topology of the new cluster does not have to match the cluster where the
snapshot was created. However, the versions must be
<<snapshot-restore-version-compatibility,compatible>>.

If the new cluster has a smaller capacity, consider the following changes:

* Ensure that the new cluster has enough capacity to store all data streams and indices in the snapshot.
* Restore fewer indices and data streams from the snapshot.
* Change the index settings during the restore operation to reduce the
<<dynamic-index-number-of-replicas,number of replicas>>.
+
For example, the following restore snapshot API request uses the
`index_settings` option to set `index.number_of_replicas` to `1`.
+
[source,console]
----
POST _snapshot/my_repository/my_snapshot_2099.05.06/_restore
{
  "indices": "my-index,logs-my_app-default",
  "index_settings": {
    "index.number_of_replicas": 1
  }
}
----
// TEST[setup:setup-snapshots]
// TEST[s/^/DELETE my-index\nDELETE _data_stream\/logs-my_app-default\n/]
// TEST[s/_restore/_restore?wait_for_completion=true/]

If indices or backing indices in the original cluster were assigned to particular nodes using
<<shard-allocation-filtering,shard allocation filtering>>, the same rules will be enforced in the new cluster. If the new cluster does not contain nodes with appropriate attributes that a restored index can be allocated on, the
index will not be successfully restored unless these index allocation settings are changed during the restore operation.

The restore operation also checks that restored persistent settings are compatible with the current cluster to avoid accidentally
restoring incompatible settings. If you need to restore a snapshot with incompatible persistent settings, try restoring it without
the <<restore-snapshot-api-include-global-state,global cluster state>>.

[discrete]
[[troubleshoot-snapshot-restore]]
=== Troubleshoot snapshot restore errors

Here's how to resolve common errors returned by restore requests.

[discrete]
==== Cannot restore index [<index>] because an open index with same name already exists in the cluster

The request is trying to restore an open index or data stream that already
exists in the cluster. To avoid this error, use one of the following methods:

* <<delete-restore>>
* <<close-restore>>
* <<rename-on-restore>>

[discrete]
==== Cannot restore index [<index>] with [x] shards from a snapshot of index [<snapshot-index>] with [y] shards

To restore an existing closed index, the index in the snapshot must have the
same number of primary shards. Try <<delete-restore,deleting the existing
index>> or <<rename-on-restore,renaming the restored index>>.
