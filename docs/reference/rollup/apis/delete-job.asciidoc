[role="xpack"]
[testenv="basic"]
[[rollup-delete-job]]
=== Delete job API
++++
<titleabbrev>Delete job</titleabbrev>
++++

experimental[]

This API deletes an existing rollup job.  A job must be *stopped* first before it can be deleted.  Attempting to delete
a started job will result in an error. Similarly, attempting to delete a nonexistent job will throw an exception.

==== Request

`DELETE _rollup/job/<job_id>`

//===== Description

==== Path Parameters

`job_id` (required)::
  (string) Identifier for the job

==== Query Parameters

`delete_data` (optional)::
  (boolean) set to `true` if you want to delete the data that has been generated by this rollup job, false to delete
  the job but leave any rolled-up data intact. Defaults to `false`.


==== Request Body

There is no request body for the Delete Job API.

==== Authorization

You must have `manage` or `manage_rollup` cluster privileges to use this API.
For more information, see
{xpack-ref}/security-privileges.html[Security Privileges].


==== Examples

If we have a rollup job named `sensor`, it can be deleted with:

[source,js]
--------------------------------------------------
DELETE _rollup/job/sensor
--------------------------------------------------
// CONSOLE
// TEST[setup:sensor_rollup_job]

Which will return the response:

[source,js]
----
{
  "acknowledged": true
}
----
// TESTRESPONSE

If however we try to delete a job which doesn't exist:

[source,js]
--------------------------------------------------
DELETE _rollup/job/does_not_exist
--------------------------------------------------
// CONSOLE
// TEST[catch:missing]

A 404 `resource_not_found` exception will be thrown:

[source,js]
----
{
    "error" : {
        "root_cause" : [
            {
                "type" : "resource_not_found_exception",
                "reason" : "the task with id [does_not_exist] doesn't exist",
                "stack_trace": ...
            }
        ],
        "type" : "resource_not_found_exception",
        "reason" : "the task with id [does_not_exist] doesn't exist",
        "stack_trace": ...
    },
    "status": 404
}
----
// TESTRESPONSE[s/"stack_trace": .../"stack_trace": $body.$_path/]

==== Deleting Data

If `delete_date` is set to true, the DeleteJob endpoint will also remove any rolled-up data that was
generated by the job. Internally, this sequence of events is taken:

1. Job is deleted, task removed from cluster state
2. A Delete-By-Query is run on the rollup index (holding the rolled-up data for the job) and all documents
belonging to the job are deleted.
3. The `_meta` mapping field is updated on the rollup index to remove the job's config

This endpoint does _not_ delete the rollup index, and any other jobs that are co-located in the index
will remain intact.  This endpoint will only removes the data and job config from the index.

If `delete_data=true`, the API call will block until the data has been job and data have been completely
removed (or an exception is thrown if something goes wrong).

[source,js]
--------------------------------------------------
DELETE _rollup/job/sensor?delete_data=true
--------------------------------------------------
// CONSOLE
// TEST[setup:sensor_rollup_job]