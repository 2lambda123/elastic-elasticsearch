[[modules-cluster-coordination]]
== Cluster coordination

The cluster coordination module is responsible for electing a master node and
managing changes to the cluster state.

[float]
=== Quorum-based decision making

Electing a master node and changing the cluster state are the two fundamental
tasks that master-eligible nodes must work together to perform. It is important
that these activities work robustly even if some nodes have failed, and
Elasticsearch achieves this robustness by only considering each action to have
succeeded on receipt of responses from a _quorum_, a subset of the
master-eligible nodes in the cluster. The advantage of requiring only a subset
of the nodes to respond is that it allows for some of the nodes to fail without
preventing the cluster from making progress, and the quorums are carefully
chosen so as not to allow the cluster to "split brain", i.e. to be partitioned
into two pieces each of which may make decisions that are inconsistent with
those of the other piece.

Elasticsearch allows you to add and remove master-eligible nodes to a running
cluster. In many cases you can do this simply by starting or stopping the nodes
as required, as described in more detail below. As nodes are added or removed
Elasticsearch maintains an optimal level of fault tolerance by updating the
cluster's _voting configuration_, which is the set of master-eligible nodes
whose responses are counted when making decisions such as electing a new master
or committing a new cluster state. A decision is only made once more than half
of the nodes in the voting configuration have responded. Usually the voting
configuration is the same as the set of all the master-eligible nodes that are
currently in the cluster, but there are some situations in which they may be
different. As long as more than half of the nodes in the voting configuration
are still healthy then the cluster can still make progress.

[float]
=== Cluster maintenance, rolling restarts and migrations

Many cluster maintenance tasks involve temporarily shutting down one or more
nodes and then starting them back up again. By default Elasticsearch can remain
available if one of its master-eligible nodes is taken offline, such as during
a <<rolling-upgrades,rolling restart>>. Furthermore, if multiple nodes are
stopped and then started again then it will automatically recover, such as
during a <<restart-upgrade,full cluster restart>>. There is no need to take any
further action with the APIs described here in these cases, because the set of
master nodes is not changing permanently.

It is also possible to perform a migration of a cluster onto entirely new nodes
without taking the cluster offline, via a _rolling migration_. A rolling
migration is similar to a rolling restart, in that it is performed one node at
a time, and also requires no special handling for the master-eligible nodes as
long as there are at least two of them available at all times.

TODO the above is only true if the maintenance happens slowly enough, otherwise
the configuration might not catch up. Need to add this to the rolling restart
docs.

[float]
==== Auto-reconfiguration

Nodes may join or leave the cluster, and Elasticsearch reacts by making
corresponding changes to the voting configuration in order to ensure that the
cluster is as resilient as possible. The default auto-reconfiguration behaviour
is expected to give the best results in most situation. The current voting
configuration is stored in the cluster state so you can inspect its current
contents as follows:

[source,js]
--------------------------------------------------
GET /_cluster/state?filter_path=metadata.cluster_coordination.last_committed_config
--------------------------------------------------
// CONSOLE

NOTE: The current voting configuration is not necessarily the same as the set
of all available master-eligible nodes in the cluster. Altering the voting
configuration itself involves taking a vote, so it takes some time to adjust
the configuration as nodes join or leave the cluster. Also, there are
situations where the most resilient configuration includes unavailable nodes,
or does not include some available nodes, and in these situations the voting
configuration will differ from the set of available master-eligible nodes in
the cluster.

Larger voting configurations are usually more resilient, so Elasticsearch will
normally prefer to add master-eligible nodes to the voting configuration once
they have joined the cluster. Similarly, if a node in the voting configuration
leaves the cluster and there is another master-eligible node in the cluster
that is not in the voting configuration then it is preferable to swap these two
nodes over, leaving the size of the voting configuration unchanged but
increasing its resilience.

It is not so straightforward to automatically remove nodes from the voting
configuration after they have left the cluster, and different strategies have
different benefits and drawbacks, so the right choice depends on how the
cluster will be used and is controlled by the following setting.

`cluster.auto_shrink_voting_configuration`::

    Defaults to `true`, meaning that the voting configuration will
    automatically shrink, shedding departed nodes, as long as it still contains
    at least 3 nodes.  If set to `false`, the voting configuration never
    automatically shrinks; departed nodes must be removed manually using the
    vote withdrawal API described below.

NOTE: If `cluster.auto_shrink_voting_configuration` is set to `true`, the
recommended and default setting, and there are at least three master-eligible
nodes in the cluster, then Elasticsearch remains capable of processing
cluster-state updates as long as all but one of its master-eligible nodes are
healthy.

There are situations in which Elasticsearch might tolerate the loss of multiple
nodes, but this is not guaranteed under all sequences of failures. If this
setting is set to `false` then departed nodes must be removed from the voting
configuration manually, using the vote withdrawal API described below, to achieve
the desired level of resilience.

Note that Elasticsearch will not suffer from a "split-brain" inconsistency
however it is configured. This setting only affects its availability in the
event of the failure of some of its nodes, and the administrative tasks that
must be performed as nodes join and leave the cluster.

[float]
==== Even numbers of master-eligible nodes

There should normally be an odd number of master-eligible nodes in a cluster.
If there is an even number then Elasticsearch will leave one of them out of the
voting configuration to ensure that it has an odd size. This does not decrease
the failure-tolerance of the cluster, and in fact improves it slightly: if the
cluster is partitioned into two even halves then one of the halves will contain
a majority of the voting configuration and will be able to keep operating,
whereas if all of the master-eligible nodes' votes were counted then neither
side could make any progress in this situation.

For instance if there are four master-eligible nodes in the cluster and the
voting configuration contained all of them then any quorum-based decision would
require votes from at least three of them, which means that the cluster can
only tolerate the loss of a single master-eligible node. If this cluster were
split into two equal halves then neither half would contain three
master-eligible nodes so would not be able to make any progress. However if the
voting configuration contains only three of the four master-eligible nodes then
the cluster is still only fully tolerant to the loss of one node, but
quorum-based decisions require votes from two of the three voting nodes. In the
event of an even split, one half will contain two of the three voting nodes so
will remain available.

[float]
==== Adding and removing master-eligible nodes

It is recommended to have a small and fixed number of master-eligible nodes in
a cluster, and to scale the cluster up and down by adding and removing
non-master-eligible nodes only. However there are situations in which it may be
desirable to add or remove some master-eligible nodes to or from a cluster.

If you wish to add some master-eligible nodes to your cluster, simply configure
the new nodes to find the existing cluster and start them up. Elasticsearch
will add the new nodes to the voting configuration if it is appropriate to do
so.

When removing master-eligible nodes, it is important not to remove too many all
at the same time. For instance, if there are currently seven master-eligible
nodes and you wish to reduce this to three, it is not possible simply to stop
four of the nodes at once: to do so would leave only three nodes remaining,
which is less than half of the voting configuration, which means the cluster
cannot take any further actions.

As long as there are at least three master-eligible nodes in the cluster, as a
general rule it is best to remove nodes one-at-a-time, allowing enough time for
the auto-reconfiguration to take effect after each removal.

If there are only two master-eligible nodes then neither node can be safely
removed since both are required to reliably make progress, so you must first
inform Elasticsearch that one of the nodes should not be part of the voting
configuration, and that the voting power should instead be given to other
nodes, allowing the excluded node to be taken offline without preventing
the other node from making progress. A node who is added to a voting
configuration exclusion list still works normally, but Elasticsearch will try
and remove it from the voting configuration so its vote is no longer required,
and will never automatically move such a node back into the voting configuration
after it has been removed. Once a node's has been successfully reconfigured out
of the voting configuration, it is safe to shut it down with affecting the
cluster's availability. A node can be added to the voting configuration exclusion
list using the following API:

[source,js]
--------------------------------------------------
# Add node to voting configuration exclusions list and wait for the system to
# auto-reconfigure the node out of the voting configuration up to the default
# timeout of 30 seconds
POST /_cluster/voting_config_exclusions/node_name
# Add node to voting configuration exclusions list and wait for
# auto-reconfiguration up to one minute
POST /_cluster/voting_config_exclusions/node_name?timeout=1m
--------------------------------------------------
// CONSOLE

The node who should be added to the exclusions list is specified using
<<cluster-nodes,node filters>> in place of `node_name` here. If a call to the
voting configuration exclusions API fails then the call can safely be retried.
A successful response guarantees that the node has been removed from the voting
configuration and will not be reinstated.

Although the voting configuration exclusions API is most useful for down-scaling
a two-node to a one-node cluster, it is also possible to use it to remove multiple
nodes from larger clusters all at the same time. Adding multiple nodes to the
exclusions list has the system try to auto-reconfigure all of these nodes from
the voting configuration, allowing them to be safely shut down while keeping the
cluster available. In the example described above, shrinking a seven-master-node
cluster down to only have three master nodes, you could add four nodes to the
exclusions list, wait for confirmation, and then shut them down simultaneously.

Adding an exclusion for a node creates an entry for that node in the voting
configuration exclusions list, which has the system automatically try to reconfigure
the voting configuration to remove that node and prevents it from returning
to the voting configuration once it has removed. The current set of exclusions
is stored in the cluster state and can be inspected as follows:

[source,js]
--------------------------------------------------
GET /_cluster/state?filter_path=metadata.cluster_coordination.voting_config_exclusions
--------------------------------------------------
// CONSOLE

This list is limited in size by the following setting:

`cluster.max_voting_config_exclusions`::

    Sets a limits on the number of voting configuration exclusions at any one time.
    Defaults to `10`.

Since voting configuration exclusions are persistent and limited in number, they
must be cleaned up. Normally an exclusion is added when performing some maintenance on
the cluster, and the exclusions should be cleaned up when the maintenance is complete.
Clusters should have no exclusions in normal operation.

If a node is excluded from the voting configuration because it is to be shut down
permanently then its exclusion can be removed once it has shut down and been removed
from the cluster. Exclusions can also be cleared if they were created in error or were
only required temporarily:

[source,js]
--------------------------------------------------
# Wait for all the nodes with voting configuration exclusions to be removed from the
# cluster and then remove all the exclusions, allowing any node to return to the
# voting configuration in the future.
DELETE /_cluster/voting_config_exclusions
# Immediately remove all the voting configuration exclusions, allowing any node to
# return to the voting configuration in the future.
DELETE /_cluster/voting_config_exclusions?wait_for_removal=false
--------------------------------------------------
// CONSOLE

[float]
=== Cluster bootstrapping

When a brand-new cluster starts up for the first time, one of the tasks it must
perform is to elect its first master node, for which it needs to know the set
of master-eligible nodes whose votes should count in this first election. This
initial voting configuration is known as the _bootstrap configuration_.

It is important that the bootstrap configuration identifies exactly which nodes
should vote in the first election, and it is not sufficient to configure each
node with an expectation of how many nodes there should be in the cluster. It
is also important to note that the bootstrap configuration must come from
outside the cluster: there is no safe way for the cluster to determine the
bootstrap configuration correctly on its own.

If the bootstrap configuration is not set correctly then there is a risk when
starting up a brand-new cluster is that you accidentally form two separate
clusters instead of one. This could lead to data loss: you might start using
both clusters before noticing that anything had gone wrong, and it will then be
impossible to merge them together later.

NOTE: To illustrate the problem with configuring each node to expect a certain
cluster size, imagine starting up a three-node cluster in which each node knows
that it is going to be part of a three-node cluster. A majority of three nodes
is two, so normally the first two nodes to discover each other will form a
cluster and the third node will join them a short time later. However, imagine
that four nodes were erroneously started instead of three: in this case there
are enough nodes to form two separate clusters. Of course if each node is
started manually then it's unlikely that too many nodes are started, but it's
certainly possible to get into this situation if using a more automated
orchestrator, particularly if the orchestrator is not resilient to failures
such as network partitions.

The cluster bootstrapping process is only required the very first time a whole
cluster starts up: new nodes joining an established cluster can safely obtain
all the information they need from the elected master, and nodes that have
previously been part of a cluster will have stored to disk all the information
required when restarting.

A cluster can be bootstrapped by sending the _bootstrap configuration_ to any
of its master-eligible nodes via the `POST /_cluster/bootstrap_configuration`
API:

[source,js]
--------------------------------------------------
POST /_cluster/bootstrap_configuration
{
  "master_nodes": [
    {
      "id": "gAMDNeJRTX6A_VelgSb84g",
      "name": "master-a"
    },
    {
      "id": "t3LZCVGxTf-idQIC8z4A1A",
      "name": "master-b"
    },
    {
      "id": "GfwXZYVVSFCOWNT0zcDixQ",
      "name": "master-c"
    }
  ]
}
--------------------------------------------------
// CONSOLE

This only needs to occur once, on a single master-eligible node in the cluster,
but for robustness it is safe to repeatedly call `POST
/_cluster/bootstrap_configuration`, and to call it on different nodes
concurrently. However **it is vitally important** to use exactly the same
bootstrap configuration in each call.

WARNING: You must pass exactly the same bootstrap configuration to each call to
`POST /_cluster/bootstrap_configuration` in order to be sure that only a single
cluster forms during bootstrapping and therefore to avoid the risk of data
loss.

The simplest and safest way to construct a bootstrap configuration is to use
the `GET /_cluster/bootstrap_configuration` API.  This API returns a
properly-constructed bootstrap configuration that is ready to pass back to the
`POST /_cluster/bootstrap_configuration` API. It includes all of the
master-eligible nodes that the handling node has discovered via the
gossip-based discovery protocol, and returns an error if fewer nodes have been
discovered than required:

[source,js]
--------------------------------------------------
# Immediately return a bootstrap configuration based on the nodes
# discovered so far.
GET /_cluster/bootstrap_configuration
# Return a bootstrap configuration of at least three nodes, or return an
# error if fewer than three nodes have been discovered.
GET /_cluster/bootstrap_configuration?min_size=3
# Return a bootstrap configuration of at least three nodes, waiting for
# up to a minute for this many nodes to be discovered before returning
# an error.
GET /_cluster/bootstrap_configuration?min_size=3&timeout=1m
--------------------------------------------------
// CONSOLE

It is also possible to construct a bootstrap configuration manually and to
specify the initial set of nodes in terms of their names alone, rather than
including their IDs too:

[source,js]
--------------------------------------------------
POST /_cluster/bootstrap_configuration
{
  "master_nodes": [
    {
      "name": "master-a"
    },
    {
      "name": "master-b"
    },
    {
      "name": "master-c"
    }
  ]
}
--------------------------------------------------
// CONSOLE

It is safer to include the node IDs, in case two nodes are accidentally started
with the same name.

[float]
==== Cluster bootstrapping tool

A simpler way to bootstrap a cluster is to use the
`elasticsearch-bootstrap-cluster` command-line tool which implements the
process described here:

[source,txt]
--------------------------------------------------
$ bin/elasticsearch-bootstrap-cluster --node http://10.0.12.1:9200/ \
    --node http://10.0.13.1:9200/ --node https://10.0.14.1:9200/
--------------------------------------------------

The arguments to this tool are the addresses of (some, preferably all, of) its
master-eligible nodes. The tool will construct a bootstrap warrant and then
bootstrap the cluster, retrying safely if any step fails.

[float]
=== Unsafe disaster recovery

In a disaster situation a cluster may have lost half or more of its
master-eligible nodes and therefore be in a state in which it cannot elect a
master. There is no way to recover from this situation without risking data
loss (including the loss of indexed documents) but if there is no other viable
path forwards then this may be necessary. This can be performed with the
following command on a surviving node:

[source,js]
--------------------------------------------------
POST /_cluster/force_local_node_takeover
--------------------------------------------------
// CONSOLE

This forcibly overrides the current voting configuration with one in which the
handling node is the only voting master, so that it forms a quorum on its own.
Because there is a risk of data loss when performing this command it requires
the `accept_data_loss` parameter to be set to `true` in the URL.

[float]
=== Election scheduling

Elasticsearch uses an election process to agree on an elected master node, both
at startup and if the existing elected master fails. Any master-eligible node
can start an election, and normally the first election that takes place will
succeed. Elections only usually fail when two nodes both happen to start their
elections at about the same time, so elections are scheduled randomly on each
node to avoid this happening. Nodes will retry elections until a master is
elected, backing off on failure, so that eventually an election will succeed
(with arbitrarily high probability). The following settings control the
scheduling of elections.

`cluster.election.initial_timeout`::

    Sets the upper bound on how long a node will wait initially, or after a
    leader failure, before attempting its first election. This defaults to
    `100ms`.

`cluster.election.back_off_time`::

    Sets the amount to increase the upper bound on the wait before an election
    on each election failure. Note that this is _linear_ backoff. This defaults
    to `100ms`

`cluster.election.max_timeout`::

    Sets the maximum upper bound on how long a node will wait before attempting
    an first election, so that an network partition that lasts for a long time
    does not result in excessively sparse elections. This defaults to `10s`

`cluster.election.duration`::

    Sets how long each election is allowed to take before a node considers it
    to have failed and schedules a retry. This defaults to `500ms`.

[float]
=== Fault detection

An elected master periodically checks each of its followers in order to ensure
that they are still connected and healthy, and in turn each follower
periodically checks the health of the elected master. Elasticsearch allows for
these checks occasionally to fail or timeout without taking any action, and
will only consider a node to be truly faulty after a number of consecutive
checks have failed. The following settings control the behaviour of fault
detection.

`cluster.fault_detection.follower_check.interval`::

    Sets how long the elected master waits between checks of its followers.
    Defaults to `1s`.

`cluster.fault_detection.follower_check.timeout`::

    Sets how long the elected master waits for a response to a follower check
    before considering it to have failed. Defaults to `30s`.

`cluster.fault_detection.follower_check.retry_count`::

    Sets how many consecutive follower check failures must occur before the
    elected master considers a follower node to be faulty and removes it from
    the cluster. Defaults to `3`.

`cluster.fault_detection.leader_check.interval`::

    Sets how long each follower node waits between checks of its leader.
    Defaults to `1s`.

`cluster.fault_detection.leader_check.timeout`::

    Sets how long each follower node waits for a response to a leader check
    before considering it to have failed. Defaults to `30s`.

`cluster.fault_detection.leader_check.retry_count`::

    Sets how many consecutive leader check failures must occur before a
    follower node considers the elected master to be faulty and attempts to
    find or elect a new master. Defaults to `3`.


[float]
=== Discovery settings

TODO move this to the discovery module docs

Discovery operates in two phases: First, each node "probes" the addresses of
all known nodes by connecting to each address and attempting to identify the
node to which it is connected. Secondly it shares with the remote node a list
of all of its peers and the remote node responds with _its_ peers in turn. The
node then probes all the new nodes about which it just discovered, requests
their peers, and so on, until it has discovered an elected master node or
enough other masterless nodes that it can perform an election. If neither of
these occur quickly enough then it tries again. This process is controlled by
the following settings.

`discovery.probe.connect_timeout`::

    Sets how long to wait when attempting to connect to each address. Defaults
    to `3s`.

`discovery.probe.handshake_timeout`::

    Sets how long to wait when attempting to identify the remote node via a
    handshake. Defaults to `1s`.

`discovery.find_peers_interval`::

    Sets how long a node will wait before attempting another discovery round.

`discovery.request_peers_timeout`::

    Sets how long a node will wait after asking its peers again before
    considering the request to have failed.

[float]
=== Miscellaneous timeouts

`cluster.join.timeout`::

    Sets how long a node will wait after sending a request to join a cluster
    before it considers the request to have failed and retries. Defaults to
    `60s`.

`cluster.publish.timeout`::

    Sets how long the elected master will wait after publishing a cluster state
    update to receive acknowledgements from all its followers. If this timeout
    occurs then the elected master may start to calculate and publish a
    subsequent cluster state update, as long as it received enough
    acknowledgements to know that the previous publication was committed; if it
    did not receive enough acknowledgements to commit the update then it stands
    down as the elected leader.
