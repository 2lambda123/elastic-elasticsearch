[[modules-scripting-security]]
=== Scripting and security

While we make every effort to prevent scrips from running amok, security is
something you do in
https://en.wikipedia.org/wiki/Defense_in_depth_(computing)[layers], so you'll
want to take some steps as well.

First and foremost, never run Elasticsearch as the `root` user, as this would
allow a script to access or do *anything* on your server, without limitations.
Elasticsearch checks if it is running as `root` on startup but it won't
refuse to start if it can't be sure so do your part to make sure it isn't
running as `root`.

You should not expose Elasticsearch directly to users, but instead have an
application in between your users and Elasticsearch. If you *must* allow users
the ability to run whatever request they want then make sure that dynamic
scripting is disabled for all non-sandboxed languages. That is already the
default. Even then, understand that it is possible for a sufficiently
determined malicious user to write searches that overwhelm the Elasticsearch
cluster and bring it down.

By default Elasticsearch enables dynamic scripting for sandboxed languages,
namely the scripting language `painless`, the template language `mustache`, and
the expression language `expressions`. These *ought* to be safe to expose to
trusted users and to your application servers. It is tempting fate to expose
them to the Internet at large, on the other hand. Your applications can use
these scripts dynamically and be exposed to the Internet. Just don't let the
Internet write scripts.

Enabling dynamic scripting for non-sandboxed languages like `groovy`, `python`,
and `javascript` is super dangerous. These languages have unfettered access to
Elasticsearch and can cause all kind of trouble. Worse, the only thing
preventing them from causing real trouble is the Java security manager and
SECCOMP/Seatbelt/ActiveProcessLimit. Assuming that those will prevent disaster
is tempting fate again so don't do it.

Below this we describe the security settings for scripts and how you can
change from the defaults described above. You should be very, very careful
when allowing more than the defaults.

[[security-script-source]]
[float]
=== Script source settings

Which scripts Elasticsearch will execute where is controlled by settings
starting with `scripts.`. The simplest settings allow scripts to be enabled
or disabled based on where they are stored. The default values are the
following:

[source,yaml]
-----------------------------------
script.inline: false  <1>
script.stored: false  <2>
script.file:   true   <3>
-----------------------------------
<1> Scripts provided inline are disabled by default.
<2> Scripts stored in the cluster state are disabled by default.
<3> Scripts stored on the node's filesystem are enabled by default.

NOTE: Global scripting settings affect the `mustache` scripting language.
<<search-template,Search templates>> internally use the `mustache` language,
and will still be enabled by default as the `mustache` engine is sandboxed,
but they will be enabled/disabled according to fine-grained settings
specified in `elasticsearch.yml`.

[[security-script-context]]
[float]
=== Script context settings

Scripting may also be enabled or disabled in different contexts in the
Elasticsearch API. The supported contexts are:

[horizontal]
`aggs`::    Aggregations
`search`::  Search api, Percolator API and Suggester API
`update`::  Update api
`plugin`::  Any plugin that makes use of scripts under the generic `plugin` category

Plugins can also define custom operations that they use scripts for instead
of using the generic `plugin` category. Those operations can be referred to
in the following form: `${pluginName}_${operation}`.

The following example disables scripting for `update` and `plugin` operations,
regardless of the script source or language. Scripts can still be executed
from sandboxed languages as part of `aggregations`, `search` and plugins
execution though, as the above defaults still get applied.

[source,yaml]
-----------------------------------
script.update: false
script.plugin: false
-----------------------------------

[[security-script-fine]]
[float]
=== Fine-grained script settings

First, the high-level script settings described above are applied in order
(context settings have precedence over source settings). Then fine-grained
settings which include the script language take precedence over any high-level
settings. They have two forms:

[source,yaml]
------------------------
script.engine.{lang}.{inline|file|stored}.{context}: true|false
------------------------

And

[source,yaml]
------------------------
script.engine.{lang}.{inline|file|stored}: true|false
------------------------

For example:

[source,yaml]
-----------------------------------
script.inline: false <1>
script.stored: false <1>
script.file:   false <1>

script.engine.painless.inline:          true <2>
script.engine.painless.stored.search:   true <3>
script.engine.painless.stored.aggs:     true <3>

script.engine.mustache.stored.search:   true <4>
-----------------------------------
<1> Disable all scripting from any source.
<2> Allow inline Painless scripts for all operations
<3> Allow stored Painless scripts to be used for search and aggregations.
<4> Allow stored Mustache templates to be used for search.
