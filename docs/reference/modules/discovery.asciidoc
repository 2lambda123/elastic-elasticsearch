[[modules-discovery]]
== Discovery and cluster formation

The discovery and cluster formation module is responsible for discovering nodes,
electing a master, and publishing the cluster state.

This module is integrated with other modules, for example,
all communication between nodes is done using the <<modules-transport,transport>> module.

It is separated into several sub modules, which are explained below:

[float]
=== Discovery

The discovery sub-module uses a list of _seed_ nodes in order to start
off the discovery process. At startup, or when disconnected from a master,
Elasticsearch tries to connect to each seed node in its list, and holds a
gossip-like conversation with them to find other nodes and to build a complete
picture of the master-eligible nodes in the cluster.

include::discovery/hosts-providers.asciidoc[]

[float]
=== Bootstrapping a cluster

Starting an Elasticsearch cluster for the very first time requires a
cluster bootstrapping step. In <<dev-vs-prod-mode,development mode>>,
with no discovery settings configured, this step is automatically
performed by the nodes themselves. As this auto-bootstrapping is
<<modules-discovery-quorums,inherently unsafe>>, running a node in <<dev-vs-prod-mode,production mode>>
requires an explicit cluster bootstrapping step.

include::discovery/bootstrap-cluster.asciidoc[]

[float]
==== Adding and removing nodes

It is recommended to have a small and fixed number of master-eligible nodes in
a cluster, and to scale the cluster up and down by adding and removing
non-master-eligible nodes only. However there are situations in which it may be
desirable to add or remove some master-eligible nodes to or from a cluster.

Elasticsearch supports dynamically adding and removing master-eligible nodes,
but under certain conditions, special care must be taken.

[float]
==== Cluster state publishing

The master node is the only node in a cluster that can make changes to the
cluster state. The master node processes one cluster state update at a time,
applies the required changes and publishes the updated cluster state to all the
other nodes in the cluster. Each node receives the publish message, acknowledges
it, but does *not* yet apply it. If the master does not receive acknowledgement
from enough nodes within a certain time
(controlled by the `cluster.publish.timeout` setting and defaults to 30
seconds) the cluster state change is rejected.

Once enough nodes have responded, the cluster state is committed and a message
will be sent to all the nodes. The nodes then proceed to apply the new cluster
state to their internal state. The master node waits for all nodes to respond,
up to a timeout, before going ahead processing the next updates in the queue.
The `cluster.publish.timeout` is set by default to 30 seconds and is
measured from the moment the publishing started.

TODO add lag detection

Note, Elasticsearch is a peer to peer based system, nodes communicate
with one another directly if operations are delegated / broadcast. All
the main APIs (index, delete, search) do not communicate with the master
node. The responsibility of the master node is to maintain the global
cluster state, and act if nodes join or leave the cluster by reassigning
shards. Each time a cluster state is changed, the state is made known to
the other nodes in the cluster (the manner depends on the actual
discovery implementation).

[float]
[[no-master-block]]
==== No master block

For the cluster to be fully operational, it must have an active master.
The `discovery.zen.no_master_block` settings controls what operations should be
rejected when there is no active master.

The `discovery.zen.no_master_block` setting has two valid options:

[horizontal]
`all`:: All operations on the node--i.e. both read & writes--will be rejected.
This also applies for api cluster state read or write operations, like the get
index settings, put mapping and cluster state api.
`write`:: (default) Write operations will be rejected. Read operations will
succeed, based on the last known cluster configuration.  This may result in
partial reads of stale data as this node may be isolated from the rest of the
cluster.

The `discovery.zen.no_master_block` setting doesn't apply to nodes-based apis
(for example cluster stats, node info and node stats apis).  Requests to these
apis will not be blocked and can run on any available node.

[float]
==== Master election and fault detection

The master election and fault detection sub modules cover advanced settings
to influence the election and fault detection processes.

include::discovery/master-election.asciidoc[]

[float]
=== Quorum-based decision making

include::discovery/quorums.asciidoc[]
