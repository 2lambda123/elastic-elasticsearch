[[modules-node]]
== Node

*elasticsearch* nodes have three roles and any node can play
one to three of those roles. By default every node performs all
three roles; _data node_, _master node_ and _client node_.

`node.master`::
+
--
*master nodes* participate in master elections and, when elected as
the _active master node_, control cluster state, including changes
such as node addition or removal, index creation and deletion and
mapping updates.

If you have dedicated master nodes then you should
not send index or query requests to them, this ensures they can
maintain the cluster state with little to no interruption, ensuring
the cluster remains as stable as possible.

The default setting is `node.master: true` and can also be
set to `node.master: false` via the configuration file.
--

`node.data`::
+
--
*data nodes* store indexed data locally and make it available for
further manipulation. Storing data locally basically means that
shards of different indices are allowed to be allocated on that node.

The default setting is `node.data: true`, but can also be
set to `node.data: false` via the configuration file.
--

`node.client`::
+
--
*client nodes* are smart load balancers that keep a copy of the
cluster state and use it to route request exactly where they need
to go.

They also act the coordinating node for requests sent to
them, forwarding the requests to the data nodes and then merging
the results when they come back.

Remember that by default all
nodes act as client nodes so all nodes can be the coordinating
node for queries. The default setting is `node.client: true` and can
also be set to `node.master: false` via the configuration file.
--

Let's look at an example: 
We have a cluster with 15 nodes. We decide to have 3 dedicated
master nodes to control and maintain the cluster, 10 data nodes
to store the indexed data and 2 client nodes for users to interact
with the cluster.

The configuration file settings for the 3 masters nodes would be
`node.data: false` and `node.master: true`, the settings for the
10 data nodes would be `node.data: true` and `node.master: false`,
and for the client nodes it would be `node.data: false` and
`node.master: false`.
