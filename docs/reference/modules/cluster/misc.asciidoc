[[misc-cluster]]
=== Miscellaneous cluster settings

[[cluster-read-only]]
==== Metadata

An entire cluster may be set to read-only with the following _dynamic_ setting:

`cluster.blocks.read_only`::

      Make the whole cluster read only (indices do not accept write
      operations), metadata is not allowed to be modified (create or delete
      indices).

`cluster.blocks.read_only_allow_delete`::

      Identical to `cluster.blocks.read_only` but allows to delete indices
      to free up resources.

WARNING: Don't rely on this setting to prevent changes to your cluster. Any
user with access to the <<cluster-update-settings,cluster-update-settings>>
API can make the cluster read-write again.


[[cluster-max-tombstones]]
==== Index Tombstones

The cluster state maintains index tombstones to explicitly denote indices that
have been deleted.  The number of tombstones maintained in the cluster state is
controlled by the following property, which cannot be updated dynamically:

`cluster.indices.tombstones.size`::

Index tombstones prevent nodes that are not part of the cluster when a delete
occurs from joining the cluster and reimporting the index as though the delete
was never issued. To keep the cluster state from growing huge we only keep the
last `cluster.indices.tombstones.size` deletes, which defaults to 500. You can
increase it if you expect nodes to be absent from the cluster and miss more
than 500 deletes. We think that is rare, thus the default. Tombstones don't take
up much space, but we also think that a number like 50,000 is probably too big.

[[cluster-logger]]
==== Logger

The settings which control logging can be updated dynamically with the
`logger.` prefix.  For instance, to increase the logging level of the
`indices.recovery` module to `DEBUG`, issue this request:

[source,js]
-------------------------------
PUT /_cluster/settings
{
  "transient": {
    "logger.org.elasticsearch.indices.recovery": "DEBUG"
  }
}
-------------------------------
// CONSOLE

[[cluster-warning-headers]]
==== Warning Headers
For every distinct warning, elastic cluster will return a new warning header in the client HTTP response.
Sometimes the amount of returned warning headers can be too large and exceed client configuration settings.
These dynamic settings allow to set the maximum count and size of warning headers in client http responses.
Once the maximum count or size is reached, any extra warning will not produce an additional warning header.
The default value for `http.max_warning_header_count` is unbounded.
The default value for `http.max_warning_header_size` is unbounded.

[source,js]
-------------------------------
PUT /_cluster/settings
{
    "persistent" : {
        "http.max_warning_header_count" : 62,
        "http.max_warning_header_size" : "7Kb"
    }
}
-------------------------------
// CONSOLE