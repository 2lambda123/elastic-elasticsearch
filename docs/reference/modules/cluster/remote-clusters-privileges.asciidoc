[[remote-clusters-privileges]]
=== Configure remote cluster privileges
After <<remote-clusters-connect,connecting to remote clusters>>, you create a
user role on both the local and remote clusters and assign necessary privileges.
These roles are required to use {ccr} and {ccs}.

IMPORTANT: You must use the same role names on both the local
and remote clusters. For example, the following configuration for {ccr} uses the
`ccr_user` role name on both the local and remote clusters. However, you can
specify different role definitions on each cluster.

You can manage users and roles from Stack Management in {kib} by selecting
*Security > Roles* from the side navigation. You can also use the
<<security-role-mapping-apis,role management APIs>> to add, update, remove, and
retrieve roles dynamically. When you use the APIs to manage roles in the
`native` realm, the roles are stored in an internal {es} index.

////
[source,console]
----
POST /_security/user/alice1
{
  "password" : "l0ng-r4nd0m-p@ssw0rd",
  "roles" : [ "admin" ],
  "full_name" : "Alice Smith",
  "email" : "asmith@example.com"
}
----
// TESTSETUP
////

[[remote-clusters-privileges-ccr]]
==== Configure privileges for {ccr}
The {ccr} user requires different cluster and index privileges on the remote
cluster and local cluster. If necessary,
<<security-api-put-user,create a user>> that you want to assign the {ccr} role
to.

[discrete]
[[clusters-privileges-ccr-remote]]
===== Remote cluster
On the *remote* cluster that contains the leader index, the `ccr_user` requires
the `read_ccr` cluster privilege, and `monitor` and `read` privileges on the
leader index.

[source,console]
----
POST /_security/role/ccr_user
{
  "cluster": [
    "read_ccr"
  ],
  "indices": [
    {
      "names": [
        "leader-index-name"
      ],
      "privileges": [
        "monitor",
        "read"
      ]
    }
  ]
}
----

[discrete]
[[clusters-privileges-ccr-local]]
===== Local cluster
On the *local* cluster that contains the follower index, the `ccr_user` requires
the `manage_ccr` cluster privilege, and `monitor`, `read`, `write`, and
`manage_follow_index` privileges on the follower index.

NOTE: If you are managing
<<remote-clusters-connect,connecting to the remote cluster>> using
the cluster update settings API, you will also need a user with the `all`
cluster privilege.

[source,console]
----
POST /_security/role/ccr_user
{
  "cluster": [
    "manage_ccr"
  ],
  "indices": [
    {
      "names": [
        "follower-index-name"
      ],
      "privileges": [
        "monitor",
        "read",
        "write",
        "manage_follow_index"
      ]
    }
  ]
}
----

After creating the `ccr_user` role on each cluster,
<<security-api-put-role-mapping,map the role>> to each user that requires {ccr}
capabilities. For example, the following request assigns the
`ccr_user` role to a user named `alice1`:

[source,console]
----
POST /_security/role_mapping/mapping1
{
  "roles": [ "ccr_user"],
  "enabled": true, 
  "rules": {
    "field" : { "username" : "alice1" }
  }
}
----
// TEST[continued]

You can then <<ccr-getting-started,configure {ccr}>> to replicate your data
across datacenters. 

[[remote-clusters-privileges-ccs]]
==== Configure privileges for {ccs}
The {ccs} user requires different cluster and index privileges on the remote
cluster and local cluster. If necessary,
<<security-api-put-user,create a user>> that you want to assign the {ccs} role
to.

[discrete]
[[clusters-privileges-ccs-remote]]
===== Remote cluster
On the *remote* cluster, the `ccs_user` requires the `read` and
`read_cross_cluster` privileges for the target indices.

[source,console]
----
POST /_security/role/ccs_user
{
  "indices": [
    {
      "names": [
        "target-indices"
      ],
      "privileges": [
        "read",
        "read_cross_cluster"
      ]
    }
  ]
}
----

[discrete]
[[clusters-privileges-ccs-local]]
===== Local cluster
On the *local* cluster, which is the cluster used to initiate cross cluster
search, a user only needs the `ccs_user` role. The role privileges for this user
can be empty.

[source,console]
----
POST /_security/role/ccs_user
{}
----

After creating the `ccs_user` role on each cluster,
<<security-api-put-role-mapping,map the role>> to each user that requires {ccs}
capabilities. For example, the following request assigns the `ccs_user` role to
a user named `alice1`:

[source,console]
----
POST /_security/role_mapping/mapping2
{
  "roles": [ "ccs_user"],
  "enabled": true, 
  "rules": {
    "field" : { "username" : "alice1" }
  }
}
----
// TEST[continued]

Users with the `ccs_user` role can then
<<modules-cross-cluster-search,search across clusters>>.

[[clusters-privileges-ccs-kibana]]
==== Configure privileges for {ccs} and {kib}
When using {kib} to search across multiple clusters, a two-step authorization
process determines whether or not the user can access data streams and indices
on a remote cluster:

* First, the local cluster determines if the user is authorized to access remote
clusters. The local cluster is the cluster that {kib} is connected to.
* If the user is authorized, the remote cluster then determines if the user has
access to the specified data streams and indices.

To grant {kib} users access to remote clusters, assign them a local role
with read privileges to indices on the remote clusters. You specify data streams
and indices in a remote cluster as `<remote_cluster_name>:<target>`.

To grant users read access on the remote data streams and indices, you must
create a matching role on the remote clusters that grants the
`read_cross_cluster` privilege with access to the appropriate data streams and
indices.

For example, you might be actively indexing {ls} data on a local cluster and
and periodically offload older time-based indices to an archive on your remote
cluster. You want to search across both clusters, so you must enable {kib}
users on both clusters.

. On the local cluster, create a `logstash_reader` role that grants
`read` and `view_index_metadata` privileges on the local `logstash-*` indices.
+
NOTE: If you configure the local cluster as another remote in {es}, the
`logstash_reader` role on your local cluster also needs to grant the
`read_cross_cluster` privilege.

. Assign your {kib} users a role that grants
{kibana-ref}/xpack-security-authorization.html[access to {kib}], as well as your
`logstash_reader` role.

. On the remote cluster, create a `logstash_reader` role that grants the
`read_cross_cluster` privilege and `read` and `view_index_metadata` privileges
for the `logstash-*` indices.