[[modules-discovery-hosts-providers]]
=== Discovery

The cluster formation module uses a list of _seed_ nodes in order to start
off the discovery process. At startup, or when disconnected from a master,
Elasticsearch tries to connect to each seed node in its list, and holds a
gossip-like conversation with them to find other nodes and to build a complete
picture of the master-eligible nodes in the cluster. By default the cluster formation
module offers two hosts providers to configure the list of seed nodes:
a _settings-based_ and a _file-based_ hosts provider, but can be extended to
support cloud environments and other forms of host providers via plugins.
Host providers are configured using the `discovery.zen.hosts_provider` setting,
which defaults to the _settings-based_ hosts provider. Multiple hosts providers
can be specified as a list.

[float]
[[settings-based-hosts-provider]]
===== Settings-based hosts provider

The settings-based hosts provider use a node setting to configure a static
list of hosts to use as seed nodes. These hosts can be specified as hostnames
or IP addresses; hosts specified as hostnames are resolved to IP addresses
during each round of pinging. Note that if you are in an environment where
DNS resolutions vary with time, you might need to adjust your
<<networkaddress-cache-ttl,JVM security settings>>.

The list of hosts is set using the `discovery.zen.ping.unicast.hosts` static
setting.  This is either an array of hosts or a comma-delimited string. Each
value should be in the form of `host:port` or `host` (where `port` defaults to
the setting `transport.profiles.default.port` falling back to
`transport.tcp.port` if not set). Note that IPv6 hosts must be bracketed. The
default for this setting is `127.0.0.1, [::1]`

Additionally, the `discovery.zen.ping.unicast.hosts.resolve_timeout` configures the
amount of time to wait for DNS lookups on each round of pinging. This is
specified as a <<time-units, time unit>> and defaults to 5s.

Unicast discovery uses the <<modules-transport,transport>> module to perform the
discovery.

[float]
[[file-based-hosts-provider]]
===== File-based hosts provider

The file-based hosts provider configures a list of hosts via an external file.
Elasticsearch reloads this file when it changes, so that the list of seed nodes
can change dynamically without needing to restart each node. For example, this
gives a convenient mechanism for an Elasticsearch instance that is run in a
Docker container to be dynamically supplied with a list of IP addresses to
connect to when those IP addresses may not be known at node startup.

To enable file-based discovery, configure the `file` hosts provider as follows:

[source,txt]
----------------------------------------------------------------
discovery.zen.hosts_provider: file
----------------------------------------------------------------

Then create a file at `$ES_PATH_CONF/unicast_hosts.txt` in the format described
below. Any time a change is made to the `unicast_hosts.txt` file the new
changes will be picked up by Elasticsearch and the new hosts list will be used.

Note that the file-based discovery plugin augments the unicast hosts list in
`elasticsearch.yml`: if there are valid unicast host entries in
`discovery.zen.ping.unicast.hosts` then they will be used in addition to those
supplied in `unicast_hosts.txt`.

The `discovery.zen.ping.unicast.hosts.resolve_timeout` setting also applies to DNS
lookups for nodes specified by address via file-based discovery. This is
specified as a <<time-units, time unit>> and defaults to 5s.

The format of the file is to specify one node entry per line.  Each node entry
consists of the host (host name or IP address) and an optional transport port
number.  If the port number is specified, is must come immediately after the
host (on the same line) separated by a `:`.  If the port number is not
specified, a default value of 9300 is used.

For example, this is an example of `unicast_hosts.txt` for a cluster with four
nodes that participate in unicast discovery, some of which are not running on
the default port:

[source,txt]
----------------------------------------------------------------
10.10.10.5
10.10.10.6:9305
10.10.10.5:10005
# an IPv6 address
[2001:0db8:85a3:0000:0000:8a2e:0370:7334]:9301
----------------------------------------------------------------

Host names are allowed instead of IP addresses (similar to
`discovery.zen.ping.unicast.hosts`), and IPv6 addresses must be specified in
brackets with the port coming after the brackets.

It is also possible to add comments to this file. All comments must appear on
their lines starting with `#` (i.e. comments cannot start in the middle of a
line).

[float]
[[ec2-hosts-provider]]
===== EC2 hosts provider

The {plugins}/discovery-ec2.html[EC2 discovery plugin] adds a hosts provider
that uses the https://github.com/aws/aws-sdk-java[AWS API] to find a list of seed nodes.

[float]
[[azure-classic-hosts-provider]]
===== Azure Classic hosts provider

The {plugins}/discovery-azure-classic.html[Azure Classic discovery plugin] adds a hosts provider
that uses the Azure Classic API find a list of seed nodes.

[float]
[[gce-hosts-provider]]
===== Google Compute Engine hosts provider

The {plugins}/discovery-gce.html[GCE discovery plugin] adds a hosts provider
that uses the GCE API find a list of seed nodes.

[float]
==== Discovery settings

Discovery operates in two phases: First, each node "probes" the addresses of
all known nodes by connecting to each address and attempting to identify the
node to which it is connected. Secondly it shares with the remote node a list
of all of its peers and the remote node responds with _its_ peers in turn. The
node then probes all the new nodes about which it just discovered, requests
their peers, and so on, until it has discovered an elected master node or
enough other masterless nodes that it can perform an election. If neither of
these occur quickly enough then it tries again. This process is controlled by
the following settings.

`discovery.probe.connect_timeout`::

    Sets how long to wait when attempting to connect to each address. Defaults
    to `3s`.

`discovery.probe.handshake_timeout`::

    Sets how long to wait when attempting to identify the remote node via a
    handshake. Defaults to `1s`.

`discovery.find_peers_interval`::

    Sets how long a node will wait before attempting another discovery round.

`discovery.request_peers_timeout`::

    Sets how long a node will wait after asking its peers again before
    considering the request to have failed.
