[[modules-plugins]]
== Plugins

[float]
=== Plugins

Plugins are a way to enhance the basic elasticsearch functionality in a
custom manner. They range from adding custom mapping types, custom
analyzers (in a more built in fashion), native scripts, custom discovery
and more.

coming[1.5.0]

[float]
[[plugins-command-install]]
==== Installing plugins

Installing plugins can either be done manually by placing them under the
`plugins` directory, or using the `plugin` script. Several plugins can
be found under the https://github.com/elasticsearch[elasticsearch]
organization in GitHub, starting with `elasticsearch-`.

Installing plugins typically take the following form:

[source,shell]
-----------------------------------
bin/plugin install [options] <plugin_name>
-----------------------------------

The name of the plugin is a required argument that may have the following forms:

[cols="<,<",options="header",]
|=======================================================================
|Plugin name form |Description
|`elasticsearch/<plugin>/<version>` |
For official elasticsearch plugins, downloaded from download.elasticsearch.org.

|`<groupId>/<artifactId>/<version>` |
For community plugins, downloaded from maven central or oss sonatype.

|`<username>/<repository>`          |
For _site plugins, downloaded from the master branch their github repository.

|=======================================================================

Options could be one of the following:

[cols="<,<,<",options="header",]
|=======================================================================
|Option name |Alternative name  |Description
|`-u <url>`  |`--url<url>`      |
Set exact URL to download the plugin from. Could be for example a local file: `--url file:/path/to/plugin`

|`-t <time>` |`--timeout <time>`|
Sets the timeout for the plugin download. Uses time value format (e.g `30s`, `1m`, `1h`...) and is set to infinite by
default. See also <<plugins-timeout-settings,timeout settings>>.

|`-s`        |`--silent`        |
Sets the verbosity level to silent mode (this option is mutually exclusive with the `-v` option).
See also <<plugins-silent-verbose,silent verbose>>.

|`-v`        |`--verbose`       |
Sets the verbosity level to verbose mode (this option is mutually exclusive with the `-s` option).
See also <<plugins-silent-verbose,silent verbose>>.

|`-h`        |`--help`          |
Display a help message regarding install command

|=======================================================================

[float]
[[plugins-command-uninstall]]
==== Removing plugins

Removing plugins can either be done manually by removing them under the `plugins` directory and depending on plugins
under `bin` or `config` directories, or using the `plugin` script.

Removing plugins typically take the following form:

[source,shell]
-----------------------------------
bin/plugin uninstall [options] <plugin_name>
-----------------------------------

The name of the plugin is a required argument that may have the following forms:

[cols="<,<",options="header",]
|=======================================================================
|Plugin name form |Description
|`<plugin>` |
The short plugin name as it's shown by <<plugins-command-list,list command>>.

|`elasticsearch/<plugin>/<version>` |
For official elasticsearch plugins, downloaded from download.elasticsearch.org.

|`<groupId>/<artifactId>/<version>` |
For community plugins, downloaded from maven central or oss sonatype.

|`<username>/<repository>`          |
For _site plugins, downloaded from the master branch their github repository.

|=======================================================================

Options could be one of the following:

[cols="<,<,<",options="header",]
|=======================================================================
|Option name |Alternative name  |Description
|`-s`        |`--silent`        |
Sets the verbosity level to silent mode (this option is mutually exclusive with the `-v` option).
See also <<plugins-silent-verbose,silent verbose>>.

|`-v`        |`--verbose`       |
Sets the verbosity level to verbose mode (this option is mutually exclusive with the `-s` option).
See also <<plugins-silent-verbose,silent verbose>>.

|`-h`        |`--help`          |
Display a help message regarding uninstall command

|=======================================================================

[float]
[[plugins-command-list]]
==== Listing installed plugins

A list of the currently loaded plugins can be retrieved using the <<cluster-nodes-info,Node Info API>>.

You can also list plugins using `list` command:

[source,shell]
-----------------------------------
bin/plugin list [options]
-----------------------------------

Options could be one of the following:

[cols="<,<,<",options="header",]
|=======================================================================
|Option name |Alternative name  |Description
|`-h`        |`--help`          |
Display a help message regarding list command

|=======================================================================

When no plugin is installed, the `list` command returns no output.

[float]
[[plugins-command-help]]
==== Help

You can list supported commands using `-h` or `--help`:

[source,shell]
-----------------------------------
bin/plugin -h
bin/plugin --help
-----------------------------------

You can also get detailed help about any supported command:

[source,shell]
-----------------------------------
bin/plugin <command> -h
bin/plugin <command> --help
-----------------------------------


[float]
[[plugins-silent-verbose]]
==== Silent/Verbose mode

When running the `plugin` script, you can get more information (debug mode) using `--verbose`.
On the opposite, if you want `plugin` script to be silent, use `--silent` option.

Note that exit codes could be:

* `0`: everything was OK
* `64`: unknown command or incorrect option parameter
* `74`: IO error
* `70`: other errors

[source,shell]
-----------------------------------
bin/plugin install --verbose elasticsearch/marvel/latest
bin/plugin uninstall --silent marvel
-----------------------------------

[float]
[[plugins-timeout-settings]]
==== Timeout settings

By default, the `plugin` script will wait indefinitely when downloading before failing.
The timeout parameter can be used to explicitly specify how long it waits. Here is some examples of setting it to
different values:

[source,shell]
-----------------------------------
# Wait for 30 seconds before failing
bin/plugin install --timeout 30s mobz/elasticsearch-head

# Wait for 1 minute before failing
bin/plugin install --timeout 1m mobz/elasticsearch-head

# Wait forever (default)
bin/plugin install --timeout 0 mobz/elasticsearch-head
-----------------------------------

[float]
==== Proxy settings

To install a plugin via a proxy, you can pass the proxy details using the environment variables `proxyHost` and `proxyPort`.

On Linux and Mac, here is an example of setting it:

[source,shell]
-----------------------------------
bin/plugin -DproxyHost=host_name -DproxyPort=port_number --install mobz/elasticsearch-head
-----------------------------------

On Windows, here is an example of setting it:

[source,shell]
-----------------------------------
set JAVA_OPTS="-DproxyHost=host_name -DproxyPort=port_number"
bin/plugin --install mobz/elasticsearch-head
-----------------------------------


[float]
[[site-plugins]]
==== Site Plugins

Plugins can have "sites" in them, any plugin that exists under the
`plugins` directory with a `_site` directory, its content will be
statically served when hitting `/_plugin/[plugin_name]/` url. Those can
be added even after the process has started.

Installed plugins that do not contain any java related content, will
automatically be detected as site plugins, and their content will be
moved under `_site`.

The ability to install plugins from Github allows to easily install site
plugins hosted there by downloading the actual repo, for example,
running:

[source,js]
--------------------------------------------------
bin/plugin install mobz/elasticsearch-head
bin/plugin install lukas-vlcek/bigdesk
--------------------------------------------------

Will install both of those site plugins, with `elasticsearch-head`
available under `http://localhost:9200/_plugin/head/` and `bigdesk`
available under `http://localhost:9200/_plugin/bigdesk/`.

[float]
==== Mandatory Plugins

If you rely on some plugins, you can define mandatory plugins using the
`plugin.mandatory` attribute, for example, here is a sample config:

[source,js]
--------------------------------------------------
plugin.mandatory: mapper-attachments,analysis-smartcn
--------------------------------------------------

For safety reasons, if a mandatory plugin is not installed, the node
will not start.

deprecated[1.5.0]

If you are still using elasticsearch before 1.5.0, plugin script uses older deprecated options:

[source,shell]
-----------------------------------
# Before 1.5.0, install was --install
bin/plugin --install <org>/<user/component>/<version>
# Installing a local plugin or using a specific download url
bin/plugin --install plugin-name --url file:///path/to/plugin
# Before 1.5.0, uninstall was --remove
bin/plugin --remove <pluginname>
# Using verbose mode
bin/plugin --install mobz/elasticsearch-head --verbose
# Using silent mode
bin/plugin --remove head --silent
# Using timeout options
bin/plugin --install mobz/elasticsearch-head --timeout 30s
-----------------------------------

[float]
==== Lucene version dependent plugins

For some plugins, such as analysis plugins, a specific major Lucene version is
required to run. In that case, the plugin provides in its `es-plugin.properties`
file the Lucene version for which the plugin was built for.

If present at startup the node will check the Lucene version before loading the plugin.

You can disable that check using `plugins.check_lucene: false`.

[float]
[[known-plugins]]
=== Known Plugins

[float]
[[analysis-plugins]]
==== Analysis Plugins

.Supported by Elasticsearch
* https://github.com/elasticsearch/elasticsearch-analysis-icu[ICU Analysis plugin]
* https://github.com/elasticsearch/elasticsearch-analysis-kuromoji[Japanese (Kuromoji) Analysis plugin].
* https://github.com/elasticsearch/elasticsearch-analysis-smartcn[Smart Chinese Analysis Plugin]
* https://github.com/elasticsearch/elasticsearch-analysis-stempel[Stempel (Polish) Analysis plugin]

.Supported by the community
* https://github.com/barminator/elasticsearch-analysis-annotation[Annotation Analysis Plugin] (by Michal Samek)
* https://github.com/yakaz/elasticsearch-analysis-combo/[Combo Analysis Plugin] (by Olivier Favre, Yakaz)
* https://github.com/jprante/elasticsearch-analysis-hunspell[Hunspell Analysis Plugin] (by Jörg Prante)
* https://github.com/medcl/elasticsearch-analysis-ik[IK Analysis Plugin] (by Medcl)
* https://github.com/suguru/elasticsearch-analysis-japanese[Japanese Analysis plugin] (by suguru).
* https://github.com/medcl/elasticsearch-analysis-mmseg[Mmseg Analysis Plugin] (by Medcl)
* https://github.com/chytreg/elasticsearch-analysis-morfologik[Morfologik (Polish) Analysis plugin] (by chytreg)
* https://github.com/imotov/elasticsearch-analysis-morphology[Russian and English Morphological Analysis Plugin] (by Igor Motov)
* https://github.com/synhershko/elasticsearch-analysis-hebrew[Hebrew Analysis Plugin] (by Itamar Syn-Hershko)
* https://github.com/medcl/elasticsearch-analysis-pinyin[Pinyin Analysis Plugin] (by Medcl)
* https://github.com/medcl/elasticsearch-analysis-string2int[String2Integer Analysis Plugin] (by Medcl)
* https://github.com/duydo/elasticsearch-analysis-vietnamese[Vietnamese Analysis Plugin] (by Duy Do)

[float]
[[discovery-plugins]]
==== Discovery Plugins

.Supported by Elasticsearch
* https://github.com/elasticsearch/elasticsearch-cloud-aws[AWS Cloud Plugin] - EC2 discovery and S3 Repository
* https://github.com/elasticsearch/elasticsearch-cloud-azure[Azure Cloud Plugin] - Azure discovery
* https://github.com/elasticsearch/elasticsearch-cloud-gce[Google Compute Engine Cloud Plugin] - GCE discovery

.Supported by the community
* https://github.com/shikhar/eskka[eskka Discovery Plugin] (by Shikhar Bhushan)

[float]
[[river]]
==== River Plugins

.Supported by Elasticsearch
* https://github.com/elasticsearch/elasticsearch-river-couchdb[CouchDB River Plugin]
* https://github.com/elasticsearch/elasticsearch-river-rabbitmq[RabbitMQ River Plugin]
* https://github.com/elasticsearch/elasticsearch-river-twitter[Twitter River Plugin]
* https://github.com/elasticsearch/elasticsearch-river-wikipedia[Wikipedia River Plugin]

.Supported by the community
* https://github.com/domdorn/elasticsearch-river-activemq/[ActiveMQ River Plugin] (by Dominik Dorn)
* https://github.com/albogdano/elasticsearch-river-amazonsqs[Amazon SQS River Plugin] (by Alex Bogdanovski)
* https://github.com/xxBedy/elasticsearch-river-csv[CSV River Plugin] (by Martin Bednar)
* http://www.pilato.fr/dropbox/[Dropbox River Plugin] (by David Pilato)
* http://www.pilato.fr/fsriver/[FileSystem River Plugin] (by David Pilato)
* https://github.com/obazoud/elasticsearch-river-git[Git River Plugin] (by Olivier Bazoud)
* https://github.com/uberVU/elasticsearch-river-github[GitHub River Plugin] (by uberVU)
* https://github.com/sksamuel/elasticsearch-river-hazelcast[Hazelcast River Plugin] (by Steve Samuel)
* https://github.com/jprante/elasticsearch-river-jdbc[JDBC River Plugin] (by Jörg Prante)
* https://github.com/qotho/elasticsearch-river-jms[JMS River Plugin] (by Steve Sarandos)
* https://github.com/endgameinc/elasticsearch-river-kafka[Kafka River Plugin] (by Endgame Inc.)
* https://github.com/mariamhakobyan/elasticsearch-river-kafka[Kafka River Plugin 2] (by Mariam Hakobyan)
* https://github.com/tlrx/elasticsearch-river-ldap[LDAP River Plugin] (by Tanguy Leroux)
* https://github.com/richardwilly98/elasticsearch-river-mongodb/[MongoDB River Plugin] (by Richard Louapre)
* https://github.com/sksamuel/elasticsearch-river-neo4j[Neo4j River Plugin] (by Steve Samuel)
* https://github.com/jprante/elasticsearch-river-oai/[Open Archives Initiative (OAI) River Plugin] (by Jörg Prante)
* https://github.com/sksamuel/elasticsearch-river-redis[Redis River Plugin] (by Steve Samuel)
* https://github.com/rethinkdb/elasticsearch-river-rethinkdb[RethinkDB River Plugin] (by RethinkDB)
* http://dadoonet.github.com/rssriver/[RSS River Plugin] (by David Pilato)
* https://github.com/adamlofts/elasticsearch-river-sofa[Sofa River Plugin] (by adamlofts)
* https://github.com/javanna/elasticsearch-river-solr/[Solr River Plugin] (by Luca Cavanna)
* https://github.com/sunnygleason/elasticsearch-river-st9[St9 River Plugin] (by Sunny Gleason)
* https://github.com/plombard/SubversionRiver[Subversion River Plugin] (by Pascal Lombard)
* https://github.com/kzwang/elasticsearch-river-dynamodb[DynamoDB River Plugin] (by Kevin Wang)
* https://github.com/salyh/elasticsearch-river-imap[IMAP/POP3 Email River Plugin] (by Hendrik Saly)
* https://github.com/codelibs/elasticsearch-river-web[Web River Plugin] (by CodeLibs Project)
* https://github.com/eea/eea.elasticsearch.river.rdf[EEA ElasticSearch RDF River Plugin] (by the European Environment Agency)
* https://github.com/lbroudoux/es-amazon-s3-river[Amazon S3 River Plugin] (by Laurent Broudoux)
* https://github.com/lbroudoux/es-google-drive-river[Google Drive River Plugin] (by Laurent Broudoux)

[float]
[[transport]]
==== Transport Plugins

.Supported by Elasticsearch
* https://github.com/elasticsearch/elasticsearch-transport-memcached[Memcached transport plugin]
* https://github.com/elasticsearch/elasticsearch-transport-thrift[Thrift Transport]
* https://github.com/elasticsearch/elasticsearch-transport-wares[Servlet transport]

.Supported by the community
* https://github.com/tlrx/transport-zeromq[ZeroMQ transport layer plugin] (by Tanguy Leroux)
* https://github.com/sonian/elasticsearch-jetty[Jetty HTTP transport plugin] (by Sonian Inc.)
* https://github.com/kzwang/elasticsearch-transport-redis[Redis transport plugin] (by Kevin Wang)

[float]
[[scripting]]
==== Scripting Plugins

.Supported by Elasticsearch
* https://github.com/hiredman/elasticsearch-lang-clojure[Clojure Language Plugin] (by Kevin Downey)
* https://github.com/elasticsearch/elasticsearch-lang-groovy[Groovy lang Plugin]
* https://github.com/elasticsearch/elasticsearch-lang-javascript[JavaScript language Plugin]
* https://github.com/elasticsearch/elasticsearch-lang-python[Python language Plugin]
* https://github.com/NLPchina/elasticsearch-sql/[SQL language Plugin] (by nlpcn)

[float]
[[site]]
==== Site Plugins

.Supported by the community
* https://github.com/lukas-vlcek/bigdesk[BigDesk Plugin] (by Lukáš Vlček)
* https://github.com/mobz/elasticsearch-head[Elasticsearch Head Plugin] (by Ben Birch)
* https://github.com/royrusso/elasticsearch-HQ[Elasticsearch HQ] (by Roy Russo)
* https://github.com/andrewvc/elastic-hammer[Hammer Plugin] (by Andrew Cholakian)
* https://github.com/polyfractal/elasticsearch-inquisitor[Inquisitor Plugin] (by Zachary Tong)
* https://github.com/karmi/elasticsearch-paramedic[Paramedic Plugin] (by Karel Minařík)
* https://github.com/polyfractal/elasticsearch-segmentspy[SegmentSpy Plugin] (by Zachary Tong)
* https://github.com/xyu/elasticsearch-whatson[Whatson Plugin] (by Xiao Yu)

[float]
[[repository-plugins]]
==== Snapshot/Restore Repository Plugins

.Supported by Elasticsearch

* https://github.com/elasticsearch/elasticsearch-hadoop/tree/master/repository-hdfs[Hadoop HDFS] Repository
* https://github.com/elasticsearch/elasticsearch-cloud-aws#s3-repository[AWS S3] Repository

.Supported by the community

* https://github.com/kzwang/elasticsearch-repository-gridfs[GridFS] Repository (by Kevin Wang)
* https://github.com/wikimedia/search-repository-swift[Openstack Swift]

[float]
[[misc]]
==== Misc Plugins

.Supported by Elasticsearch
* https://github.com/elasticsearch/elasticsearch-mapper-attachments[Mapper Attachments Type plugin]

.Supported by the community
* https://github.com/carrot2/elasticsearch-carrot2[carrot2 Plugin]: Results clustering with carrot2 (by Dawid Weiss)
* https://github.com/derryx/elasticsearch-changes-plugin[Elasticsearch Changes Plugin] (by Thomas Peuss)
* https://github.com/johtani/elasticsearch-extended-analyze[Extended Analyze Plugin] (by Jun Ohtani)
* https://github.com/YannBrrd/elasticsearch-entity-resolution[Entity Resolution Plugin] using http://github.com/larsga/Duke[Duke] for duplication detection (by Yann Barraud)
* https://github.com/spinscale/elasticsearch-graphite-plugin[Elasticsearch Graphite Plugin] (by Alexander Reelsen)
* https://github.com/mattweber/elasticsearch-mocksolrplugin[Elasticsearch Mock Solr Plugin] (by Matt Weber)
* https://github.com/viniciusccarvalho/elasticsearch-newrelic[Elasticsearch New Relic Plugin] (by Vinicius Carvalho)
* https://github.com/swoop-inc/elasticsearch-statsd-plugin[Elasticsearch Statsd Plugin] (by Swoop Inc.)
* https://github.com/endgameinc/elasticsearch-term-plugin[Terms Component Plugin] (by Endgame Inc.)
* http://tlrx.github.com/elasticsearch-view-plugin[Elasticsearch View Plugin] (by Tanguy Leroux)
* https://github.com/sonian/elasticsearch-zookeeper[ZooKeeper Discovery Plugin] (by Sonian Inc.)
* https://github.com/kzwang/elasticsearch-image[Elasticsearch Image Plugin] (by Kevin Wang)
* https://github.com/wikimedia/search-highlighter[Elasticsearch Experimental Highlighter] (by Wikimedia Foundation/Nik Everett)
* https://github.com/wikimedia/search-extra[Elasticsearch Trigram Accelerated Regular Expression Filter] (by Wikimedia Foundation/Nik Everett)
* https://github.com/salyh/elasticsearch-security-plugin[Elasticsearch Security Plugin] (by Hendrik Saly)
* https://github.com/codelibs/elasticsearch-taste[Elasticsearch Taste Plugin] (by CodeLibs Project)
* http://siren.solutions/siren/downloads/[Elasticsearch SIREn Plugin]: Nested data search (by SIREn Solutions)
