[[release-highlights]]
== What's new in {minor-version}

Here are the highlights of what's new and improved in {es} {minor-version}!

For detailed information about this release, see the <<es-release-notes>> and
<<breaking-changes>>.

// Add previous release to the list
// Other versions: 
// {ref-bare}/7.last/release-highlights.html[7.last] 
// | {ref-bare}/8.0/release-highlights.html[8.0]

// Use the notable-highlights tag to mark entries that 
// should be featured in the Stack Installation and Upgrade Guide:

// tag::notable-highlights[] 
[discrete]
=== 7.x REST API compatibility

8.0 introduces several breaking changes to the {es} REST APIs. While it's
important to update your application to account for these changes, finding and
updating every API call in a single upgrade can be painful and error-prone. To
make this process easier, we've added support for 7.x compatibility headers to
our REST APIs. In many cases, these optional headers let you make
7.x-compatible requests to an 8.0 cluster and receive 7.x-compatible responses.

While we still recommend you update your application to use native 8.0 requests
and responses, the 7.x API compatibility headers let you safely make these
changes over a longer period of time.

For more information about the headers and how to use them, see
{ref}/rest-api-compatibility.html[REST API compatibility].

[discrete]
=== Security features are enabled and configured by default

Running {es} without security leaves your cluster exposed to anyone who can send
network traffic to {es}. In previous versions, you had to explicitly enable the 
{es} security features such as authentication, authorization, and network
encryption (TLS). Starting in {es} 8.0, security is
{ref}/configuring-stack-security.html[enabled and configured by default] when
you start {es} for the first time. 

At startup, we generate enrollment tokens that you use to connect a {kib} 
instance or enroll additional nodes in your secured {es} cluster, without having 
to generate security certificates or update YAML configuration files. Just use 
the generated enrollment token when starting new nodes or {kib} instances, and 
the {stack} handles all of the security configuration for you. Out of the box, 
you'll get:

* User authentication
* User authorization
* Encrypted internode communication with TLS
* Encrypted communication between {es} and {kib} with TLS

Need a new enrollment token? Use the 
{ref}/create-enrollment-token.html[`elasticsearch-create-enrollment-token`] 
tool to create enrollment tokens for {es} nodes and {kib} instances.

[discrete]
=== Better protection for system indices

System indices store configurations and internal data for Elastic features.
Generally, system indices are reserved only for internal use by these features.
While possible, directly accessing or changing a system index can cause
instability and other issues.

In 8.0, we've made several changes to protect system indices from direct access.
To access a system index, you must now have the
{ref}/defining-roles.html#roles-indices-priv[`allow_restricted_indices`]
permission set to `true`.

The `superuser` role also no longer gives write access to system indices. As a
result, the built-in `elastic` superuser cannot change system indices by
default.

If available, use {kib} or the associated {es} APIs to manage data for a feature
rather than accessing a system index. If you directly access a system index,
{es} will return a warning in the header of API responses and in the deprecation
logs.

[discrete]
=== Storage savings for `keyword`, `match_only_text`, and `text` fields

We've updated inverted indices, an internal data structure, to use a more
space-efficient encoding. This change will benefit `keyword` fields,
`match_only_text` fields, and, to a lesser extent, `text` fields. In our
benchmarks using application logs, this translated into a 14.4% reduction of
the size of the index of the `message` field (mapped as `match_only_text`) and
an overall 3.5% reduction of the on-disk footprint.

This change will be picked up automatically by both new indices, and existing
indices for every new segment.

[discrete]
=== Faster indexing of `geo_point`, `geo_shape`, and range fields

We've optimized indexing speeds for multi-dimensional points, an internal data
structure used for `geo_point`, `geo_shape`, and range fields. Lucene-level
benchmarks reported 10-15% faster indexing for these fields types. {es} indices
and data streams that mostly consist of these fields may see noticeable
improvements to indexing speed.

// end::notable-highlights[]

// Omit the notable highlights tag for entries that only need to appear in the ES ref:
// [discrete] 
// === Heading
//
// Description. 
