[[release-highlights]]
== What's new in {minor-version}

Here are the highlights of what's new and improved in {es} {minor-version}!

For detailed information about this release, see the <<es-release-notes>> and
<<breaking-changes>>.

// Add previous release to the list
Other versions:
{ref-bare}/7.11/release-highlights.html[7.11]
| {ref-bare}/7.10/release-highlights.html[7.10]
| {ref-bare}/7.9/release-highlights.html[7.9]
| {ref-bare}/7.8/release-highlights.html[7.8]
| {ref-bare}/7.7/release-highlights.html[7.7]
| {ref-bare}/7.6/release-highlights-7.6.0.html[7.6]
| {ref-bare}/7.5/release-highlights-7.5.0.html[7.5]
| {ref-bare}/7.4/release-highlights-7.4.0.html[7.4]
| {ref-bare}/7.3/release-highlights-7.3.0.html[7.3]
| {ref-bare}/7.2/release-highlights-7.2.0.html[7.2]
| {ref-bare}/7.1/release-highlights-7.1.0.html[7.1]
| {ref-bare}/7.0/release-highlights-7.0.0.html[7.0]

// tag::notable-highlights[]

[discrete]
[[frozen-tier-shared-snapshot-cache]]
=== Frozen tier and shared snapshot caches

With 7.12, we're adding a {ref}/ilm-index-lifecycle.html[frozen phase] to
{ilm-init} along with a corresponding {ref}/data-tiers.html#frozen-tier[frozen
data tier] as experimental features. You can use the new frozen phase and frozen
tier to archive rarely searched data as {search-snaps} for long-term storage and
maximum cost savings.

The key advantage of the frozen tier is an experimental new option for mounting
{search-snaps}:
{ref}/searchable-snapshots.html#searchable-snapshot-mount-storage-options[shared
snapshot caches]. Rather than loading a full copy of a snapshotted index into
your cluster, this option uses a small local cache containing only recently
searched parts of the indexâ€™s data. If a search requires data that's not in the
cache, {es} fetches the missing data from the snapshot repository. These caches
have a fixed size and can significantly reduce your storage costs.
{ilm-init} uses shared snapshot caches by default in the frozen phase and
corresponding frozen tier.

To add a node to the frozen tier in an on-premise cluster, assign it the
{ref}/modules-node.html#data-frozen-node[`data_frozen`] node role and set
{ref}/searchable-snapshots.html#searchable-snapshots-shared-cache[`xpack.searchable.snapshot.shared_cache.size`]
in `elasticsearch.yml`. See the {ref}/data-tiers.html#frozen-tier[Data tiers]
and
{ref}/searchable-snapshots.html#searchable-snapshot-mount-storage-options[{search-snaps-cap}]
documentation.

[discrete]
[[analyze-snapshot-repositories]]
=== Analyze snapshot repositories

While there are many third-party storage systems, not all of them work well as
snapshot repositories. Some systems perform poorly or behave incorrectly as a
repository, especially when multiple {es} nodes access them concurrently.

To detect and avoid these problems, you can now use the
{ref}/repo-analysis-api.html[repository analysis API] to analyze a repository's
storage system before using it in production. The API performs a collection of
read and write operations on the repository. These operations are designed to
detect incorrect behavior and measure the performance characteristics of a
system.

[discrete]
[[eql-case-insensitivity]]
=== EQL: Case-insensitive `in` lookups and functions

The `in` and `not in` {ref}/eql-syntax.html#eql-syntax-lookup-operators[lookup
operators] now support case-insensitive variants: `in~` and `not in~`. You can
also {ref}/eql-syntax.html#eql-case-insensitive-functions[make an EQL function
case-insensitive] by adding `~` after the function name, such as
`endsWith~(process_name, ".exe")`.

[discrete]
[[eql-like-regex-keywords]]
=== EQL: `like` and `regex` keywords

In 7.12, we added the `like` and `regex` keywords to EQL. You can use the `like`
keyword to match strings to {ref}/eql-syntax.html#eql-syntax-wildcards[wildcard
patterns], such as `foo*` or `ba?`. You can use the `regex` keyword to match
strings to regular expressions. You can use both `like` and `regex` to match a
string against a list of patterns.

By default, both keywords are case-sensitive. For case-insensitive matching, use
`like~` or `regex~`. For more information, see the
{ref}/eql-syntax.html#eql-syntax-pattern-comparison-keywords[Pattern comparison
keywords] section of the {ref}/eql-syntax.html[EQL syntax documentation].

[discrete]
[[retention-policy-transforms]]
=== Retention policy for transforms

{ctransforms-cap} add new data to the destination index as new entities are
encountered. 7.12 introduces a data retention policy for {transforms} that
enables you to delete old data. This is especially useful for the `latest`
{transform} that has been added in 7.11. For example, if you collect the latest
host information you might want to assume hosts have been decommissioned if they
have not appeared in the logs for more than 30 days. At each checkpoint,
transformed documents whose age is greater than a configured value are deleted.

[discrete]
[[hyperparameter-importance]]
=== Hyperparameter importance

{dfanalytics-cap} training is influenced by settings called hyperparameters. One
of the training outputs is now hyperparameter importance. This value shows which
hyperparameter had the most impact on the training, and what the optimum values
were for each one. You can use this information to speed up the training process
as the hyperparameter optimization process can be stopped when you see that
gains in accuracy flatten.

[discrete]
[[search-time-runtime-support-transform]]
=== Search-time runtime fields support for {transforms}

You can now use `runtime_mappings` in {transforms} to support search-time
runtime fields in searches of the source index. The syntax is the same as for a
standard search. After specifying them, the runtime fields can be used in the
rest of the {transform} configuration.
// end::notable-highlights[]
