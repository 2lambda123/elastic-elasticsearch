[[release-highlights-7.8.0]]
== 7.8.0 release highlights
++++
<titleabbrev>7.8.0</titleabbrev>
++++

//NOTE: The notable-highlights tagged regions are re-used in the
//Installation and Upgrade Guide

// tag::notable-highlights[]
[float]
=== Improvements to geo_shape and geo_bounds

TODO

// end::notable-highlights[]

// tag::notable-highlights[]
[float]
=== Expose aggregation usage in Feature Usage API

It is now possible to fetch a count of aggregations that have been executed
via the <<cluster-nodes-usage,Node Features API>>. Since aggregations are
among the more expensive operations performed on a cluster, this
information can be useful to give an administrator a high-level overview of
usage.

// end::notable-highlights[]


// tag::notable-highlights[]
[float]
=== Add support for T-Test aggregations

{es} now supports a `t_test` (or
https://en.wikipedia.org/wiki/Student%27s_t-test[Student's t-test]) metrics
aggregation, which performs a statistical hypothesis test in which the test
statistic follows a
https://en.wikipedia.org/wiki/Student%27s_t-distribution[Studentâ€™s
t-distribution] under the null hypothesis on numeric values extracted from
the aggregated documents or generated by provided scripts. In practice,
this will tell you if the difference between two population means are
statistically significant and did not occur by chance alone. See
<<search-aggregations-metrics-ttest-aggregation>>.

// end::notable-highlights[]

// tag::notable-highlights[]
[float]
=== Support `value_count` and `avg` aggregations over histogram fields

{es} now implements `value_count` and `avg` aggregations over histogram
fields.

When the `value_count` aggregation is computed on <<histogram,histogram
fields>>, the result of the aggregation is the sum of all numbers in the
`counts` array of the histogram.

When the average is computed on histogram fields>, the result of the
aggregation is the weighted average of all elements in the `values` array
taking into consideration the number in the same position in the `counts`
array.

// end::notable-highlights[]

// tag::notable-highlights[]
[float]
=== Reduce memory for big aggregations run against many shards

{es} now attempts to save memory on the coordinating node by delaying
deserialization of the shard results for the aggregation until the last
second. This is helpful as it makes the shard-aggregations results "short
lived" garbage. It also should shrink the memory usage of aggregations when
they are "waiting" to be merged.

Additionally, when the search is in "batched reduce mode", {es} will force
the results to be serialized between batch reduces in an attempt to keep
the memory usage as low as possible between reductions.

// end::notable-highlights[]

// tag::notable-highlights[]
[float]
=== Scalar functions now supported inside SQL aggregations

When querying {es} using SQL, it is now possible to use scalar functions
inside aggregations. This allows for more complex expressions, including
within `GROUP BY` or `HAVING` clauses. For example:

[source,sql]
--------------------------------------------------
SELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b
FROM test
GROUP BY b
HAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5
--------------------------------------------------
// end::notable-highlights[]

// tag::notable-highlights[]
[float]
=== Add configurable transform throttling

Running transforms can increase load on the cluster. This can have a
detrimental affect on a cluster, especially in batch mode and for the first
checkpoint of a continuous transform. Transforms now support configurable
throttling, similar to reindex. See <<java-rest-high-put-transform>>.


// end::notable-highlights[]
