[discrete]
[[index-rollover]]
== Rollover

When indexing time series data like logs or metrics, you can't write to a single index indefinitely. 
To meet your indexing and search performance requirements and manage resource usage, 
you write to an index until some threshold is met and 
then create a new index and start writing to it instead. 
Using rolling indices enables you to:

* Optimize the active index for high ingest rates on high-performance _hot_ nodes.
* Optimize for search performance on _warm_ nodes.
* Shift older, less frequently accessed data to less expensive _cold_ nodes,
* Delete data according to your retention policies by removing entire indices.

TIP: Rolling over based on index size, document count, or age is preferable
to time-based rollovers. Rolling over at an arbitrary time often results in
many small indices, which can have a negative impact on performance and
resource usage.

[discrete]
[[rollover-data-streams]]
=== Data streams

We recommend using <<indices-create-data-stream, data streams>> to manage time series
data. Data streams automatically track the write index while keeping configuration to a minimum.

Each data stream requires an <<indices-templates,index template>> that contains:

* A name or wildcard (`*`) pattern for the data stream.

* The data stream's timestamp field. This field must be mapped as a
  <<date,`date`>> or <<date_nanos,`date_nanos`>> field data type and must be
  included in every document indexed to the data stream.
  
  * The mappings and settings applied to each backing index when it's created.

Data streams are designed for append-only data. 
If you need to update existing documents, you can configure rolling indices using an index alias.

[discrete]
[[rollover-index-aliases]]
=== Index aliases

Like a data stream, an index alias lets you reference a series of rolling indices as if they were a single index. 
The latest index is designated as the _write index_ and handles all write requests.
When a rollover is triggered, a new
index is created, the write alias is updated to point to the new index, and all
subsequent updates are written to the new index.

An _index template_ specifies the settings for each new index in the series.
You optimize this configuration for ingestion, typically using as many shards as you have hot nodes.



