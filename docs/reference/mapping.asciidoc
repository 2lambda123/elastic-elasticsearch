[[mapping]]
= Mapping

[partintro]
--

Mapping is the process of defining how a document, and the fields it contains,
are stored and indexed. You can choose how and where to map your data. Each
method provides different benefits based on where you are in your data journey.

[discrete]
[[mapping-dynamic]]
== Dynamic mapping
<<dynamic-field-mapping,Dynamic mapping>> allows you to experiment with
and explore data when youâ€™re just getting started. {es} adds new fields
automatically, just by indexing a document. You can add fields to the top-level
mapping, and to inner <<object,`object`>>  and <<nested,`nested`>> fields.

You can also dynamically map runtime fields:

* <<match-mapping-runtime-fields,Map runtime fields in a dynamic template>> so
that new fields are automatically added to the index mapping as runtime fields.
* <<runtime-search-request,Define runtime fields in a search request>> to
experiment with different mapping options, and also fix mistakes in your index
mapping values by overriding values in the mapping during the search request.

[discrete]
[[mapping-explicit]]
== Explicit mapping
<<explicit-mapping,Explicit mapping>> allows you to precisely choose how to
define the mapping definition, such as:

* Which string fields should be treated as full text fields.
* Which fields contain numbers, dates, or geolocations.
* The <<mapping-date-format,format>> of date values.
* Custom rules to control the mapping for
  <<dynamic-mapping,dynamically added fields>>.

You can <<runtime-mapping-fields,explicitly map runtime fields>>,
which allows you to make schema changes without reindexing. You can use runtime
fields in conjunction with indexed fields to balance resource usage and
performance. Your index will be smaller, but with slower search performance.

[discrete]
[[mapping-definition-fields]]
== Fields in the mapping definition
Each document is a collection of fields, which each have
their own <<mapping-types,data type>>. A mapping definition contains a list of
fields or `properties` pertinent to the document.

Most fields are indexed by default, which makes them searchable. When indexing
documents, fields are stored in <<mapping-source-field,`_source`>>, which
contains the original JSON document body that was passed at index time.

<<mapping-fields,Metadata fields>>, like the `_source` field, are used to
customize how a document's associated metadata is handled. Your mapping
definition uses a combination of metadata fields and fields to outline the
document schema.

NOTE: Before 7.0.0, the mapping definition included a type name.
{es} 7.0.0 and later no longer accept a _default_ mapping. See <<removal-of-types>>.

[discrete]
[[mapping-limit-settings]]
== Settings to prevent mapping explosion
Defining too many fields in an index can lead to a mapping explosion, which can
cause out of memory errors and difficult situations to recover from.

Consider a situation where every new document inserted
introduces new fields, such as with <<dynamic-mapping,dynamic mapping>>.
Each new field is added to the index mapping, which can become a
problem as the mapping grows.

Use the <<mapping-settings-limit,mapping limit settings>> to limit the number
of field mappings (created manually or dynamically) and prevent documents from
causing a mapping explosion.

--

include::mapping/types.asciidoc[]

include::mapping/runtime.asciidoc[]

include::mapping/fields.asciidoc[]

include::mapping/params.asciidoc[]

include::mapping/dynamic-mapping.asciidoc[]

include::mapping/explicit-mapping.asciidoc[]

include::mapping/mapping-settings-limit.asciidoc[]

include::mapping/removal_of_types.asciidoc[]
