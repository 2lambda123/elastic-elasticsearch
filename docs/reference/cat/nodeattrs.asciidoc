[[cat-nodeattrs]]
=== cat nodeattrs

Returns information about custom node attributes.

[[cat-nodeattrs-api-request]]
==== {api-request-title}

`GET /_cat/nodeattrs`

[[cat-nodeattrs-api-query-params]]
==== {api-query-parms-title}

include::{docdir}/rest-api/common-parms.asciidoc[tag=http-format]

include::{docdir}/rest-api/common-parms.asciidoc[tag=cat-h]
+
--
If no column values are provided, default columns are returned. If any column
value is provided, default columns are not returned.

For brevity, you can use a column's alias in place of the full column heading
value.

By default, columns are returned in the order provided below.

Valid values are:

`node`::
(Default) Name of the node, such as `DKDM97B`. Alias is `name`.

`host`::
(Default) Host name, such as `n1`. Alias is `h`.

`ip`::
(Default) IP address, such as `127.0.1.1`. Alias is `i`.

`attr`::
(Default) Attribute name, such as `rack`. Alias is `attr.name`.

`value`::
(Default) Attribute value, such as `rack123`. Alias is `attr.value`.

`id`::
ID of the node, such as `k0zy`. Alias is `nodeId`.

`pid`::
Process ID, such as `13061`. Alias is `p`.

`port`::
Bound transport port, such as `9300`. Alias is `po`.
--

include::{docdir}/rest-api/common-parms.asciidoc[tag=help]

include::{docdir}/rest-api/common-parms.asciidoc[tag=local]

include::{docdir}/rest-api/common-parms.asciidoc[tag=master-timeout]

include::{docdir}/rest-api/common-parms.asciidoc[tag=cat-s]

include::{docdir}/rest-api/common-parms.asciidoc[tag=cat-v]


[[cat-nodeattrs-api-columns]]
==== Available columns

You can use the following column values with the `h` (headings) query parameter.




[[cat-nodeattrs-api-example]]
==== {api-examples-title}

[[cat-nodeattrs-api-ex-default]]
===== Example with default columns

[source,js]
--------------------------------------------------
GET /_cat/nodeattrs?v
--------------------------------------------------
// CONSOLE
// TEST[s/\?v/\?v&s=node,attr/]
// Sort the resulting attributes so we can assert on them more easily

The API returns the following response:

[source,txt]
--------------------------------------------------
node    host      ip        attr     value
...
node-0 127.0.0.1 127.0.0.1 testattr test
...
--------------------------------------------------
// TESTRESPONSE[s/\.\.\.\n$/\n(.+ xpack\\.installed true\n)?\n/]
// TESTRESPONSE[s/\.\.\.\n/(.+ ml\\..+\n)*/ non_json]
// If xpack is not installed then neither ... with match anything
// If xpack is installed then the first ... contains ml attributes
// and the second contains xpack.installed=true

The first few columns (`node`, `host`, `ip`) provide basic information about
each node. The `attr` and `value` columns return custom node attributes, one per
line.

[[cat-nodeattrs-api-ex-headings]]
===== Example with explicit columns

The following API request returns the `node`, `pid`, `attr`, and `value`
<<cat-nodeattrs-api-columns,columns>>.

[source,js]
--------------------------------------------------
GET /_cat/nodeattrs?v&h=node,pid,attr,value
--------------------------------------------------
// CONSOLE
// TEST[s/,value/,value&s=node,attr/]
// Sort the resulting attributes so we can assert on them more easily

The API returns the following response:

[source,txt]
--------------------------------------------------
name    pid   attr     value
...
node-0 19566 testattr test
...
--------------------------------------------------
// TESTRESPONSE[s/19566/\\d*/]
// TESTRESPONSE[s/\.\.\.\n$/\n(.+ xpack\\.installed true\n)?\n/]
// TESTRESPONSE[s/\.\.\.\n/(.+ ml\\..+\n)*/ non_json]
// If xpack is not installed then neither ... with match anything
// If xpack is installed then the first ... contains ml attributes
// and the second contains xpack.installed=true