[[cat-shards]]
== cat shards

The `shards` command is the detailed view of what nodes contain which
shards.  It will tell you if it's a primary or replica, the number of
docs, the bytes it takes on disk, and the node where it's located.

Here we see a single index, with three primary shards and no replicas:

[source,js]
--------------------------------------------------
GET _cat/shards
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]
// TEST[s/^/PUT twitter\n{"settings": {"number_of_replicas": 0}}\n/]

will show the indices with all shards

[source,text]
--------------------------------------------------
twitter 0 p STARTED    5 3.2kb 127.0.0.1 node-0
--------------------------------------------------
// TESTRESPONSE[s/3\.2kb/.*/ ]
// TESTRESPONSE[_cat]

[float]
[[index-pattern]]
=== Index pattern

If you have many shards, you may wish to limit which indices show up
in the output.  You can always do this with `grep`, but you can save
some bandwidth by supplying an index pattern to the end.

[source,js]
--------------------------------------------------
GET _cat/shards/twitt*
--------------------------------------------------
// CONSOLE
// TEST[continued]

And you will only see indices matching the specified pattern

[source,sh]
--------------------------------------------------
twitter 0 p STARTED    1 3.2kb 127.0.0.1 node-0
--------------------------------------------------
// TESTRESPONSE[s/3\.2kb/.*/ ]
// TESTRESPONSE[_cat]


[float]
[[relocation]]
=== Relocation

Let's say you've checked your health and you see two relocating
shards.  Where are they from and where are they going?

[source,sh]
--------------------------------------------------
GET _cat/shards
--------------------------------------------------
// CONSOLE
// TEST[skip:cannot trigger relocation]

You can see easily from and to which nodes those shards are currently relocating.

[source,sh]
--------------------------------------------------
twitter 0 r RELOCATING 3014 31.1mb 192.168.56.20 I8hydUG -> 192.168.56.30 bGG90GE
twitter 1 r RELOCATING 3013 29.6mb 192.168.56.10 H5dfFeA -> 192.168.56.30 bGG90GE
--------------------------------------------------


[float]
[[states]]
=== Shard states

Before a shard can be used, it goes through an `INITIALIZING` state.
`shards` can show you which ones.

You can try this out, by increasing the number of replicas

[source,sh]
--------------------------------------------------
PUT twitter/_settings
{
  "number_of_replicas" : 1
}

GET _cat/shards
--------------------------------------------------
// CONSOLE
// TEST[skip:cannot trigger initialization reliably]

And you will get an output like this (given you are fast enough)

[source,sh]
--------------------------------------------------
twitter 0 p STARTED      3014 31.1mb 192.168.56.10 H5dfFeA
twitter 0 r INITIALIZING    0 14.3mb 192.168.56.30 bGG90GE
--------------------------------------------------

If a shard cannot be assigned, for example you've overallocated the
number of replicas for the number of nodes in the cluster, the shard
will remain `UNASSIGNED` with the <<reason-unassigned,reason code>> `ALLOCATION_FAILED`.

[source,sh]
--------------------------------------------------
PUT twitter/_settings
{
  "number_of_replicas" : 1
}

GET _cat/shards
--------------------------------------------------
// CONSOLE

[source,sh]
--------------------------------------------------
twitter 0 p STARTED    1 3.2kb 127.0.0.1 node-0
twitter 0 r UNASSIGNED ALLOCATION_FAILED
--------------------------------------------------
// TESTRESPONSE[s/3\.2kb/.*/ ]
// TESTRESPONSE[_cat]
// TEST[continued]

[float]
[[reason-unassigned]]
=== Reasons for unassigned shard

These are the possible reasons for a shard to be in a unassigned state:

[horizontal]
`INDEX_CREATED`::           Unassigned as a result of an API creation of an index.
`CLUSTER_RECOVERED`::       Unassigned as a result of a full cluster recovery.
`INDEX_REOPENED`::          Unassigned as a result of opening a closed index.
`DANGLING_INDEX_IMPORTED`:: Unassigned as a result of importing a dangling index.
`NEW_INDEX_RESTORED`::      Unassigned as a result of restoring into a new index.
`EXISTING_INDEX_RESTORED`:: Unassigned as a result of restoring into a closed index.
`REPLICA_ADDED`::           Unassigned as a result of explicit addition of a replica.
`ALLOCATION_FAILED`::       Unassigned as a result of a failed allocation of the shard.
`NODE_LEFT`::               Unassigned as a result of the node hosting it leaving the cluster.
`REROUTE_CANCELLED`::       Unassigned as a result of explicit cancel reroute command.
`REINITIALIZED`::           When a shard moves from started back to initializing, for example, with shadow replicas.
`REALLOCATED_REPLICA`::     A better replica location is identified and causes the existing replica allocation to be cancelled.
