[[search-your-data]]
= Search your data

[[search-query]]
A _search query_, or _query_, is a request for information about data in 
{es} data streams or indices.

You can think of a query as a question, written in a way {es} understands.
Depending on your data, you can use a query to get answers to questions like:

* What processes on my server take longer than 500 milliseconds to respond?
* What users on my network ran `regsvr32.exe` within the last week?
* What pages on my website contain a specific word or phrase?

A _search_ consists of one or more queries that are combined and sent to {es}.
Documents that match a search's queries are returned in the _hits_, or
_search results_, of the response.

A search may also contain additional information used to better process its
queries. For example, a search may be limited to a specific index or only return
a specific number of results.

[discrete]
[[run-an-es-search]]
== Run a search

You can use the <<search-search,search API>> to search data stored in {es} data
streams or indices. The API's `query` request body parameter accepts queries
written in <<query-dsl,Query DSL>>.

The following request searches `my-index-000001` using a
<<query-dsl-match-query,`match`>> query. This query matches documents with a
`user.id` value of `kimchy`.

[source,console]
----
GET /my-index-000001/_search
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
----
// TEST[setup:my_index]

The API response returns the top 10 documents matching the query in the
`hits.hits` property.

[source,console-result]
----
{
  "took": 5,
  "timed_out": false,
  "_shards": {
    "total": 1,
    "successful": 1,
    "skipped": 0,
    "failed": 0
  },
  "hits": {
    "total": {
      "value": 1,
      "relation": "eq"
    },
    "max_score": 1.3862942,
    "hits": [
      {
        "_index": "my-index-000001",
        "_id": "kxWFcnMByiguvud1Z8vC",
        "_score": 1.3862942,
        "_source": {
          "@timestamp": "2099-11-15T14:12:12",
          "http": {
            "request": {
              "method": "get"
            },
            "response": {
              "bytes": 1070000,
              "status_code": 200
            },
            "version": "1.1"
          },
          "message": "GET /search HTTP/1.1 200 1070000",
          "source": {
            "ip": "127.0.0.1"
          },
          "user": {
            "id": "kimchy"
          }
        }
      }
    ]
  }
}
----
// TESTRESPONSE[s/"took": 5/"took": "$body.took"/]
// TESTRESPONSE[s/"_id": "kxWFcnMByiguvud1Z8vC"/"_id": "$body.hits.hits.0._id"/]

[discrete]
[[common-search-options]]
=== Common search options

You can use the following options to customize your searches.

*Query DSL* +
<<query-dsl,Query DSL>> supports a variety of query types you can mix and match
to get the results you want, including:

* <<query-dsl-bool-query,Boolean>> and other <<compound-queries,compound
queries>>, which let you combine queries and match results based on multiple
criteria
* <<term-level-queries,Term-level queries>> for filtering and finding exact matches
* <<full-text-queries,Full text queries>>, which are commonly used in search
engines
* <<geo-queries,Geo>> and <<shape-queries,spatial queries>>

*Aggregations* +
You can use <<search-aggregations,search aggregations>> to get statistics and
other summaries of your search results. Aggregations help you
answer questions like:

* What's the average response time for my servers?
* What are the top IP addresses hit by users on my network?

*Search multiple data streams and indices* +
You can use comma-separated values and grep-like index patterns to search
several data streams and indices in the same request. You can even boost search
results from specific indices. See <<search-multiple-indices>>.

*Paginate search results* +
By default, searches return only the top 10 matching hits. To retrieve
more or fewer documents, see <<paginate-search-results>>.

*Retrieve selected fields* +
The search response's `hit.hits` property includes the full document
<<mapping-source-field,`_source`>> for each hit. To retrieve only a subset of
the `_source` or other fields, see <<search-fields>>.

*Sort search results* +
By default, search hits are sorted by `_score`, a <<relevance-scores,relevance
score>> that measures how well each document matches the query. To customize the
calculation of these scores, use the
<<query-dsl-script-score-query,`script_score`>> query. To sort search hits by
other field values, see <<sort-search-results>>.

*Run an async search* +
{es} searches are designed to run on large volumes of data quickly, often
returning results in milliseconds. For this reason, searches are
_synchronous_ by default. The search request waits for complete results before
returning a response. 

However, complete results can take longer for searches across
<<frozen-indices,frozen indices>> or <<modules-cross-cluster-search,multiple
clusters>>.

To avoid long waits, you can use run an _asynchronous_, or _async_, search
instead. An <<async-search-intro,async search>> lets you retrieve partial
results for a long-running search now and get complete results later.

[discrete]
[[search-shard-routing]]
=== Search shard routing

To protect against hardware failure and increase search capacity, {es} can store
copies of an index's data across multiple shards in multiple nodes. When running
a search request, {es} first determines which nodes contain copies of an
index's data. {es} then selects an eligible node and forwards the search request
to the node and its shard copies. This process is known as _search shard
routing_ or _routing_.

[discrete]
[[search-adaptive-replica]]
==== Adaptive replica selection

By default, {es} uses _adaptive replica selection_ to select and route search
requests to the best eligible node. This node is chosen based on
<<allocation-awareness,allocation awareness>> and the following criteria:

* Response time of prior requests between the request's coordinating node
and the node containing the index data
* How long the node took to run previous searches
* Queue size of the node's `search` <<modules-threadpool,threadpool>>

Adaptive replica selection is designed to decrease search latency. However, you
can disable adaptive replica selection by setting
`cluster.routing.use_adaptive_replica_selection` to `false` in
`elasticsearch.yml` or using the <<cluster-update-settings,cluster settings
API>>. If disabled, searches are routed to all eligible nodes using a
round-robin selection method, which may result in slower searches.

[discrete]
[[shard-and-node-preference]]
==== Set a preference

By default, adaptive replica selection chooses from all nodes and shards
containing the index's data. However, you may only want data from a local node
or want to route searches to a specific node based on its hardware. Or
you may want to send repeated searches to the same shards to take advantage of
caching.

To limit the set of eligible nodes and shards for a search request, use
the search API's <<search-preference,`preference`>> query parameter.

For example, the following request searches `my-index-000001` with a
`preference` of `_local`. This restricts the search to shards on the
local node. If the local node contains no copies of the index's data, the
request uses adaptive replica selection to pick another eligible node as a
fallback.

[source,console]
----
GET /my-index-000001/_search?preference=_local
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
----
// TEST[setup:my_index]

You can also use the `preference` parameter to route searches to specific shards
based on a provided string. If the cluster state and selected shards
do not change, searches using the same `preference` string are routed to the
same shards in the same order.

We recommend using a unique `preference` string, such as a user name or web
session ID. This string cannot start with a `_`.

TIP: You can use this option to serve cached results for frequently-used or
resource-intensive searches. If the shard's data doesn't change, repeated
searches with the same `preference` string retrieve results from the same
<<shard-request-cache,shard request cache>>. For time-series use cases, such as
logs, data in older indices is rarely updated and can be served directly from
this cache.

The following request searches `my-index-000001` with a `preference` string of
`my-custom-shard-string`.

[source,console]
----
GET /my-index-000001/_search?preference=my-custom-shard-string
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
----
// TEST[setup:my_index]

NOTE: If the cluster state or selected shards change, the same `preference`
string may not route searches to the same shards in the same order. This can
occur for a number of reasons, including shard relocations and shard failures. A
node can also reject a search request, which {es} would re-route to another
node.

[discrete]
[[search-routing]]
==== Use a routing value

When you index a document, you can specify an optional
<<mapping-routing-field,routing value>>, which routes the document to a
specific shard.

For example, the following indexing request routes a document using
`my-routing-value`.

[source,console]
----
POST /my-index-000001/_doc?routing=my-routing-value
{
  "@timestamp": "2099-11-15T13:12:00",
  "message": "GET /search HTTP/1.1 200 1070000",
  "user": {
    "id": "kimchy"
  }
}
----

You can use the same routing value in the `routing` query parameter of a search
request. This ensures the search runs only on the shard used to index the
document.

[source,console]
----
GET /my-index-000001/_search?routing=my-routing-value
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
----
// TEST[setup:my_index]

You can also provide multiple comma-separated routing values:

[source,console]
----
GET /my-index-000001/_search?routing=my-routing-value,my-routing-value-2
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
----
// TEST[setup:my_index]

include::request/track-total-hits.asciidoc[]
include::quickly-check-for-matching-docs.asciidoc[]

include::request/collapse.asciidoc[]
include::filter-search-results.asciidoc[]
include::request/highlighting.asciidoc[]
include::{es-repo-dir}/async-search.asciidoc[]
include::{es-repo-dir}/search/near-real-time.asciidoc[]
include::paginate-search-results.asciidoc[]
include::request/inner-hits.asciidoc[]
include::search-fields.asciidoc[]
include::{es-repo-dir}/modules/cross-cluster-search.asciidoc[]
include::search-multiple-indices.asciidoc[]
include::request/sort.asciidoc[]
