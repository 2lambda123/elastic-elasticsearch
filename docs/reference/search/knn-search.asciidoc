[[knn-search]]
=== kNN search API
++++
<titleabbrev>kNN search</titleabbrev>
++++

experimental::[]

Performs a k-nearest neighbor search and returns the matching documents.

[source,console]
----
PUT my-vector-index
{
  "mappings": {
    "properties": {
      "image_vector": {
        "type": "dense_vector",
        "dims": 3,
        "index": true,
        "similarity": "l2_norm"
      }
    }
  }
}

GET /my-vector-index/_knn_search
{
  "knn": {
    "field": "image_vector",
    "query_vector": [0.3, 0.1, 1.2],
    "k": 10,
    "num_candidates": 100
  },
  "_source": ["name", "date"]
}
----
// TEST[setup:my_index]

[[knn-search-api-request]]
==== {api-request-title}

`GET /<target>/_knn_search`

`POST /<target>/_knn_search`

[[knn-search-api-prereqs]]
==== {api-prereq-title}

* If the {es} {security-features} are enabled, you must have the `read`
<<privileges-list-indices,index privilege>> for the target data stream, index,
or alias.

[[knn-search-api-desc]]
==== {api-description-title}

The kNN search API performs a k-nearest neighbor search on a
<<dense-vector,`dense_vector`>> field. Given a query vector, it finds the _k_
closest vectors and returns those documents as search hits. To be used in the
kNN search API, the `dense_vector` field must
<<index-vectors-knn-search, enable indexing>>.

{es} uses the https://arxiv.org/abs/1603.09320[HNSW algorithm] to support
efficient kNN search. Like most kNN algorithms, HNSW is an approximate method
that sacrifices result accuracy for improved speed. This means the documents
returned are not always the true _k_ closest neighbors.

[[knn-search-api-path-params]]
==== {api-path-parms-title}

`<target>`::
(Optional, string) Comma-separated list of data streams, indices, and aliases
to search. Supports wildcards (`*`). To search all data streams and indices,
use `*` or `_all`.

NOTE: The kNN search API does not support remote indices (as in cross-cluster
search).

[role="child_attributes"]
[[knn-search-api-query-params]]
==== {api-query-parms-title}

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=routing]

[role="child_attributes"]
[[knn-search-api-request-body]]
==== {api-request-body-title}

`knn`::
(Required, object) Defines the kNN query to run.
+
.Properties of `knn` object
[%collapsible%open]
====
`field`::
(Required, string) The name of the vector field to search against.

`query_vector`::
(Required, array of floats) The query vector.

`k`::
(Required, integer) The final number of nearest neighbors to return as top
hits. This value must be less than `num_candidates`.

`num_candidates`::
(Required, integer) The number of nearest neighbor candidates to consider per
shard. Increasing `num_candidates` tends to improve the accuracy of the final
`k` results. This value cannot exceed 10,000.
====

include::{es-repo-dir}/search/search.asciidoc[tag=fields-param-def]
include::{es-repo-dir}/search/search.asciidoc[tag=docvalue-fields-def]
include::{es-repo-dir}/search/search.asciidoc[tag=stored-fields-def]
include::{es-repo-dir}/search/search.asciidoc[tag=source-filtering-def]

[role="child_attributes"]
[[knn-search-api-response-body]]
==== {api-response-body-title}

A kNN search response has the exact same structure as a
<<search-api-response-body, search response>>. However, certain sections take
on a meaning specific to kNN search:

* The <<search-api-response-body-score,document `_score`>> is determined by
the similarity between the query and document vector. See
<<dense-vector-similarity, `similarity`>> for details.
* The `hits.total` object contains the total number of nearest neighbor
candidates considered, which is `num_candidates * num_shards`. The `relation`
will always be `eq`, indicating an exact value.
