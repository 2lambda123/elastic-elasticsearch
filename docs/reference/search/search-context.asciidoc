[role="xpack"]
[testenv="basic"]
[[search-context]]
==== Search Context

A search request by default executes against the most recent point in time view
of the target indices, which is called a search context. Elasticsearch search context
is a lightweight, point in time, view into the state of the data as it existed when
initiated. In some cases, it's preferred to perform multiple search requests using
the same search context. For example, if <<indices-refresh,refreshes>> happen between
search_after requests, then the results of those requests might not be consistent as
changes happening between searches are only visible to the more recent search context.

A search context must be opened explicitly before being used in search requests. The
keep_alive parameter tells Elasticsearch how long it should keep the seach context alive,
e.g. `?keep_alive=5m`.

[source,console]
--------------------------------------------------
POST /my_index/_search_context?keep_alive=1m
--------------------------------------------------
// TEST[setup:my_index]

The result from the above request includes a `id`, which should
be passed to the `id` of the `search_context` parameter of a search request.

[source,console]
--------------------------------------------------
POST /_search <1>
{
    "size": 100,
    "query": {
        "match" : {
            "title" : "elasticsearch"
        }
    },
    "search_context": {
	    "id":  "46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWICBXV1aWQyAAAFdXVpZDEAAQltYXRjaF9hbGw_gAAAAA==", <2>
	    "keep_alive": "1m"  <3>
    }
}
--------------------------------------------------
// TEST[catch:missing]

<1> A search request with `search_context` must not specify `index`, `routing`,
and {ref}/search-request-body.html#request-body-search-preference[`preference`]
as these parameters are copied from the `search_context`.
<2> The `id` parameter tells Elasticsearch to execute the request using
the point-in-time readers from this search context id.
<3> The `keep_alive` parameter tells Elasticsearch how long it should extend
the time to live of the search context

IMPORTANT: The open search context request and each subsequent search request can
return different `id`; thus always use the most recently received `id` for the
next search request.

[[search-context-keep-alive]]
===== Keeping the search context alive
The `keep_alive` parameter, which is passed to a open search context request and
search request, extends the time to live of the search context. The value
(e.g. `1m`, see <<time-units>>) does not need to be long enough to
process all data -- it just needs to be long enough for the next request.

Normally, the background merge process optimizes the index by merging together
smaller segments to create new, bigger segments. Once the smaller segments are
no longer needed they are deleted. However, open search contexts prevent the
old segments from being deleted since they are still in use.

TIP: Keeping older segments alive means that more disk space and file handles
are needed. Ensure that you have configured your nodes to have ample free file
handles. See <<file-descriptors>>.

Additionally, if a segment contains deleted or updated documents then the search
context must keep track of whether each document in the segment was live at the
time of the initial search request. Ensure that your nodes have sufficient heap
space if you have many open search contexts on an index that is subject to ongoing
deletes or updates.

You can check how many search contexts are open with the
<<cluster-nodes-stats,nodes stats API>>:

[source,console]
---------------------------------------
GET /_nodes/stats/indices/search
---------------------------------------

===== Close search context API

Search contexts are automatically closed when the `keep_alive` has
been elapsed. However keeping search contexts has a cost, as discussed in the
<<search-context-keep-alive,previous section>>. Search contexts should be closed
as soon as they are no longer used in search requests.

[source,console]
---------------------------------------
DELETE /_search_context
{
    "id" : "46ToAwMDaWR4BXV1aWQxAgZub2RlXzEAAAAAAAAAAAEBYQNpZHkFdXVpZDIrBm5vZGVfMwAAAAAAAAAAKgFjA2lkeQV1dWlkMioGbm9kZV8yAAAAAAAAAAAMAWIBBXV1aWQyAAA="
}
---------------------------------------
// TEST[catch:missing]

The API returns the following response:

[source,console-result]
--------------------------------------------------
{
   "succeeded": true, <1>
   "num_freed": 3     <2>
}
--------------------------------------------------
// TESTRESPONSE[s/"succeeded": true/"succeeded": $body.succeeded/]
// TESTRESPONSE[s/"num_freed": 3/"num_freed": $body.num_freed/]

<1> If true, all search contexts associated with the given id are successfully closed
<2> The number of search contexts have been successfully closed
