[[search-uri-request]]
=== URI Search

Specifies search criteria as query parameters in the request URI.

[source,js]
--------------------------------------------------
GET twitter/_search?q=user:kimchy
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]


[[search-uri-request-api-request]]
==== {api-request-title}

`GET /<index>/_search?q=<parameter>`


[[search-uri-request-api-desc]]
==== {api-description-title}

You can use query parameters to define your search criteria directly in the 
request URI, rather than in the request body. Request URI searches do not 
support the full {es} Query DSL, but are handy for testing.


[[search-uri-request-api-path-params]]
==== {api-path-parms-title}

include::{docdir}/rest-api/common-parms.asciidoc[tag=index]


[[search-uri-request-api-query-params]]
==== {api-query-parms-title}

`allow_partial_search_results`:: 
  (Optional, boolean) Set to `false` to fail the request if only partial results 
  are available. Defaults to `true`, which returns partial results in the event 
  of timeouts or partial failures You can override the default behavior for all 
  requests by setting `search.default_allow_partial_results` to `false` in the 
  cluster settings.

`analyze_wildcard`:: 
  (Optional, boolean) Should wildcard and prefix queries be analyzed or not. 
  Defaults to `false`.
  
`analyzer`:: 
  (Optional, string) The analyzer name to be used when analyzing the query 
  string.

`batched_reduce_size`:: 
  (Optional, integer) The number of shard results that should be reduced at once 
  on the coordinating node. This value should be used as a protection mechanism 
  to reduce the memory overhead per search request if the potential number of 
  shards in the request can be large.

`default_operator`:: 
  (Optional, string) The default operator to be used, can be `AND` or `OR`. 
  Defaults to `OR`.

`df`:: 
  (Optional, string) The default field to use when no field prefix is defined 
  within the query.

`explain`:: 
  (Optional, string) For each hit, include an explanation of how the score was 
  computed.

`from`:: 
  (Optional, integer) The starting from index of the hits to return. 
  Defaults to `0`.

`lenient`:: 
  (Optional, boolean) If set to true will cause format based failures (like 
  providing text to a numeric field) to be ignored. Defaults to false.

`q`:: 
  (Optional, string) The query string (maps to the `query_string` query, see 
  <<query-dsl-query-string-query,Query String Query>> for more details.

`search_type`:: 
  (Optional, string) The type of the search operation to perform. Can be 
  `dfs_query_then_fetch` or `query_then_fetch`. Defaults to `query_then_fetch`. 
  See <<request-body-search-search-type,Search Type>> for more details on the 
  different types of search that can be performed.

`size`:: 
  (Optional, integer) The number of hits to return. Defaults to `10`.

`_source`:: 
  (Optional, boolean) Set to `false` to disable retrieval of the `_source` 
  field. You can also retrieve part of the document by using `_source_includes` 
  and `_source_excludes`(see the 
  <<request-body-search-source-filtering, request body>> documentation for more 
  details).

`stored_fields`:: 
  (Optional, string) The selective stored fields of the document to return for 
  each hit, comma delimited. Not specifying any value will cause no fields to 
  return.

`sort`:: 
  (Optional, string) Sorting to perform. Can either be in the form of 
  `fieldName`, or `fieldName:asc`/`fieldName:desc`. The fieldName can either be 
  an actual field within the document, or the special `_score` name to indicate 
  sorting based on scores. There can be several `sort` parameters (order is 
  important).

`track_scores`:: 
  (Optional, boolean) When sorting, set to `true` in order to still track scores 
  and return them as part of each hit.

`track_total_hits`:: 
  (Optional, integer) Defaults to `10,000`. Set to `false` in order to disable 
  the tracking of the total number of hits that match the query. It also accepts 
  an integer which in this case represents the number of hits to count 
  accurately. (See the <<request-body-search-track-total-hits, request body>> 
  documentation for more details).

`timeout`::
  (Optional, <<time-units, time units>>) A search timeout, bounding the search 
  request to be executed within the specified time value and bail with the hits 
  accumulated up to that point when expired. Defaults to no timeout.

`terminate_after`:: 
  (Optional, integer) The maximum number of documents to collect for each shard, 
  upon reaching which the query execution will terminate early. If set, the 
  response will have a boolean field `terminated_early` to indicate whether the 
  query execution has actually terminated_early. Defaults to no terminate_after.


[[search-uri-request-api-example]]
==== {api-examples-title}

[source,js]
--------------------------------------------------
GET twitter/_search?q=user:kimchy
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]


The API returns the following response:

[source,js]
--------------------------------------------------
{
    "timed_out": false,
    "took": 62,
    "_shards":{
        "total" : 1,
        "successful" : 1,
        "skipped" : 0,
        "failed" : 0
    },
    "hits":{
        "total" : {
            "value": 1,
            "relation": "eq"
        },
        "max_score": 1.3862944,
        "hits" : [
            {
                "_index" : "twitter",
                "_type" : "_doc",
                "_id" : "0",
                "_score": 1.3862944,
                "_source" : {
                    "user" : "kimchy",
                    "date" : "2009-11-15T14:12:12",
                    "message" : "trying out Elasticsearch",
                    "likes": 0
                }
            }
        ]
    }
}
--------------------------------------------------
// TESTRESPONSE[s/"took": 62/"took": "$body.took"/]
