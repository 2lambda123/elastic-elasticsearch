[[search-aggregations-bucket-geodistance-aggregation]]
=== Geo Distance

A multi-bucket aggregation that works on `geo_point` fields and conceptually works very similar to the <<search-aggregations-bucket-range-aggregation,range>> aggregation. The user can define a point of origin and a set of distance range buckets. The aggregation evaluate the distance of each document value from the origin point and determines the buckets it belongs to based on the ranges (a document belongs to a bucket if the distance between the document and the origin falls within the distance range of the bucket).

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "rings_around_amsterdam" : {
            "geo_distance" : {
                "field" : "location",
                "origin" : "52.3760, 4.894",
                "ranges" : [
                    { "to" : 100 },
                    { "from" : 100, "to" : 300 },
                    { "from" : 300 }
                ]
            }
        }
    }
}
--------------------------------------------------

Response:

[source,js]
--------------------------------------------------
{
    "aggregations": {
        "rings" : {
            "buckets": [
                {
                    "unit": "km",
                    "to": 100.0,
                    "doc_count": 3
                },
                {
                    "unit": "km",
                    "from": 100.0,
                    "to": 300.0,
                    "doc_count": 1
                },
                {
                    "unit": "km",
                    "from": 300.0,
                    "doc_count": 7
                }
            ]
        }
    }
}
--------------------------------------------------

The specified field must be of type `geo_point` (which can only be set explicitly in the mappings). And it can also hold an array of `geo_point` fields, in which case all will be taken into account during aggregation. The origin point can accept all formats supported by the `geo_point` <<mapping-geo-point-type,type>>:

* Object format: `{ "lat" : 52.3760, "lon" : 4.894 }` - this is the safest format as it is the most explicit about the `lat` & `lon` values
* String format: `"52.3760, 4.894"` - where the first number is the `lat` and the second is the `lon`
* Array format: `[4.894, 52.3760]` - which is based on the `GeoJson` standard and where the first number is the `lon` and the second one is the `lat`

By default, the distance unit is `km` but it can also accept: `mi` (miles), `in` (inch), `yd` (yards), `m` (meters), `cm` (centimeters), `mm` (millimeters).

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "rings" : {
            "geo_distance" : {
                "field" : "location",
                "origin" : "52.3760, 4.894",
                "unit" : "mi", <1>
                "ranges" : [
                    { "to" : 100 },
                    { "from" : 100, "to" : 300 },
                    { "from" : 300 }
                ]
            }
        }
    }
}
--------------------------------------------------

<1> The distances will be computed as miles

There are two distance calculation modes: `sloppy_arc` (the default), `arc` (most accurate) and `plane` (fastest). The `arc` calculation is the most accurate one but also the more expensive one in terms of performance. The `sloppy_arc` is faster but less accurate. The `plane` is the fastest but least accurate distance function. Consider using `plane` when your search context is "narrow" and spans smaller geographical areas (like cities or even countries). `plane` may return higher error mergins for searches across very large areas (e.g. cross continent search). The distance calculation type can be set using the `distance_type` parameter:

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "rings" : {
            "geo_distance" : {
                "field" : "location",
                "origin" : "52.3760, 4.894",
                "distance_type" : "plane",
                "ranges" : [
                    { "to" : 100 },
                    { "from" : 100, "to" : 300 },
                    { "from" : 300 }
                ]
            }
        }
    }
}
--------------------------------------------------


==== Track Missing
added[1.2.0]

Like all other values source aggregations (those aggregations that are either based on document fields or on scripts) this
aggregation supports the `track_missing` setting. This setting serves as a syntactic sugar for adding a `missing`
aggregation as a sibling to this one. Behind the scenes, this flag will in fact create a normal `missing` aggregation, that
will appear in the response like a normal `missing` aggregation response. when `track_missing` is set to `true`, the name
of the created `missing` aggregation is derived from the name of this `geo_distance` aggregations (e.g. if this `geo_distance` aggregation
is called `rings`, the name of the corresponding `missing` aggregation will be named `rings_missing`. It is
also possible to just provide the name of the aggregation as the value of the `track_missing` field (that is, the `track_missing`
settings can either accepts `true|false` values or a `string` indicating the name of the `missing` aggregation.

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "rings" : {
            "geo_distance" : {
                "field" : "location",
                "origin" : "52.3760, 4.894",
                "distance_type" : "plane",
                "track_missing" : true,
                "ranges" : [
                    { "to" : 100 },
                    { "from" : 100, "to" : 300 },
                    { "from" : 300 }
                ]
            }
        }
    }
}
--------------------------------------------------

Response:

[source,js]
--------------------------------------------------
{
    "aggregations": {
        "rings_missing" : {
            "value" : 4 <1>
        },
        "rings" : {
            "buckets": [
                ...
            ]
        }
    }
}
--------------------------------------------------

<1> 4 documents are not associated with a `geo_point`

If `term_missing` is set to a string value, say `"no_location"`, the response would then be:

[source,js]
--------------------------------------------------
{
    "aggregations": {
        "no_location" : {
            "value" : 4
        },
        "rings" : {
            "buckets": [
                ...
            ]
        }
    }
}
--------------------------------------------------