￿[[search-explain]]
== Explain API

The explain API calculates the relevance score for a particular document and
shows what led to that score. This can help you understand why a document is
(or isn't) showing up in the search results for a particular query.

You must run explain against a particular document. You cannot specify multiple
indices, types, or documents.

[float]
=== Usage

Full query example:

[source,js]
--------------------------------------------------
GET /twitter/_doc/0/_explain
{
      "query" : {
        "match" : { "message" : "elasticsearch" }
      }
}
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

This yields the following result:

[source,js]
--------------------------------------------------
{
   "_index": "twitter",
   "_type": "_doc",
   "_id": "0",
   "matched": true,
   "explanation": {
      "value": 1.6943599,
      "description": "weight(message:elasticsearch in 0) [PerFieldSimilarity],
result of:",
      "details": [
         {
            "value": 1.6943599,
            "description": "score(doc=0,freq=1.0 = termFreq=1.0\n), product
of:",
            "details": [
               {
                  "value": 1.3862944,
                  "description": "idf, computed as log(1 + (docCount - docFreq
+ 0.5) / (docFreq + 0.5)) from:",
                  "details": [
                     {
                        "value": 1.0,
                        "description": "docFreq",
                        "details": []
                     },
                     {
                        "value": 5.0,
                        "description": "docCount",
                        "details": []
                      }
                   ]
               },
                {
                  "value": 1.2222223,
                  "description": "tfNorm, computed as (freq * (k1 + 1)) / (freq
+ k1 * (1 - b + b * fieldLength / avgFieldLength)) from:",
                  "details": [
                     {
                        "value": 1.0,
                        "description": "termFreq=1.0",
                        "details": []
                     },
                     {
                        "value": 1.2,
                        "description": "parameter k1",
                        "details": []
                     },
                     {
                        "value": 0.75,
                        "description": "parameter b",
                        "details": []
                     },
                     {
                        "value": 5.4,
                        "description": "avgFieldLength",
                        "details": []
                     },
                     {
                        "value": 3.0,
                        "description": "fieldLength",
                        "details": []
                     }
                  ]
               }
            ]
         }
      ]
   }
}
--------------------------------------------------
// TESTRESPONSE

The q parameter provides a shortcut for specifying the query. The following
request is equivalent to the full query_string query in the previous example:


[source,js]
--------------------------------------------------
GET /twitter/_doc/0/_explain?q=message:search
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

This yields the same result as the previous request.

[float]
=== All parameters:

[horizontal]
`_source`::

    Set to true to retrieve the document _source along with the explanation.
To retrieve a subset of the document _source, you can
use _source_include and _source_exclude. For more information, see the
<<get-source-filtering,Get API>>.

`stored_fields`::
    Specifies which fields to return as part of the explained document.

`routing`::
    Controls routing when routing was used during indexing.

`parent`::
    Same effect as setting the routing parameter.

`preference`::
    Specifies the shard on which `explain` is executed.

`source`::
    Puts the data of the request in the query string of the url.

`q`::
    The query string (maps to the query_string query).

`df`::
    The default field to use when no field prefix is defined within
    the query.

`analyzer`::
    The analyzer name to be used when analyzing the query
    string. Defaults to the default search analyzer.

`analyze_wildcard`::
    Analize wildcard and prefix queries? Defaults to false.

`lenient`::
    Ignore format-based failures (like providing text to a numeric field)?
Defaults to false.

`default_operator`::
    The default operator to use; can be AND or
    OR. Defaults to OR.
