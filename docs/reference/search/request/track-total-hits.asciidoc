[[search-request-track-total-hits]]
=== Track total hits

The total hit count can't be computed accurately without visiting all matches,
which is costly for queries that match lots of documents
The `track_total_hits` parameter allows you to control how the number of hits
should be tracked.
When set to `true` the search response will contain the total number of hits
that match the query:

[source,js]
--------------------------------------------------
GET /_search
{
    "track_total_hits": true,
    "query" : {
        "match_all" : {}
    }
}
--------------------------------------------------
// CONSOLE

\... returns:

[source,js]
--------------------------------------------------
{
  "_shards": ...
   "hits" : {
      "total" : 2048,     <1>
      "max_score" : 1.0,
      "hits" : []
  }
}
--------------------------------------------------
// TESTRESPONSE[s/"_shards": \.\.\./"_shards": "$body._shards",/]
// TESTRESPONSE[s/"total": 2048/"total": $body.hits.total/]

<1> The total number of hits that match the query.

If you don't need to track the total number of hits you can improve query times
by setting this option to `false`. In such case the search can efficiently skip
non-competitive hits because it doesn't need to count all matches:

[source,js]
--------------------------------------------------
GET /_search
{
    "track_total_hits": false,
    "query": {
        "term": {
            "title": "fast"
        }
    }
}
--------------------------------------------------
// CONSOLE

\... returns:

[source,js]
--------------------------------------------------
{
  "_shards": ...
   "hits" : {
      "total" : -1,     <1>
      "max_score" : 0.42,
      "hits" : []
  }
}
--------------------------------------------------
// TESTRESPONSE[s/"_shards": \.\.\./"_shards": "$body._shards",/]
// TESTRESPONSE[s/"max_score": 0\.42/"max_score": $body.hits.max_score/]

<1> The total number of hits is unknown.

Given that it is often enough to have a lower bound of the number of hits, such as
"there are more than 1000 hits", it is also possible to set `track_total_hits`
as an integer that represents the number of hits to count accurately.
The search can efficiently skip non-competitive document as soon as  collecting at least
$`track_total_hits` documents. This is a good trade off to speed up searches
if you don't need the accurate number of hits after a certain threshold.

NOTE: When `track_total_hits` is an integer the total hit count in the response
cannot be greater than this number. It is accurate if it is less than the
`track_total_hits` number and a lower bound if it is equal.

For instance the following query will track the total hit count that match
the query up to 100 documents:

[source,js]
--------------------------------------------------
GET /_search
{
    "track_total_hits": 100,
    "query": {
        "term": {
            "title": "fast"
        }
    }
}
--------------------------------------------------
// CONSOLE

The `hits.total` in the response is accurate if it is less than the
`track_total_hits` number (`100`):

[source,js]
--------------------------------------------------
{
  "_shards": ...
   "hits" : {
      "total" : 42,         <1>
      "max_score" : 0.42,
      "hits" : []
  }
}
--------------------------------------------------
// TESTRESPONSE[s/"_shards": \.\.\./"_shards": "$body._shards",/]
// TESTRESPONSE[s/"max_score": 0\.42/"max_score": $body.hits.max_score/]
// TESTRESPONSE[s/"total": 100/"value": $body.hits.total/]

<1> There are exactly 42 documents that match the query.

\... and a lower bound otherwise:

[source,js]
--------------------------------------------------
{
  "_shards": ...
   "hits" : {
      "total" : 100,         <1>
      "max_score" : 0.42,
      "hits" : []
  }
}
--------------------------------------------------
// TESTRESPONSE[s/"_shards": \.\.\./"_shards": "$body._shards",/]
// TESTRESPONSE[s/"max_score": 0\.42/"max_score": $body.hits.max_score/]
// TESTRESPONSE[s/"total": 100/"value": $body.hits.total/]

<1> There are at least 100 documents that match the query.