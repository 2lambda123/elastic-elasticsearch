[role="xpack"]
[testenv="basic"]
[[upgrade-transforms]]
= Upgrade {transforms} API

[subs="attributes"]
++++
<titleabbrev>Upgrade {transforms}</titleabbrev>
++++

Upgrades all {transforms}.

[[upgrade-transforms-request]]
== {api-request-title}

`POST _transform/_upgrade`

[[upgrade-transforms-prereqs]]
== {api-prereq-title}

Requires the following privileges:

* cluster: `manage_transform` (the `transform_admin` built-in role grants this
  privilege)
* source indices: `read`, `view_index_metadata`
* destination index: `read`, `index`.


[[upgrade-transforms-desc]]
== {api-description-title}

{transforms-cap} are compatible across minor versions and backwards compatibile 
between major versions. However, over time, the format of {transforms} may 
change. This API upgrades all {transforms} that can be upgraded to meet the 
functional requirements of the latest available version. Upgrading {transforms} 
may also enable new features and improve performance.

The process converts any {transforms} with older formats into the latest format; 
including internal data structures that store {transform} state and checkpoints. 
Previous versions are removed which frees up resources.

If an upgrade step fails, the upgrade stops, and an error is returned about the 
underlying issue. Resolve the issue then re-run the process again. A summary is 
returned when the upgrade is finished.

[IMPORTANT]
====

* When {es} {security-features} are enabled, your {transform} remembers the 
roles of the user who created or updated it last. In contrast to 
<<update-transform,update transform>>, upgrade {transforms} does not change the 
stored roles, therefore it can be run by a super user without impacting existing 
permissions.

====


[[upgrade-transforms-query-parms]]
== {api-query-parms-title}

`dry_run`::
  (Optional, Boolean) When `true`, only checks for updates but does not execute 
  them. Defaults to `false`.


[[upgrade-transforms-example]]
== {api-examples-title}

To upgrade the {transforms}, perform the following API call:

[source,console]
--------------------------------------------------
POST _transform/_upgrade
--------------------------------------------------
// TEST[setup:simple_kibana_continuous_pivot]

When all {transforms} are upgraded, you receive a summary:

[source,console-result]
----
{
  "no_action": 1
}
----
// TESTRESPONSE[s/"no_action" : 1/"no_action" : $body.no_action/]
