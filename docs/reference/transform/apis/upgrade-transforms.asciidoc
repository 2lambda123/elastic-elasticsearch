[role="xpack"]
[testenv="basic"]
[[upgrade-transforms]]
= Upgrade {transforms} API

[subs="attributes"]
++++
<titleabbrev>Upgrade {transforms}</titleabbrev>
++++

Upgrades all {transforms}.

[[upgrade-transforms-request]]
== {api-request-title}

`POST _transform/_upgrade`

[[upgrade-transforms-prereqs]]
== {api-prereq-title}

Requires the following privileges:

* cluster: `manage_transform` (the `transform_admin` built-in role grants this
  privilege)
* source indices: `read`, `view_index_metadata`
* destination index: `read`, `index`.


[[upgrade-transforms-desc]]
== {api-description-title}



This API upgrades all existing {transforms} that are necessary to be upgraded.
{transforms-cap} are compatible between different versions and backwards 
compatibility is kept between major versions. However, it is still necessary to 
upgrade them to meet functional requirements. Upgrading {transforms} might also 
enable new features or improve performance.

During upgrade, the {transforms} are rewritten into the latest format including 
internal data structures that store state and checkpoints. Resources are also 
freed up by cleaning up previous versions.

If an upgrade step fails, the process stops, and an error is returned that 
informs about the underlying issues. It might be necessary to manually resolve 
the problems then the process can be re-run again. A summary is returned when 
the upgrade is finished.

[IMPORTANT]
====

* When {es} {security-features} are enabled, your {transform} remembers the 
roles of the user who created or updated it last. In contrast to 
<<update-transform,update transform>>, upgrade {transforms} does not change the 
stored roles, therefore it needs to be run by a super user.

====


[[upgrade-transforms-query-parms]]
== {api-query-parms-title}

`dry_run`::
  (Optional, Boolean) When `true`, only checks for updates but does not execute 
  them. Defaults to `false`.


[[upgrade-transforms-example]]
== {api-examples-title}

To upgrade the {transforms}, perform the following API call:

[source,console]
--------------------------------------------------
POST _transform/_upgrade
--------------------------------------------------
// TEST[setup:simple_kibana_continuous_pivot]

When all {transforms} are upgraded, you receive a summary:

[source,console-result]
----
{
  "no_action": 1
}
----
// TESTRESPONSE[s/"no_action" : 1/"no_action" : $body.no_action/]
