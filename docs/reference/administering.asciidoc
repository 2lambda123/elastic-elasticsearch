[[administer-elasticsearch]]
= Administering {es}

[partintro]
--
Elasticsearch is a complex piece of software, with many moving parts. There are
many APIs and features that are designed to help you manage your Elasticsearch
cluster.

--

[[backup-cluster-data]]
== Back up a cluster's data

As with any software that stores data, it is important to routinely back up your
data. {es} replicas provide high availability during runtime; they enable you to
tolerate sporadic node loss without an interruption of service.

Replicas do not provide protection from catastrophic failure, however. For that,
you need a real backup of your clusterâ€”a complete copy in case something goes
wrong.

To back up your cluster's data, you can use the <<modules-snapshots,snapshot API>>.

include::{es-repo-dir}/modules/snapshots.asciidoc[tag=snapshot-intro]

[role="xpack"]
[[backup-secured-cluster-data]]
== Data backup of a secured cluster

In this context, a secured cluster designates a cluster with {es}
{security-features} enabled. Specifically, this means that the snapshot API
call needs to be authorized.

`snapshot_user` is a reserved role that can be assigned to the user that the
snapshot endpoint is run as. This is the only role necessary if all the user
does is periodic snapshots as part of the backup procedure. Besides, it also
grants privileges to list all the existing snapshots (of any repository) as
well as list and view settings of all indices, including the `.security` index.
It does *not* grant privileges to create repositories, restore snapshots, or
search indices. Hence, the user can view and snapshot all indices, but cannot
access or modify any data.

The restore API requires the `manage` cluster privilege. There is no bespoke
role for the restore process. This privilege is very permissive and should only
be granted to users in the "administrator" category. Specifically, it allows
malicious users to exfiltrate data to a location of their choosing. Automated
tools should not run as users with this privilege.

For more information, see {stack-ov}/security-privileges.html[Security privileges]
and {stack-ov}/built-in-roles.html[Built-in roles].

[[backup-cluster-configuration]]
== Back up a cluster's configuration

Besides data backup, configuration backup is also important, especially when it
becomes large and difficult to reconstruct.

Configuration resides in <<config-files-location, regular text files>> on every
cluster node. Sensitive setting values, like for example passwords for
Watcher's notification servers, are specified inside a binary secure container,
the <<secure-settings, elasticsearch.keystore>> file. Moreover, some setting
values are file paths to the associated configuration data, for example the
ingest geo ip database. All these files are contained inside the `ES_PATH_CONF`
directory.

NOTE: All changes to configuration files are done by manually editing the files
or using command line utilities, but *not* through APIs. In practice, these
changes are infrequent after the initial setup.

We recommend that you take regular (ideally, daily) backups of your {es} config
(`$ES_PATH_CONF`) directory using the file backup software of your choice.
Because some of these files may contain sensitive data such as passwords and
TLS keys, you should investigate whether your backup software and/or storage
solution are able to encrypt this data.

Using the <<cluster-update-settings, cluster settings API>> it is possible to
override some settings from configuration files. You can capture these in a
*data* backup snapshot by specifing the `include_global_state: true` (default)
parameter to the snapshot API. Using the <<cluster-get-settings, get settings
API>> it is also possible to extract these configuration values in a text
format:

[source,js]
--------------------------------------------------
GET _cluster/settings?pretty&flat_settings&filter_path=persistent
--------------------------------------------------
//CONSOLE
//TEST

You can store the output of this as a file together with the rest of
configuration files.

NOTE: Transient settings are not considered for backup.

TIP: We recommend that you have a configuration management plan for these
configuration files. You may wish to check them into version control, or
provision them though your choice of configuration management tool.

NOTE: {es} {security-features} store configuration data, like for example role
definitions and API keys, inside a dedicate special index. This "system" data,
complements the <<secure-settings, security settings>> configuration and should
<<backup-security-index-configuration, backed up as well>>.

NOTE: Other {stack} components, like Kibana and {ml-cap}, store their configuration
data inside other dedicated indices. From {es}'s perspective these are just data
so you can use the regular <<backup-cluster-data, data backup>> process.

[role="xpack"]
[[security-backup]]
== Backup security configuration

[role="xpack"]
[float]
[[backup-security-file-based-configuration]]
=== Backup file-based security configuration

{es} {security-features} are configured using the <<security-settings,
`xpack.security` namespace>> inside the `elasticsearch.yml` and
`elasticsearch.keystore` files. In addition there are several other
<<security-files, extra configuration files>> inside the same `ES_PATH_CONF`
directory. These files define roles and role mappings as well as
<<configuring-file-realm, configure the file realm>>. More, some of the
settings specify file paths to security sensitive data, such as TLS keys and
certificates for the HTTP client and inter-node communication and private key files for
<<ref-saml-settings, SAML>>, <<ref-oidc-settings, OIDC>> and the
<<ref-kerberos-settings, Kerberos>> realms. All these are also stored inside
`ES_PATH_CONF` (the path settings are relative).

To back up all this configuration you can use a <<backup-cluster-configuration,
conventional file-based backup>>.

NOTE: File backups must run on every cluster node.

NOTE: File backups will store non-security configuration as well. Backing-up
only {security-features} configurations is not supported. A backup is a
point in time record of state of the complete configuration.

IMPORTANT: The `elasticsearch.keystore`, TLS keys and SAML, OIDC, and Kerberos
realms private key files require confidentiality. This is crucial when files
are copied to the backup location, as this increases the surface for malicious
snooping.

[role="xpack"]
[float]
[[backup-security-index-configuration]]
=== Backup security data

{es} {security-features} store system configuration data inside a
dedicated index. This index is named `.security-6` in the {es} 6.x versions and
`.security-7` in the 7.x releases. The `.security` alias always points to the
appropriate index. This index contains the data which is not available in
configuration files and *cannot* be reliably backed up using standard
filesystem tools. This data describes:

* the definition of users in the native realm (including hashed passwords)
* role definitions (defined via the <<security-api-put-role, API>>)
* role mappings (defined via the <<security-api-put-role-mapping, API>>)
* application privileges
* API keys

Hence, `.security` contains resources and definitions more than configurations,
but all of which are required in a complete {security-features} backup.

Use the <<modules-snapshots, standard {es} snapshot functionality>> to backup
`.security`, as you would for any <<backup-cluster-data, other data index>>.
For convenience, here are the complete steps:

. Create a repository that you can use to backup the `.security` index.
It is preferable to have a <<backup-security-repos, dedicated repository>> for
this special index.

+
--
[source,js]
-----------------------------------
PUT /_snapshot/my_backup
{
  "type": "fs",
  "settings": {
    "location": "my_backup_location"
  }
}
-----------------------------------
// CONSOLE

The user calling this API must have the elevated `manage` cluster privilege, to
prevent <<backup-secured-cluster-data, non-administrators exfiltrating data>>.

--

. Create a user and assign it only the built-in `snapshot_user` role.
+
--
The following example creates a new user `snapshot_user` in the
{stack-ov}/native-realm.html[native realm], but it is not important of which
realm the user is a member of:

[source,js]
--------------------------------------------------
POST /_security/user/snapshot_user
{
  "password" : "secret",
  "roles" : [ "snapshot_user" ]
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

--

. Create incremental snapshots authorizing as `snapshot_user`.
+
--
The following example shows how to use the create snapshot API to backup
the `.security` index to the `my_backup` repository created earlier.

[source,js]
--------------------------------------------------
PUT /_snapshot/my_backup/snapshot_1
{
  "indices": ".security",
  "include_global_state": true <1>
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

<1> This captures all the persistent settings stored in the global cluster
metadata as well as other configurations such as aliases and stored scripts.
Note that this includes non-security configuration and that it complements but
does not replace the <<backup-cluster-configuration, filesystem configuration
files backup>>.

--

IMPORTANT: The index format is only compatible within a single major version,
and cannot be restored onto a version earlier that the version from which it
originated. e.g. You can restore a security snapshot from 6.6.0 into 6.7.0
cluster, but you cannot restore it to a cluster running {es} 6.5.0 or 7.0.0.

[float]
[[backup-security-repos]]
==== Controlling access to the backup repository

The snapshot of the security index will typically contain sensitive data such
as user names and password hashes. Because password are stored using
<<hashing-settings, cryptographic hashes>> the disclosure of a snapshot would
not automaticaly allow a third party to authenticate as one of your users or
use API keys, but it would disclose confidential information.

It is also important that you protected the integrity of these backups in case
you ever need to restore them. If a third party is able to modify the stored
backups they may be able to install a back door that would grant access if the
snapshot is loaded into an {es} cluster.

We recommend that you:

* Snapshot the `.security` index in a dedicated repository, where read and write
access is strictly restricted and audited.
* If there are indications that the snapshot has been read, change the passwords
of the users in the native realm and revoke API keys.
* If there are indications that the snapshot has been tampered with, do not
restore it. There is currently no option for the restore process to detect
malicious tampering.

[float]
[role="xpack"]
[[restore-security-configuration]]
=== Restoring security configuration

NOTE: You can restore a snapshot of the `.security` index only if it was
created in a previous minor version in the same major version. The last minor
version of every major release can convert and read formats of the index for
both its major version and the next one.

When you restore security configuration you have the option of doing a complete
restore of *all* configurations, including non-security ones, or to only restore
the contents of `.security`, which as <<backup-security-index-configuration,
previously>> described, comprises only resource-type of configurations. The
first option has the advantage of restoring a cluster to a clearly defined
state from a past point in time. The second option touches only security
configuration resources, but it is not a complete restore of {security-features}.

To restore your security configuration from a backup, first make sure that the
repository holding `.security` snapshots is installed:

[source,js]
--------------------------------------------------
GET /_snapshot/my_backup
--------------------------------------------------
// CONSOLE
// TEST[continued]

[source,js]
--------------------------------------------------
GET /_snapshot/my_backup/snapshot_1
--------------------------------------------------
// CONSOLE
// TEST[continued]

Then log into one of the node hosts, navigate to {es} installation directory,
and follow these steps:

. Add a new user with the `superuser` built-in role to the
{stack-ov}/file-realm.html[file realm].
+
--
For example, create a user named `restore_user`:
[source,shell]
--------------------------------------------------
bin/elasticsearch-users useradd restore_user -p password -r superuser
--------------------------------------------------
--

. Using the previously created user, delete the existing `.security-6` or
`.security-7` index.
+
--
[source,shell]
--------------------------------------------------
curl -u restore_user -X DELETE "localhost:9200/.security-*"
--------------------------------------------------

WARNING: After this step any authentication that relies on the `.security`
index will not work. This means that all API calls that authenticate with
native or reserved users will fail, as will any user that relies on a native role.
The file-realm user we created in the step above will continue to work
because it is not stored in the `.security` index, and uses the builtin
`superuser` role.

--

. Using the same user, restore the `.security` index from the snapshot.
+
--
[source,shell]
--------------------------------------------------
 curl -u restore_user -X POST "localhost:9200/_snapshot/my_backup/snapshot_1/_restore" -H 'Content-Type: application/json' -d'
 {
    "indices": ".security-*",
    "include_global_state": true <1>
 }
 '
--------------------------------------------------

<1> The `include_global_state: true` is mandatory only for a complete restore.
This will restore the global cluster metadata, which contains configurations
for the complete cluster. If you set this to `false` it will recover only the
contents of the `.security` index, i.e. usernames and password hashes, API
keys, application privileges, role and role mapping definitions.
--

. Optionally, cherry-pick and <<cluster-update-settings,apply the persistent
settings>> that you <<backup-cluster-configuration, have extracted>> with the
`GET _cluster/settings` API, if you need to review and override the settings
that were included in the snapshot (by the `include_global_state` flag).

If you pursue a complete point in time restore of the cluster, you also have to
restore configuration files. Again, this will restore non-security settings as
well.

This entails a straight-up filesystem copy of the backed up configuration files
and overwrite of the contents of `$ES_PATH_CONF` and restart the node. This
needs to be done on *every node*. Depending on the extent of the differences
between your current cluster configuration and the restored configuration, you
may not be able to perform a rolling restart.  If you are performing a full
restore of your configuration directory, we recommend a full cluster restart as
the safest option.  Alternatively, you may wish to restore you configuration
files to a separate location on disk and use file comparison tools to review
the differences between your existing configuration and the restored
configuration.
