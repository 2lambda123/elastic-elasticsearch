[[prevalidate-node-removal-api]]
=== Prevalidate node removal API
++++
<titleabbrev>Prevalidate node removal</titleabbrev>
++++

NOTE: {cloud-only}

Prevalidate node removal.

[[prevalidate-node-removal-api-request]]
==== {api-request-title}

`POST /_internal/prevalidate_node_removal`

[[prevalidate-node-removal-api-prereqs]]
==== {api-prereq-title}

* If the {es} {security-features} are enabled, you must have the `monitor` or `manage` <<privileges-list-cluster,cluster privilege>> to use this API.

[[prevalidate-node-removal-api-desc]]
==== {api-description-title}

This API checks whether removal of the specified node(s) from the cluster would succeed or not. In case the cluster has a <<cluster-health,`red` cluster health status>>, this verifies that the removal of the node(s) would not risk removing the last remaining copy of an unassigned shard.

The response includes the overall safety of the removal of the specified nodes, and a detailed response for each node. The node-specific part of the response also includes more details on why removal of that node might not succeed.

Note that only one of the query parameters (`names`, `ids`, or `external_ids`) must be used to specified the set of nodes.

The result of the prevalidation is expressed as either `YES`, `NO`, or `UNKNOWN`.

[[prevalidate-node-removal-api-query-params]]
==== {api-query-parms-title}

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=master-timeout]

`names`::
(Optional, string) Comma-separated list of node names.

`ids`::
(Optional, string) Comma-separated list of node IDs.

`external_ids`::
(Optional, string) Comma-separated list of node external IDs.

[[prevalidate-node-removal-api-response-body]]
==== {api-response-body-title}

`result`::
    (object) Prevalidation result for the removal of all the provided nodes.

`nodes`::
    (object) Prevalidation result for the removal of each of the provided nodes.

[[prevalidate-node-removal-api-example]]
==== {api-examples-title}

This example validates whether it is safe to remove the nodes `node1` and `node2`. The response indicates that it is safe to remove `node1`, but it might not be safe to remove `node2`. Therefore, the overall prevalidation of the removal of the two nodes is `UNKNOWN`.

[source,console]
--------------------------------------------------
POST /_internal/prevalidate_node_removal?names=node1,node2
--------------------------------------------------
// TEST[skip:doc tests run with only a single node]

The API returns the following response:

[source,console-result]
--------------------------------------------------
{
  "result": {
    "is_safe": "UNKNOWN",
    "reason": "cluster health is RED"
  },
  "nodes": [
    {
      "id": "node1-id",
      "name" : "node1",
      "external_id" : "node1-externalId",
      "result" : {
        "is_safe": "YES",
        "reason": ""
      }
    },
    {
      "id": "node2-id",
      "name" : "node2",
      "external_id" : "node2-externalId",
      "result" : {
        "is_safe": "UNKNOWN",
        "reason": "node may contain a copy of a red index shard"
      }
    }
  ]
}
--------------------------------------------------
