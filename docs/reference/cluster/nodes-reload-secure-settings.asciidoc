[[cluster-nodes-reload-secure-settings]]
=== Nodes reload secure settings API
++++
<titleabbrev>Nodes reload secure settings</titleabbrev>
++++

The cluster nodes reload secure settings API is used to re-load the keystore on each node.

[[cluster-nodes-reload-secure-settings-api-request]]
==== {api-request-title}
`POST _nodes/reload_secure_settings` +

`POST _nodes/nodeId1,nodeId2/reload_secure_settings` +

`POST _nodes/_local/reload_secure_settings`

[[cluster-nodes-reload-secure-settings-api-desc]]
==== {api-description-title}
Secure settings are stored in an on-disk keystore. When you have updated
the secure settings in your keystore, you can use this API to reload those
settings on each node. You may also selectively target `nodeId1` and
`nodeId2`. The node selection options are detailed <<cluster-nodes,here>>.

[[cluster-nodes-reload-secure-settings-path-params]]
==== {api-path-parms-title}

`<nodes>`::
    (Optional, string) The names of particular nodes in the cluster to target.
    May also be `_local` to reload settings on just the local node.

NOTE: {es} requires consistent secure settings across the cluster nodes, but this consistency is not enforced.
Hence, reloading specific nodes is not standard. It is only justifiable when retrying failed reload operations.

[[cluster-nodes-reload-secure-settings-api-request-body]]
==== {api-request-body-title}

When the {es} keystore is password protected and not simply obfuscated, the password for the keystore needs
to be provided in the request to reload the secure settings.
Reloading the settings for the whole cluster assumes that all nodes' keystores are protected with the same password
and is only allowed when {ref}/configuring-tls.html#tls-transport[node to node communications are encrypted]

`reload_secure_settings`::
  (Optional, string) The password for the Elasticsearch keystore.

[source,js]
--------------------------------------------------
POST _nodes/reload_secure_settings
{
  "reload_secure_settings": "s3cr3t" <1>
}
--------------------------------------------------
// NOTCONSOLE

<1> The common password that the {es} keystore is encrypted with in every node of the cluster.

Alternatively the secure settings can be reloaded on a per node basis, locally accessing the API and passing the
node-specific {es} keystore password.

[source,js]
--------------------------------------------------
POST _nodes/_local/reload_secure_settings
{
  "reload_secure_settings": "s3cr3t" <1>
}
--------------------------------------------------
// NOTCONSOLE

<1> The password that the {es} keystore is encrypted with on the local node.

[[cluster-nodes-reload-secure-settings-api-example]]
==== {api-examples-title}

Rest example:

[source,console]
--------------------------------------------------
POST _nodes/reload_secure_settings
POST _nodes/nodeId1,nodeId2/reload_secure_settings
--------------------------------------------------
// TEST[setup:node]
// TEST[s/nodeId1,nodeId2/*/]

The response contains the `nodes` object, which is a map, keyed by the
node id. Each value has the node `name` and an optional `reload_exception`
field. The `reload_exception` field is a serialization of the exception
that was thrown during the reload process, if any.

[source,console-result]
--------------------------------------------------
{
  "_nodes": {
    "total": 1,
    "successful": 1,
    "failed": 0
  },
  "cluster_name": "my_cluster",
  "nodes": {
    "pQHNt5rXTTWNvUgOrdynKg": {
      "name": "node-0"
    }
  }
}
--------------------------------------------------
// TESTRESPONSE[s/"my_cluster"/$body.cluster_name/]
// TESTRESPONSE[s/"pQHNt5rXTTWNvUgOrdynKg"/\$node_name/]
