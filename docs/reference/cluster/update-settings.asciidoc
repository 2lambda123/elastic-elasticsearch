[[cluster-update-settings]]
=== Cluster update settings API
++++
<titleabbrev>Cluster update settings</titleabbrev>
++++

Updates cluster-wide settings.


[[cluster-update-settings-api-request]]
==== {api-request-title}

`PUT /_cluster/settings`

[[cluster-update-settings-api-prereqs]]
==== {api-prereq-title}

* If the {es} {security-features} are enabled, you must have the `manage`
<<privileges-list-cluster,cluster privilege>> to use this API.

[[cluster-update-settings-api-desc]]
==== {api-description-title}

With specifications in the request body, this API call can update cluster
settings. Updates to settings are persistent, meaning they apply across
restarts.

You can reset persistent settings by assigning a `null` value. If a
persistent setting is reset, the first one of these values that is defined is
applied:

* the setting in the configuration file
* the default value.

The order of precedence for cluster settings is:

1. persistent cluster settings
2. settings in the `elasticsearch.yml` configuration file.

It's best to set all cluster-wide settings with the `settings` API and use the
`elasticsearch.yml` file only for local configurations. This way you can be sure that
the setting is the same on all nodes. If, on the other hand, you define different
settings on different nodes by accident using the configuration file, it is very
difficult to notice these discrepancies.


[[cluster-update-settings-api-query-params]]
==== {api-query-parms-title}

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=flat-settings]

`include_defaults`::
    (Optional, Boolean) If `true`, returns all default cluster settings.
    Defaults to `false`.

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=timeoutparms]


[[cluster-update-settings-api-example]]
==== {api-examples-title}

An example of a persistent update:

[source,console]
--------------------------------------------------
PUT /_cluster/settings
{
  "persistent" : {
    "indices.recovery.max_bytes_per_sec" : "50mb"
  }
}
--------------------------------------------------

The response to an update returns the changed setting, as in this response to
the example:

[source,console-result]
--------------------------------------------------
{
  ...
  "persistent" : {
    "indices.recovery.max_bytes_per_sec" : "50mb"
  }
}
--------------------------------------------------
// TESTRESPONSE[s/\.\.\./"acknowledged": true,/]


This example resets a setting:

[source,console]
--------------------------------------------------
PUT /_cluster/settings
{
  "persistent" : {
    "indices.recovery.max_bytes_per_sec" : null
  }
}
--------------------------------------------------


The response does not include settings that have been reset:

[source,console-result]
--------------------------------------------------
{
  ...
  "persistent" : {},
  "transient" : {}
}
--------------------------------------------------
// TESTRESPONSE[s/\.\.\./"acknowledged": true,/]


You can also reset settings using wildcards. For example, to reset
all dynamic `indices.recovery` settings:

[source,console]
--------------------------------------------------
PUT /_cluster/settings
{
  "persistent" : {
    "indices.recovery.*" : null
  }
}
--------------------------------------------------
