[role="xpack"]
[testenv="basic"]
[[search-aggregations-metrics-top-metrics]]
=== Top Metrics Aggregation

experimental[We expect to change the response format of this aggregation as we add more features.]

The `top_metrics` aggregation selects metrics from the document with the largest or smallest "sort"
value. This gets the value of the `v` field on the document with the largest value of `s`:

[source,console,id=search-aggregations-metrics-top-metrics-simple]
----
POST /test/_bulk?refresh
{"index": {}}
{"s": 1, "v": 3.1415}
{"index": {}}
{"s": 2, "v": 1}
{"index": {}}
{"s": 3, "v": 2.71828}
POST /test/_search?filter_path=aggregations
{
  "aggs": {
    "tm": {
      "top_metrics": {
        "metric": {"field": "v"},
        "sort": {"s": "desc"}
      }
    }
  }
}
----

Which returns:

[source,js]
----
{
  "aggregations": {
    "tm": {
      "top": [ {"sort": [3], "metrics": {"v": 2.718280076980591 } } ]
    }
  }
}
----
// TESTRESPONSE

And this gets the value of `v` on the document with the smallest value of `s`:

[source,console]
----
POST /test/_search?filter_path=aggregations
{
  "aggs": {
    "tm": {
      "top_metrics": {
        "metric": {"field": "v"},
        "sort": {"s": "asc"}
      }
    }
  }
}
----
// TEST[continued]

Which returns:

[source,js]
----
{
  "aggregations": {
    "tm": {
      "top": [ {"sort": [1], "metrics": {"v": 3.1414999961853027 } } ]
    }
  }
}
----
// TESTRESPONSE

`top_metrics` is fairly similar to <<search-aggregations-metrics-top-hits-aggregation, `top_hits`>> in spirit
but it is faster because it can do its job entirely with <<doc-values>> which are **much** faster to access
than the `_source` which `top_hits` needs.

==== `sort`

The `sort` field in the metric request functions exactly the same as the `sort` field in the
<<request-body-search-sort, search>> request. The metrics that the aggregation returns is the
first hits that would be returned by the search request. Thus, `"sort": {"s": "desc"}` gets
metrics from the documents with the highest values for `s`. And `"sort": {"s": "asc"}` gets
the metrics from the documents with the lowest values.

==== Examples

===== Use with terms

This aggregation should be quite useful inside of <<search-aggregations-bucket-terms-aggregation, `terms`>>
aggregation, to, say, find the last value reported by each node.

[source,console,id=search-aggregations-metrics-top-metrics-terms]
----
PUT /node
{
  "mappings": {
    "properties": {
      "ip": {"type": "ip"},
      "date": {"type": "date"}
    }
  }
}
POST /node/_bulk?refresh
{"index": {}}
{"ip": "192.168.0.1", "date": "2020-01-01T01:01:01", "v": 1}
{"index": {}}
{"ip": "192.168.0.1", "date": "2020-01-01T02:01:01", "v": 2}
{"index": {}}
{"ip": "192.168.0.2", "date": "2020-01-01T02:01:01", "v": 3}
POST /node/_search?filter_path=aggregations
{
  "aggs": {
    "ip": {
      "terms": {
        "field": "ip"
      },
      "aggs": {
        "tm": {
          "top_metrics": {
            "metric": {"field": "v"},
            "sort": {"date": "desc"}
          }
        }
      }
    }
  }
}
----

Which returns:

[source,js]
----
{
  "aggregations": {
    "ip": {
      "buckets": [
        {
          "key": "192.168.0.1",
          "doc_count": 2,
          "tm": {
            "top": [ {"sort": ["2020-01-01T02:01:01.000Z"], "metrics": {"v": 2.0 } } ]
          }
        },
        {
          "key": "192.168.0.2",
          "doc_count": 1,
          "tm": {
            "top": [ {"sort": ["2020-01-01T02:01:01.000Z"], "metrics": {"v": 3.0 } } ]
          }
        }
      ],
      "doc_count_error_upper_bound": 0,
      "sum_other_doc_count": 0
    }
  }
}
----
// TESTRESPONSE

===== Score `sort`

The aggregation supports sorting by `_score`.

[source,console,id=search-aggregations-metrics-top-metrics-score]
----
POST /test/_bulk?refresh
{"index": {}}
{"s": "big cat", "v": 3.1415}
{"index": {}}
{"s": "cat", "v": 1}
{"index": {}}
{"s": "the small dog", "v": 2.71828}
POST /test/_search?filter_path=aggregations
{
  "query": { "match": { "s": "big cat" } },
  "aggs": {
    "tm": {
      "top_metrics": {
        "metric": {"field": "v"},
        "sort": "_score"
      }
    }
  }
}
----

Which returns:

[source,js]
----
{
  "aggregations": {
    "tm": {
      "top": [ {"sort": [1.450832724571228], "metrics": {"v": 3.1414999961853027 } } ]
    }
  }
}
----
// TESTRESPONSE
