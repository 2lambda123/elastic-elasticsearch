[[search-aggregations-bucket-geodistance-aggregation]]
=== Geo Distance Aggregation

A multi-bucket aggregation that works on `geo_point` fields and conceptually works very similar to the <<search-aggregations-bucket-range-aggregation,range>> aggregation. The user can define a point of origin and a set of distance range buckets. The aggregation evaluate the distance of each document value from the origin point and determines the buckets it belongs to based on the ranges (a document belongs to a bucket if the distance between the document and the origin falls within the distance range of the bucket).

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "rings_around_amsterdam" : {
            "geo_distance" : {
                "field" : "location",
                "origin" : "52.3760, 4.894",
                "ranges" : [
                    { "to" : 100 },
                    { "from" : 100, "to" : 300 },
                    { "from" : 300 }
                ]
            }
        }
    }
}
--------------------------------------------------

Response:

[source,js]
--------------------------------------------------
{
    "aggregations": {
        "rings" : {
            "buckets": [
                {
                    "key": "*-100.0",
                    "from": 0,
                    "to": 100.0,
                    "doc_count": 3
                },
                {
                    "key": "100.0-300.0",
                    "from": 100.0,
                    "to": 300.0,
                    "doc_count": 1
                },
                {
                    "key": "300.0-*",
                    "from": 300.0,
                    "doc_count": 7
                }
            ]
        }
    }
}
--------------------------------------------------

The specified field must be of type `geo_point` (which can only be set explicitly in the mappings). And it can also hold an array of `geo_point` fields, in which case all will be taken into account during aggregation. The origin point can accept all formats supported by the <<geo-point,`geo_point` type>>:

* Object format: `{ "lat" : 52.3760, "lon" : 4.894 }` - this is the safest format as it is the most explicit about the `lat` & `lon` values
* String format: `"52.3760, 4.894"` - where the first number is the `lat` and the second is the `lon`
* Array format: `[4.894, 52.3760]` - which is based on the `GeoJson` standard and where the first number is the `lon` and the second one is the `lat`

By default, the distance unit is `m` (metres) but it can also accept: `mi` (miles), `in` (inches), `yd` (yards), `km` (kilometers), `cm` (centimeters), `mm` (millimeters).

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "rings" : {
            "geo_distance" : {
                "field" : "location",
                "origin" : "52.3760, 4.894",
                "unit" : "mi", <1>
                "ranges" : [
                    { "to" : 100 },
                    { "from" : 100, "to" : 300 },
                    { "from" : 300 }
                ]
            }
        }
    }
}
--------------------------------------------------

<1> The distances will be computed as miles

There are two distance calculation modes: `arc` (the default), and `plane`. The `arc` calculation is the most accurate. The `plane` is the fastest but least accurate. Consider using `plane` when your search context is "narrow", and spans smaller geographical areas (~5km). `plane` will return higher error margins for searches across very large areas (e.g. cross continent search). The distance calculation type can be set using the `distance_type` parameter:

[source,js]
--------------------------------------------------
{
    "aggs" : {
        "rings" : {
            "geo_distance" : {
                "field" : "location",
                "origin" : "52.3760, 4.894",
                "distance_type" : "plane",
                "ranges" : [
                    { "to" : 100 },
                    { "from" : 100, "to" : 300 },
                    { "from" : 300 }
                ]
            }
        }
    }
}
--------------------------------------------------

==== Keyed Response

Setting the `keyed` flag to `true` will associate a unique string key with each bucket and return the ranges as a hash rather than an array:

[source,js]
--------------------------------------------------
{
    "aggs": {
        "accidents_near_empire_state": {
            "geo_distance": {
                "field": "coords",
                "unit": "km",
                "origin" : { "lat" : 40.7484, "lon" : -73.9857 },
                "ranges": [
                    { "to": 3 },
                    { "from" : 3, "to" : 8 },
                    { "from" : 8 }
                ],
                "keyed": true
            }
        }
    }
}
--------------------------------------------------

Response:

[source,js]
--------------------------------------------------
{
    ...

    "aggregations": {
        "accidents_near_empire_state": {
            "buckets": {
                "*-3.0": {
                    "from": 0,
                    "to": 3,
                    "doc_count": 102090
                },
                "3.0-8.0": {
                    "from": 3,
                    "to": 8,
                    "doc_count": 170287
                },
                "8.0-*": {
                    "from": 8,
                    "doc_count": 526590
                }
            }
        }
    }
}
--------------------------------------------------

It is also possible to customize the key for each range:

[source,js]
--------------------------------------------------
{
    "aggs": {
        "accidents_near_empire_state": {
            "geo_distance": {
                "field": "coords",
                "unit": "km",
                "origin" : { "lat" : 40.7484, "lon" : -73.9857 },
                "ranges": [
                    { "key": "very-close", "to": 3 },
                    { "key": "close", "from" : 3, "to" : 8 },
                    { "key": "far", "from" : 8 }
                ],
                "keyed": true
            }
        }
    }
}
--------------------------------------------------

Response:

[source,js]
--------------------------------------------------
{
    ...

    "aggregations": {
        "accidents_near_empire_state": {
            "buckets": {
                "very-close": {
                    "from": 0,
                    "to": 3,
                    "doc_count": 102090
                },
                "close": {
                    "from": 3,
                    "to": 8,
                    "doc_count": 170287
                },
                "far": {
                    "from": 8,
                    "doc_count": 526590
                }
            }
        }
    }
}
--------------------------------------------------
