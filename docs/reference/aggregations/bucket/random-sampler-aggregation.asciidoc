[[search-aggregations-random-sampler-aggregation]]
=== Random Sampler Aggregation
++++
<titleabbrev>Random sampler</titleabbrev>
++++

experimental::[]

The `random_sampler` aggregation is a single bucket aggregation that randomly includes documents in the aggregated
results. Sampling provides significant speed improvement at the loss of accuracy.

This sampling is completed by providing a random sub-set of the entire doc set in a shard. If a filter query is
provided in the search request, that filter is applied over the sampled subset. Consequently, if a filter is
restrictive, very few docs may be matched and may cause the statistics returned to not be as accurate.

NOTE: This is not to be confused with the <<search-aggregations-bucket-sampler-aggregation,sampler>> aggregation. The
      `sampler` aggregation is not over all docs, samples the first `n` documents matched by the query.

[source,console]
----
GET kibana_sample_data_ecommerce/_search?size=0&track_total_hits=false
{
  "aggregations": {
    "sampling": {
      "random_sampler": {
        "probability": 0.1
      },
      "aggs": {
        "price_percentiles": {
          "percentiles": {
            "field": "taxful_total_price"
          }
        }
      }
    }
  }
}
----
// TEST[setup:kibana_sample_data_ecommerce]

[[random-sampler-top-level-params]]
==== Top-level parameters for `random_sampler`

`probability`::
(Required, float) The probability that a document will be included in the aggregated data. Must be greater than 0,
less than `0.5`, or exactly `1`. The lower the probability, the fewer documents are matched.

`seed`::
(Optional, int) Seed to generate the random sampling of documents. When a `seed` is provided, the random subset of
documents is the same between calls.

[[random-sampler-inner-workings]]
==== How does the sampling work?

The aggregation is a random sample of all the documents in the index. In other words,
the sampling is over the background documents. If a query is provided, a document is returned if it is matched by the
query and if the document is in the random sampling. The sampling is not done over the matched documents.

Consider the set of documents `[1, 2, 3, 4, 5]`. Your query matches `[1, 3, 5]` and the randomly sampled
set is `[2, 4, 5]. So, the document returned would be `[5]`.

This type of sampling provides almost linear performance in relation to sampling probability.

This sample is generated by sampling values from the geometric distribution (`(1-p)^(k-1)*p`) at the
provided `probability` (`p` in distribution equation). The values returned from the distribution indicates how many
documents to skip in the background. It follows that the expected success from the distribution is
`(1-p)/p`. For example, with the `"probability": 0.01`, the expected success (or average number of documents skipped),
would be `99` with a variance of `9900`. Consequently, if you only had `80` documents in your index, or matched by your
filter, you would most likely receive no results.

