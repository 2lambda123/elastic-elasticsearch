[[search-aggregations-bucket-frequent-items-aggregation]]
=== Frequent items aggregation
++++
<titleabbrev>Frequent items</titleabbrev>
++++

A bucket aggregation which finds frequent item sets. Finding frequent item sets 
is a form of association rules mining that identifies items that often occur 
together. Items that are frequently purchased together or log events that tend 
to co-occur are examples of frequent item sets. Finding frequent item sets helps 
to discover relationships between different data points (items).

The aggregation reports closed item sets. A frequent item set is called closed 
if no superset has the same support. For example, we have the two following 
candidates for a frequent item set **with the same support value**:
1. `apple, orange, banana`
2. `apple, orange, banana, tomato`.
Only the second item set (`apple, orange, banana, tomato`) is returned, and the 
first set – wich is a subset of the second one – is skipped. Both item sets 
might be returned if their support values are different. Refer to 
<<frequent-items-minimum-support,this section>> to learn more about support.


==== Syntax

A `frequent_items` aggregation looks like this in isolation:

[source,js]
--------------------------------------------------
"frequent_items": {
  "minimum_set_size": 3,
  "fields": [
    {"field": "my_field_1"},
    {"field": "my_field_2"}
  ]
}
--------------------------------------------------
// NOTCONSOLE

.`frequent_items` Parameters
|===
|Parameter Name |Description |Required |Default Value
|`fields` |(array) Fields to analyze. | Required |
|`minimum_set_size` | (integer) The <<frequent-items-minimum-set-size,minimum size>> of one item set. | Optional | `1`
|`minimum_support` | (integer) The <<frequent-items-minimum-support,minimum support>> of one item set. | Optional | `0.1`
|`size` | (integer) The number of top item sets to return. | Optional | `10`
|===

[discrete]
[[frequent-items-minimum-set-size]]
==== Minimum set size

The minimum set size is the minimum number of items the set needs to contain. A 
value of 1 returns the frequency of single items. The higher the minimum set 
size the less items are returned. For example, the item set `orange, banana, 
apple` is only returned if the minimum set size is 3 or lower.

[discrete]
[[frequent-items-minimum-support]]
==== Minimum support

Support represents the frequency of an item set normalized between 0 
and 1. It is calculated by dividing the number of documents containing the item 
set by the total number of documents.

For example, if a given item set is contained by five documents and the total 
number of documents is 20, then the support of the item set is 5/20 = 0.25. 
Therefore, this set is returned only if the minimum support is 0.25 or lower. 
As a higher minimum support prunes more items, the calculation is less resource 
intensive. The `minimum_support` parameter has an effect on the required memory 
and the runtime of the aggregation.


[discrete]
[[frequent-items-size]]
==== Size

This parameter defines the maximum number of item sets to return. The result 
contains top-k item sets; the item sets with the highest support values. This 
parameter has a significant effect on the required memory and the runtime of the 
aggregation.


[discrete]
[[frequent-items-example]]
==== Example

In the following example, we use the e-commerce {kib} sample data set. The goal 
is to find out based on transaction data that (1.) from what product categories 
the customers purchase products frequently together and (2.) from which cities 
they purchase those. We are interested in sets with three or more items, and 
want to see the first three frequent item sets with the highest support.

[source,console]
-------------------------------------------------
GET kibana_sample_data_ecommerce /_search 
{
  "size": 0,
  "aggs": {
    "my_agg": {
      "frequent_items": {
        "minimum_set_size": 3,
        "fields": [
          { "field": "category.keyword" },
          { "field": "geoip.city_name" }
        ],
        "size": 3
      }
    }
  }
}
-------------------------------------------------
// TEST[skip:setup kibana sample data]

The API returns a response similar to the following one:

[source,console-result]
-------------------------------------------------
(...)
"aggregations" : {
    "my_agg" : {
      "buckets" : [
        {
          "key" : {
            "category.keyword" : [
              "Women's Clothing",
              "Women's Shoes"
            ],
            "geoip.city_name" : [
              "New York"
            ]
          },
          "doc_count" : 217,
          "support" : 0.04641711229946524
        },
        {
          "key" : {
            "category.keyword" : [
              "Women's Clothing",
              "Women's Accessories"
            ],
            "geoip.city_name" : [
              "New York"
            ]
          },
          "doc_count" : 135,
          "support" : 0.028877005347593583
        },
        {
          "key" : {
            "category.keyword" : [
              "Men's Clothing",
              "Men's Shoes"
            ],
            "geoip.city_name" : [
              "Cairo"
            ]
          },
          "doc_count" : 123,
          "support" : 0.026310160427807486
        }
      ],
    (...) 
  }
}
-------------------------------------------------
// TEST[skip:setup kibana sample data]

The response shows that the categories customers purchase from most frequently 
together are `Women's Clothing` and `Women's Shoes` and customers from New York 
tend to buy items from these categories frequently togeher. In other words, 
customers who buy products labelled Women's Clothing more likely buy products 
also from the Women's Shoes category and customers from New York most likely buy 
products from these categories together. The item set with the second highest 
support is `Women's Clothing` and `Women's Accessories` with customers mostly 
from New York. Finally, the item set with the third highest support is 
`Men's Clothing` and `Men's Shoes` with customers mostly from Cairo.