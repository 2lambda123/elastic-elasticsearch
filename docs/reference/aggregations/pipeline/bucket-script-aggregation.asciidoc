[[search-aggregations-pipeline-bucket-script-aggregation]]
=== Bucket Script Aggregation

A parent pipeline aggregation which executes a script which can perform per bucket computations on specified metrics
in the parent multi-bucket aggregation. The specified metric must be numeric and the script must return a numeric value.

[[bucket-script-agg-syntax]]
==== Syntax

A `bucket_script` aggregation looks like this in isolation:

[source,js]
--------------------------------------------------
{
    "bucket_script": {
        "buckets_path": {
            "my_var1": "the_sum", <1>
            "my_var2": "the_value_count"
        },
        "script": "params.my_var1 / params.my_var2"
    }
}
--------------------------------------------------
// NOTCONSOLE
<1> Here, `my_var1` is the name of the variable for this buckets path to use in the script, `the_sum` is the path to
the metrics to use for that variable.

[[bucket-script-params]]
.`bucket_script` Parameters
[options="header"]
|===
|Parameter Name |Description |Required |Default Value
|`script` |The script to run for this aggregation. The script can be inline, file or indexed. (see <<modules-scripting>>
for more details) |Required |
|`buckets_path` |A map of script variables and their associated path to the buckets we wish to use for the variable
(see <<buckets-path-syntax>> for more details) |Required |
|`gap_policy` |The policy to apply when gaps are found in the data (see <<gap-policy>> for more
 details)|Optional |`skip`
|`format` |format to apply to the output value of this aggregation |Optional |`null`
|===

The following snippet calculates the ratio percentage of t-shirt sales compared to total sales each month:

[source,console]
--------------------------------------------------
POST /sales/_search
{
    "size": 0,
    "aggs" : {
        "sales_per_month" : {
            "date_histogram" : {
                "field" : "date",
                "calendar_interval" : "month"
            },
            "aggs": {
                "total_sales": {
                    "sum": {
                        "field": "price"
                    }
                },
                "t-shirts": {
                  "filter": {
                    "term": {
                      "type": "t-shirt"
                    }
                  },
                  "aggs": {
                    "sales": {
                      "sum": {
                        "field": "price"
                      }
                    }
                  }
                },
                "t-shirt-percentage": {
                    "bucket_script": {
                        "buckets_path": {
                          "tShirtSales": "t-shirts>sales",
                          "totalSales": "total_sales"
                        },
                        "script": "params.tShirtSales / params.totalSales * 100"
                    }
                }
            }
        }
    }
}
--------------------------------------------------
// TEST[setup:sales]

And the following may be the response:

[source,console-result]
--------------------------------------------------
{
   "took": 11,
   "timed_out": false,
   "_shards": ...,
   "hits": ...,
   "aggregations": {
      "sales_per_month": {
         "buckets": [
            {
               "key_as_string": "2015/01/01 00:00:00",
               "key": 1420070400000,
               "doc_count": 3,
               "total_sales": {
                   "value": 550.0
               },
               "t-shirts": {
                   "doc_count": 1,
                   "sales": {
                       "value": 200.0
                   }
               },
               "t-shirt-percentage": {
                   "value": 36.36363636363637
               }
            },
            {
               "key_as_string": "2015/02/01 00:00:00",
               "key": 1422748800000,
               "doc_count": 2,
               "total_sales": {
                   "value": 60.0
               },
               "t-shirts": {
                   "doc_count": 1,
                   "sales": {
                       "value": 10.0
                   }
               },
               "t-shirt-percentage": {
                   "value": 16.666666666666664
               }
            },
            {
               "key_as_string": "2015/03/01 00:00:00",
               "key": 1425168000000,
               "doc_count": 2,
               "total_sales": {
                   "value": 375.0
               },
               "t-shirts": {
                   "doc_count": 1,
                   "sales": {
                       "value": 175.0
                   }
               },
               "t-shirt-percentage": {
                   "value": 46.666666666666664
               }
            }
         ]
      }
   }
}
--------------------------------------------------
// TESTRESPONSE[s/"took": 11/"took": $body.took/]
// TESTRESPONSE[s/"_shards": \.\.\./"_shards": $body._shards/]
// TESTRESPONSE[s/"hits": \.\.\./"hits": $body.hits/]

==== Accessing bucket document count

It is often helpful to have the document count in a bucket script.  This is especially important
when a bucket is empty and a different value should be generated.

Bucket scripts have access to a special `params.doc_count` property which contains the document count
for the particular bucket the script is evaluating:

[source,js]
--------------------------------------------------
POST /sales/_search
{
    "size": 0,
    "aggs" : {
        "sales_per_month" : {
            "date_histogram" : {
                "field" : "date",
                "calendar_interval" : "month"
            },
            "aggs": {
                "total_sales": {
                    "sum": {
                        "field": "price"
                    }
                },
                "doc_count_script": {
                    "bucket_script": {
                        "buckets_path": {
                          "totalSales": "total_sales"
                        },
                        "script": "params.totalSales / params.doc_count" <1>
                    }
                }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE
// TEST[setup:sales]
<1> `params.doc_count` is a special parameter which contains the bucket's document count

By default, a `bucket_script` has a `skip` gap policy applied.  This means empty buckets (buckets with zero document
count) are not evaluated by the script.  But if you wish to evaluate an empty bucket, you can use `gap_policy: none`
and access the doc count in the script to determine how the result should be generated:

[source,js]
--------------------------------------------------
POST /sales/_search
{
    "size": 0,
    "aggs" : {
        "sales_per_month" : {
            "date_histogram" : {
                "field" : "date",
                "calendar_interval" : "month"
            },
            "aggs": {
                "total_sales": {
                    "sum": {
                        "field": "price"
                    }
                },
                "doc_count_script": {
                    "bucket_script": {
                        "buckets_path": {
                          "totalSales": "total_sales"
                        },
                        "gap_policy": "none",  <1>
                        "script": "if (params.doc_count == 0) {return -1.0} else {return 1.0}"  <2>
                    }
                }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE
// TEST[setup:sales]
<1> The gap policy is set to "none", which means the script will evaluate on all buckets
<2> The script checks the document count and emits a -1.0 if the bucket is empty, or a 1.0 if there are documents