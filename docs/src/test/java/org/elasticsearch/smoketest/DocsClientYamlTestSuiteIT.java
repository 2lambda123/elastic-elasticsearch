/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.elasticsearch.smoketest;

import org.apache.http.HttpHost;
import com.carrotsearch.randomizedtesting.annotations.Name;
import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;
import org.elasticsearch.Version;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.common.CheckedFunction;
import org.elasticsearch.common.ParseField;
import org.elasticsearch.common.xcontent.ConstructingObjectParser;
import org.elasticsearch.common.xcontent.NamedXContentRegistry;
import org.elasticsearch.common.xcontent.ObjectParser;
import org.elasticsearch.common.xcontent.XContentLocation;
import org.elasticsearch.common.xcontent.XContentParser;
import org.elasticsearch.test.rest.yaml.ClientYamlDocsTestClient;
import org.elasticsearch.test.rest.yaml.ClientYamlTestCandidate;
import org.elasticsearch.test.rest.yaml.ClientYamlTestClient;
import org.elasticsearch.test.rest.yaml.ClientYamlTestExecutionContext;
import org.elasticsearch.test.rest.yaml.ClientYamlTestResponse;
import org.elasticsearch.test.rest.yaml.ESClientYamlSuiteTestCase;
import org.elasticsearch.test.rest.yaml.restspec.ClientYamlSuiteRestSpec;
import org.elasticsearch.test.rest.yaml.section.ExecutableSection;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import javax.lang.model.element.ExecutableElement;

import static java.util.Collections.emptyMap;
import static java.util.Collections.singletonList;
import static java.util.Collections.singletonMap;
import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;
import static org.hamcrest.Matchers.hasSize;

public class DocsClientYamlTestSuiteIT extends ESClientYamlSuiteTestCase {

    public DocsClientYamlTestSuiteIT(@Name("yaml") ClientYamlTestCandidate testCandidate) {
        super(testCandidate);
    }

    @ParametersFactory
    public static Iterable<Object[]> parameters() throws Exception {
        List<NamedXContentRegistry.Entry> entries = new ArrayList<>(ExecutableSection.DEFAULT_EXECUTABLE_CONTEXTS.size() + 1);
        entries.addAll(ExecutableSection.DEFAULT_EXECUTABLE_CONTEXTS);
        entries.add(new NamedXContentRegistry.Entry(ExecutableSection.class, new ParseField("test_analyzer"), TestAnalyzer::parse));
        NamedXContentRegistry executeableSectionRegistry = new NamedXContentRegistry(entries);
        return ESClientYamlSuiteTestCase.createParameters(executeableSectionRegistry);
    }

    @Override
    protected void afterIfFailed(List<Throwable> errors) {
        super.afterIfFailed(errors);
        String name = getTestName().split("=")[1];
        name = name.substring(0, name.length() - 1);
        name = name.replaceAll("/([^/]+)$", ".asciidoc:$1");
        logger.error("This failing test was generated by documentation starting at {}. It may include many snippets. "
                + "See docs/README.asciidoc for an explanation of test generation.", name);
    }

    @Override
    protected boolean randomizeContentType() {
        return false;
    }

    @Override
    protected ClientYamlTestClient initClientYamlTestClient(ClientYamlSuiteRestSpec restSpec, RestClient restClient,
                                                            List<HttpHost> hosts, Version esVersion) throws IOException {
        return new ClientYamlDocsTestClient(restSpec, restClient, hosts, esVersion);
    }

    private static class TestAnalyzer implements ExecutableSection {
        private static ConstructingObjectParser<TestAnalyzer, XContentLocation> PARSER =
            new ConstructingObjectParser<>("test_analyzer", false, (a, location) -> {
                String index = (String) a[0];
                String name = (String) a[0];
                return new TestAnalyzer(location, index, name);
            });
        static {
            PARSER.declareString(constructorArg(), new ParseField("index"));
            PARSER.declareString(constructorArg(), new ParseField("name"));
        }
        private static TestAnalyzer parse(XContentParser parser) throws IOException {
            XContentLocation location = parser.getTokenLocation();
            return PARSER.parse(parser, location);
        }

        private final XContentLocation location;
        private final String index;
        private final String name;

        private TestAnalyzer(XContentLocation location, String index, String name) {
            this.location = location;
            this.index = index;
            this.name = name;
        }

        @Override
        public XContentLocation getLocation() {
            return location;
        }

        @Override
        public void execute(ClientYamlTestExecutionContext executionContext) throws IOException {
            int size = 1000;
            List<String> testText = new ArrayList<>(size);
            for (int i = 0; i < size; i++) {
                testText.add(randomRealisticUnicodeOfCodepointLength(10));
            }
            Map<String, Object> body = new HashMap<>(2);
            body.put("analyzer", name);
            body.put("text", testText);
            ClientYamlTestResponse response = executionContext.callApi("anlayze", singletonMap("index", index),
                    singletonList(body), emptyMap());
            List<?> rebuilt = (List<?>) response.evaluate("path");
            response = executionContext.callApi("anlayze", emptyMap(), singletonList(body), emptyMap());
            List<?> builtIn = (List<?>) response.evaluate("path");
            assertThat(rebuilt, hasSize(size));
            assertThat(builtIn, hasSize(size));
            for (int i = 0; i < size; i++) {
                Map<?, ?> rebuiltToken = (Map<?, ?>) rebuilt.get(i);
                Map<?, ?> builtInToken = (Map<?, ?>) builtIn.get(i);
                assertEquals(builtInToken, rebuiltToken);
            }
        }
    }
}
