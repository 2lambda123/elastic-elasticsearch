[[painless-literals]]
=== Literals

Use literals to specify different types of values directly in a script.

[[integers]]
==== Integers

Use integer literals to specify an integer value in decimal, octal, or hex
notation of the <<primitive-types, primitive types>> int, long, float, or
double. Use the following single letter designations to specify the
<<primitive-types, primitive type>>: `l` or `L` for `long`, `f` or `F` for
`float`, and `d` or `D` for `double`. If not specified, the type defaults to
`int`.  Use `0` as a prefix to specify an integer literal as octal, and use
`0x` or `0X` as a prefix to specify an integer literal as hex.

*Grammar*
[source,ANTLR4]
----
INTEGER: '-'? ( '0' | [1-9] [0-9]* ) [lLfFdD]?;
OCTAL:   '-'? '0' [0-7]+ [lL]?;
HEX:     '-'? '0' [xX] [0-9a-fA-F]+ [lL]?;
----

*Examples*

Integer literals of `int 0`, `double 0.0`, `long 1234`,
`float -90.0`, `int -18` in octal, and `int 3882` in hex.

[source,Java]
----
0 <1>
0D <2>
1234L <3>
-90f <4>
-022 <5>
0xF2A <6>
----

[[floats]]
==== Floats

Use floating point literals to specify a floating point value of the
<<primitive-types, primitive types>> float or double. Use the following single
letter designations for the <<primitive-types, primitive type>>: `f` for
`float` and `d` for `double`. If not specified, the type defaults to `double`.

*Grammar:*
[source,ANTLR4]
----
DECIMAL: '-'? ( '0' | [1-9] [0-9]* ) (DOT [0-9]+)? EXPONENT? [fFdD]?;
EXPONENT: ( [eE] [+\-]? [0-9]+ );
----

*Examples:*

Floating point literals of `double 0.0`, `double 1000000.0` in
exponent notation, `double 0.977777`, `double -126.34`, and `float 89.9`.

[source,Java]
----
0.0
1E6
0.977777
-126.34
89.9F
----

[[strings]]
==== Strings

Use string literals to specify string values of the
<<string-type, String type>> with either single or double quotes.
Use a `\"` token to include a double-quote as part of a double-quoted string
literal. Use a `\'` token to include a single-quote as part of a single-quoted
string literal.  Use a `\\` token to include a backslash as part of any string
literal.

*Grammar:*
[source,ANTLR4]
----
STRING: ( '"'  ( '\\"'  | '\\\\' | ~[\\"] )*? '"'  )
      | ( '\'' ( '\\\'' | '\\\\' | ~[\\'] )*? '\'' );
----

*Examples:*

String literals using both single-quotes and double-quotes.

[source,Java]
----
"double-quoted String literal"
'single-quoted String literal'
"\"double-quoted String with escaped double-quotes\" and backslash: \\"
'\'single-quoted String with escaped single-quotes\' and backslash \\'
"double-quoted String with non-escaped 'single-quotes'"
'single-quoted String with non-escaped "double-quotes"'
----

[[characters]]
==== Characters

Use the <<painless-casting, casting operator>> to convert string literals or
<<string-type, String type>> values into <<primitive-types, char type>> values.
<<string-type, String type>> values converted into
<<primitive-types, char type>> values must be exactly one character in length
or an error will occur.

*Examples:*

Casting string literals into <<primitive-types, char type>> values.

[source,Java]
----
(char)"C"
(char)'c'
----

Casting a <<string-type, String type>> value into a
<<primitive-types, char type>> value.

[source,Java]
----
String s = "s";
char c = (char)s;
----
