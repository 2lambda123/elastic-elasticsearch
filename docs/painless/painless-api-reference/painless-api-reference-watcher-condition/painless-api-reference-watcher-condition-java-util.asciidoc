[role="exclude",id="painless-api-reference-watcher-condition-java-util"]
=== java.util

[[painless-api-reference-watcher-condition-java-util-AbstractCollection]]
==== AbstractCollection
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-AbstractList]]
==== AbstractList
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* void {java11-javadoc}/java.base/java/util/List.html#add(int,java.lang.Object)[add](int, def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/List.html#addAll(int,java.util.Collection)[addAll](int, Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/List.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/List.html#get(int)[get](int)
* int getLength()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/List.html#hashCode()[hashCode]()
* int {java11-javadoc}/java.base/java/util/List.html#indexOf(java.lang.Object)[indexOf](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* int {java11-javadoc}/java.base/java/util/List.html#lastIndexOf(java.lang.Object)[lastIndexOf](def)
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator()[listIterator]()
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator(int)[listIterator](int)
* def {java11-javadoc}/java.base/java/util/List.html#remove(int)[remove](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* void {java11-javadoc}/java.base/java/util/List.html#replaceAll(java.util.function.UnaryOperator)[replaceAll](UnaryOperator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* def {java11-javadoc}/java.base/java/util/List.html#set(int,java.lang.Object)[set](int, def)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* void {java11-javadoc}/java.base/java/util/List.html#sort(java.util.Comparator)[sort](Comparator)
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* List {java11-javadoc}/java.base/java/util/List.html#subList(int,int)[subList](int, int)
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-AbstractMap]]
==== AbstractMap
* void {java11-javadoc}/java.base/java/util/Map.html#clear()[clear]()
* List collect(BiFunction)
* def collect(Collection, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)[compute](def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)[computeIfAbsent](def, Function)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)[computeIfPresent](def, BiFunction)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsKey(java.lang.Object)[containsKey](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsValue(java.lang.Object)[containsValue](def)
* int count(BiPredicate)
* def each(BiConsumer)
* Set {java11-javadoc}/java.base/java/util/Map.html#entrySet()[entrySet]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#equals(java.lang.Object)[equals](Object)
* boolean every(BiPredicate)
* Map.Entry find(BiPredicate)
* Map findAll(BiPredicate)
* def findResult(BiFunction)
* def findResult(def, BiFunction)
* List findResults(BiFunction)
* void {java11-javadoc}/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)[forEach](BiConsumer)
* def {java11-javadoc}/java.base/java/util/Map.html#get(java.lang.Object)[get](def)
* def {java11-javadoc}/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)[getOrDefault](def, def)
* Map groupBy(BiFunction)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#isEmpty()[isEmpty]()
* Set {java11-javadoc}/java.base/java/util/Map.html#keySet()[keySet]()
* def {java11-javadoc}/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)[merge](def, def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)[put](def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#putAll(java.util.Map)[putAll](Map)
* def {java11-javadoc}/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)[putIfAbsent](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)[remove](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)[replace](def, def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)[replace](def, def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)[replaceAll](BiFunction)
* int {java11-javadoc}/java.base/java/util/Map.html#size()[size]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* Collection {java11-javadoc}/java.base/java/util/Map.html#values()[values]()


[[painless-api-reference-watcher-condition-java-util-AbstractMap.SimpleEntry]]
==== AbstractMap.SimpleEntry
* {java11-javadoc}/java.base/java/util/AbstractMap$SimpleEntry.html#<init>(java.util.Map$Entry)[AbstractMap.SimpleEntry](Map.Entry)
* {java11-javadoc}/java.base/java/util/AbstractMap$SimpleEntry.html#<init>(java.lang.Object,java.lang.Object)[AbstractMap.SimpleEntry](def, def)
* boolean {java11-javadoc}/java.base/java/util/Map$Entry.html#equals(java.lang.Object)[equals](Object)
* def {java11-javadoc}/java.base/java/util/Map$Entry.html#getKey()[getKey]()
* def {java11-javadoc}/java.base/java/util/Map$Entry.html#getValue()[getValue]()
* int {java11-javadoc}/java.base/java/util/Map$Entry.html#hashCode()[hashCode]()
* def {java11-javadoc}/java.base/java/util/Map$Entry.html#setValue(java.lang.Object)[setValue](def)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-AbstractMap.SimpleImmutableEntry]]
==== AbstractMap.SimpleImmutableEntry
* {java11-javadoc}/java.base/java/util/AbstractMap$SimpleImmutableEntry.html#<init>(java.util.Map$Entry)[AbstractMap.SimpleImmutableEntry](Map.Entry)
* {java11-javadoc}/java.base/java/util/AbstractMap$SimpleImmutableEntry.html#<init>(java.lang.Object,java.lang.Object)[AbstractMap.SimpleImmutableEntry](def, def)
* boolean {java11-javadoc}/java.base/java/util/Map$Entry.html#equals(java.lang.Object)[equals](Object)
* def {java11-javadoc}/java.base/java/util/Map$Entry.html#getKey()[getKey]()
* def {java11-javadoc}/java.base/java/util/Map$Entry.html#getValue()[getValue]()
* int {java11-javadoc}/java.base/java/util/Map$Entry.html#hashCode()[hashCode]()
* def {java11-javadoc}/java.base/java/util/Map$Entry.html#setValue(java.lang.Object)[setValue](def)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-AbstractQueue]]
==== AbstractQueue
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* def {java11-javadoc}/java.base/java/util/Queue.html#element()[element]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* boolean {java11-javadoc}/java.base/java/util/Queue.html#offer(java.lang.Object)[offer](def)
* def {java11-javadoc}/java.base/java/util/Queue.html#peek()[peek]()
* def {java11-javadoc}/java.base/java/util/Queue.html#poll()[poll]()
* def {java11-javadoc}/java.base/java/util/Queue.html#remove()[remove]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-AbstractSequentialList]]
==== AbstractSequentialList
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* void {java11-javadoc}/java.base/java/util/List.html#add(int,java.lang.Object)[add](int, def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/List.html#addAll(int,java.util.Collection)[addAll](int, Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/List.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/List.html#get(int)[get](int)
* int getLength()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/List.html#hashCode()[hashCode]()
* int {java11-javadoc}/java.base/java/util/List.html#indexOf(java.lang.Object)[indexOf](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* int {java11-javadoc}/java.base/java/util/List.html#lastIndexOf(java.lang.Object)[lastIndexOf](def)
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator()[listIterator]()
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator(int)[listIterator](int)
* def {java11-javadoc}/java.base/java/util/List.html#remove(int)[remove](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* void {java11-javadoc}/java.base/java/util/List.html#replaceAll(java.util.function.UnaryOperator)[replaceAll](UnaryOperator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* def {java11-javadoc}/java.base/java/util/List.html#set(int,java.lang.Object)[set](int, def)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* void {java11-javadoc}/java.base/java/util/List.html#sort(java.util.Comparator)[sort](Comparator)
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* List {java11-javadoc}/java.base/java/util/List.html#subList(int,int)[subList](int, int)
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-AbstractSet]]
==== AbstractSet
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/Set.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/Set.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* boolean {java11-javadoc}/java.base/java/util/Set.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-ArrayDeque]]
==== ArrayDeque
* {java11-javadoc}/java.base/java/util/ArrayDeque.html#<init>()[ArrayDeque]()
* {java11-javadoc}/java.base/java/util/ArrayDeque.html#<init>(java.util.Collection)[ArrayDeque](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* void {java11-javadoc}/java.base/java/util/Deque.html#addFirst(java.lang.Object)[addFirst](def)
* void {java11-javadoc}/java.base/java/util/Deque.html#addLast(java.lang.Object)[addLast](def)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* ArrayDeque {java11-javadoc}/java.base/java/util/ArrayDeque.html#clone()[clone]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* Iterator {java11-javadoc}/java.base/java/util/Deque.html#descendingIterator()[descendingIterator]()
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* def {java11-javadoc}/java.base/java/util/Queue.html#element()[element]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/Deque.html#getFirst()[getFirst]()
* def {java11-javadoc}/java.base/java/util/Deque.html#getLast()[getLast]()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* boolean {java11-javadoc}/java.base/java/util/Queue.html#offer(java.lang.Object)[offer](def)
* boolean {java11-javadoc}/java.base/java/util/Deque.html#offerFirst(java.lang.Object)[offerFirst](def)
* boolean {java11-javadoc}/java.base/java/util/Deque.html#offerLast(java.lang.Object)[offerLast](def)
* def {java11-javadoc}/java.base/java/util/Queue.html#peek()[peek]()
* def {java11-javadoc}/java.base/java/util/Deque.html#peekFirst()[peekFirst]()
* def {java11-javadoc}/java.base/java/util/Deque.html#peekLast()[peekLast]()
* def {java11-javadoc}/java.base/java/util/Queue.html#poll()[poll]()
* def {java11-javadoc}/java.base/java/util/Deque.html#pollFirst()[pollFirst]()
* def {java11-javadoc}/java.base/java/util/Deque.html#pollLast()[pollLast]()
* def {java11-javadoc}/java.base/java/util/Deque.html#pop()[pop]()
* void {java11-javadoc}/java.base/java/util/Deque.html#push(java.lang.Object)[push](def)
* def {java11-javadoc}/java.base/java/util/Queue.html#remove()[remove]()
* boolean {java11-javadoc}/java.base/java/util/Deque.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* def {java11-javadoc}/java.base/java/util/Deque.html#removeFirst()[removeFirst]()
* boolean {java11-javadoc}/java.base/java/util/Deque.html#removeFirstOccurrence(java.lang.Object)[removeFirstOccurrence](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* def {java11-javadoc}/java.base/java/util/Deque.html#removeLast()[removeLast]()
* boolean {java11-javadoc}/java.base/java/util/Deque.html#removeLastOccurrence(java.lang.Object)[removeLastOccurrence](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-ArrayList]]
==== ArrayList
* {java11-javadoc}/java.base/java/util/ArrayList.html#<init>()[ArrayList]()
* {java11-javadoc}/java.base/java/util/ArrayList.html#<init>(java.util.Collection)[ArrayList](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* void {java11-javadoc}/java.base/java/util/List.html#add(int,java.lang.Object)[add](int, def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/List.html#addAll(int,java.util.Collection)[addAll](int, Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/ArrayList.html#clone()[clone]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/List.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/List.html#get(int)[get](int)
* int getLength()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/List.html#hashCode()[hashCode]()
* int {java11-javadoc}/java.base/java/util/List.html#indexOf(java.lang.Object)[indexOf](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* int {java11-javadoc}/java.base/java/util/List.html#lastIndexOf(java.lang.Object)[lastIndexOf](def)
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator()[listIterator]()
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator(int)[listIterator](int)
* def {java11-javadoc}/java.base/java/util/List.html#remove(int)[remove](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* void {java11-javadoc}/java.base/java/util/List.html#replaceAll(java.util.function.UnaryOperator)[replaceAll](UnaryOperator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* def {java11-javadoc}/java.base/java/util/List.html#set(int,java.lang.Object)[set](int, def)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* void {java11-javadoc}/java.base/java/util/List.html#sort(java.util.Comparator)[sort](Comparator)
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* List {java11-javadoc}/java.base/java/util/List.html#subList(int,int)[subList](int, int)
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* void {java11-javadoc}/java.base/java/util/ArrayList.html#trimToSize()[trimToSize]()


[[painless-api-reference-watcher-condition-java-util-Arrays]]
==== Arrays
* static List {java11-javadoc}/java.base/java/util/Arrays.html#asList(java.lang.Object%5B%5D)[asList](Object[])
* static boolean {java11-javadoc}/java.base/java/util/Arrays.html#deepEquals(java.lang.Object%5B%5D,java.lang.Object%5B%5D)[deepEquals](Object[], Object[])
* static int {java11-javadoc}/java.base/java/util/Arrays.html#deepHashCode(java.lang.Object%5B%5D)[deepHashCode](Object[])
* static String {java11-javadoc}/java.base/java/util/Arrays.html#deepToString(java.lang.Object%5B%5D)[deepToString](Object[])
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Base64]]
==== Base64
* static Base64.Decoder {java11-javadoc}/java.base/java/util/Base64.html#getDecoder()[getDecoder]()
* static Base64.Encoder {java11-javadoc}/java.base/java/util/Base64.html#getEncoder()[getEncoder]()
* static Base64.Decoder {java11-javadoc}/java.base/java/util/Base64.html#getMimeDecoder()[getMimeDecoder]()
* static Base64.Encoder {java11-javadoc}/java.base/java/util/Base64.html#getMimeEncoder()[getMimeEncoder]()
* static Base64.Encoder {java11-javadoc}/java.base/java/util/Base64.html#getMimeEncoder(int,byte%5B%5D)[getMimeEncoder](int, byte[])
* static Base64.Decoder {java11-javadoc}/java.base/java/util/Base64.html#getUrlDecoder()[getUrlDecoder]()
* static Base64.Encoder {java11-javadoc}/java.base/java/util/Base64.html#getUrlEncoder()[getUrlEncoder]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Base64.Decoder]]
==== Base64.Decoder
* byte[] {java11-javadoc}/java.base/java/util/Base64$Decoder.html#decode(java.lang.String)[decode](String)
* int {java11-javadoc}/java.base/java/util/Base64$Decoder.html#decode(byte%5B%5D,byte%5B%5D)[decode](byte[], byte[])
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Base64.Encoder]]
==== Base64.Encoder
* int {java11-javadoc}/java.base/java/util/Base64$Encoder.html#encode(byte%5B%5D,byte%5B%5D)[encode](byte[], byte[])
* String {java11-javadoc}/java.base/java/util/Base64$Encoder.html#encodeToString(byte%5B%5D)[encodeToString](byte[])
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* Base64.Encoder {java11-javadoc}/java.base/java/util/Base64$Encoder.html#withoutPadding()[withoutPadding]()


[[painless-api-reference-watcher-condition-java-util-BitSet]]
==== BitSet
* static BitSet {java11-javadoc}/java.base/java/util/BitSet.html#valueOf(long%5B%5D)[valueOf](long[])
* {java11-javadoc}/java.base/java/util/BitSet.html#<init>()[BitSet]()
* {java11-javadoc}/java.base/java/util/BitSet.html#<init>(int)[BitSet](int)
* void {java11-javadoc}/java.base/java/util/BitSet.html#and(java.util.BitSet)[and](BitSet)
* void {java11-javadoc}/java.base/java/util/BitSet.html#andNot(java.util.BitSet)[andNot](BitSet)
* int {java11-javadoc}/java.base/java/util/BitSet.html#cardinality()[cardinality]()
* void {java11-javadoc}/java.base/java/util/BitSet.html#clear()[clear]()
* void {java11-javadoc}/java.base/java/util/BitSet.html#clear(int)[clear](int)
* void {java11-javadoc}/java.base/java/util/BitSet.html#clear(int,int)[clear](int, int)
* def {java11-javadoc}/java.base/java/util/BitSet.html#clone()[clone]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* void {java11-javadoc}/java.base/java/util/BitSet.html#flip(int)[flip](int)
* void {java11-javadoc}/java.base/java/util/BitSet.html#flip(int,int)[flip](int, int)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/BitSet.html#intersects(java.util.BitSet)[intersects](BitSet)
* boolean {java11-javadoc}/java.base/java/util/BitSet.html#isEmpty()[isEmpty]()
* int {java11-javadoc}/java.base/java/util/BitSet.html#length()[length]()
* int {java11-javadoc}/java.base/java/util/BitSet.html#nextClearBit(int)[nextClearBit](int)
* int {java11-javadoc}/java.base/java/util/BitSet.html#nextSetBit(int)[nextSetBit](int)
* void {java11-javadoc}/java.base/java/util/BitSet.html#or(java.util.BitSet)[or](BitSet)
* int {java11-javadoc}/java.base/java/util/BitSet.html#previousClearBit(int)[previousClearBit](int)
* int {java11-javadoc}/java.base/java/util/BitSet.html#previousSetBit(int)[previousSetBit](int)
* void {java11-javadoc}/java.base/java/util/BitSet.html#set(int)[set](int)
* void {java11-javadoc}/java.base/java/util/BitSet.html#set(int,int)[set](int, int)
* void {java11-javadoc}/java.base/java/util/BitSet.html#set(int,int,boolean)[set](int, int, boolean)
* int {java11-javadoc}/java.base/java/util/BitSet.html#size()[size]()
* byte[] {java11-javadoc}/java.base/java/util/BitSet.html#toByteArray()[toByteArray]()
* long[] {java11-javadoc}/java.base/java/util/BitSet.html#toLongArray()[toLongArray]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* void {java11-javadoc}/java.base/java/util/BitSet.html#xor(java.util.BitSet)[xor](BitSet)


[[painless-api-reference-watcher-condition-java-util-Calendar]]
==== Calendar
* static int {java11-javadoc}/java.base/java/util/Calendar.html#ALL_STYLES[ALL_STYLES]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#AM[AM]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#AM_PM[AM_PM]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#APRIL[APRIL]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#AUGUST[AUGUST]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#DATE[DATE]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#DAY_OF_MONTH[DAY_OF_MONTH]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#DAY_OF_WEEK[DAY_OF_WEEK]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#DAY_OF_WEEK_IN_MONTH[DAY_OF_WEEK_IN_MONTH]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#DAY_OF_YEAR[DAY_OF_YEAR]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#DECEMBER[DECEMBER]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#DST_OFFSET[DST_OFFSET]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#ERA[ERA]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#FEBRUARY[FEBRUARY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#FIELD_COUNT[FIELD_COUNT]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#FRIDAY[FRIDAY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#HOUR[HOUR]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#HOUR_OF_DAY[HOUR_OF_DAY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#JANUARY[JANUARY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#JULY[JULY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#JUNE[JUNE]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#LONG[LONG]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#LONG_FORMAT[LONG_FORMAT]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#LONG_STANDALONE[LONG_STANDALONE]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#MARCH[MARCH]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#MAY[MAY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#MILLISECOND[MILLISECOND]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#MINUTE[MINUTE]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#MONDAY[MONDAY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#MONTH[MONTH]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#NARROW_FORMAT[NARROW_FORMAT]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#NARROW_STANDALONE[NARROW_STANDALONE]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#NOVEMBER[NOVEMBER]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#OCTOBER[OCTOBER]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#PM[PM]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#SATURDAY[SATURDAY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#SECOND[SECOND]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#SEPTEMBER[SEPTEMBER]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#SHORT[SHORT]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#SHORT_FORMAT[SHORT_FORMAT]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#SHORT_STANDALONE[SHORT_STANDALONE]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#SUNDAY[SUNDAY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#THURSDAY[THURSDAY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#TUESDAY[TUESDAY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#UNDECIMBER[UNDECIMBER]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#WEDNESDAY[WEDNESDAY]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#WEEK_OF_MONTH[WEEK_OF_MONTH]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#WEEK_OF_YEAR[WEEK_OF_YEAR]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#YEAR[YEAR]
* static int {java11-javadoc}/java.base/java/util/Calendar.html#ZONE_OFFSET[ZONE_OFFSET]
* static Set {java11-javadoc}/java.base/java/util/Calendar.html#getAvailableCalendarTypes()[getAvailableCalendarTypes]()
* static Locale[] {java11-javadoc}/java.base/java/util/Calendar.html#getAvailableLocales()[getAvailableLocales]()
* static Calendar {java11-javadoc}/java.base/java/util/Calendar.html#getInstance()[getInstance]()
* static Calendar {java11-javadoc}/java.base/java/util/Calendar.html#getInstance(java.util.TimeZone)[getInstance](TimeZone)
* static Calendar {java11-javadoc}/java.base/java/util/Calendar.html#getInstance(java.util.TimeZone,java.util.Locale)[getInstance](TimeZone, Locale)
* void {java11-javadoc}/java.base/java/util/Calendar.html#add(int,int)[add](int, int)
* boolean {java11-javadoc}/java.base/java/util/Calendar.html#after(java.lang.Object)[after](Object)
* boolean {java11-javadoc}/java.base/java/util/Calendar.html#before(java.lang.Object)[before](Object)
* void {java11-javadoc}/java.base/java/util/Calendar.html#clear()[clear]()
* void {java11-javadoc}/java.base/java/util/Calendar.html#clear(int)[clear](int)
* def {java11-javadoc}/java.base/java/util/Calendar.html#clone()[clone]()
* int {java11-javadoc}/java.base/java/util/Calendar.html#compareTo(java.util.Calendar)[compareTo](Calendar)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/util/Calendar.html#get(int)[get](int)
* int {java11-javadoc}/java.base/java/util/Calendar.html#getActualMaximum(int)[getActualMaximum](int)
* int {java11-javadoc}/java.base/java/util/Calendar.html#getActualMinimum(int)[getActualMinimum](int)
* String {java11-javadoc}/java.base/java/util/Calendar.html#getCalendarType()[getCalendarType]()
* String {java11-javadoc}/java.base/java/util/Calendar.html#getDisplayName(int,int,java.util.Locale)[getDisplayName](int, int, Locale)
* Map {java11-javadoc}/java.base/java/util/Calendar.html#getDisplayNames(int,int,java.util.Locale)[getDisplayNames](int, int, Locale)
* int {java11-javadoc}/java.base/java/util/Calendar.html#getFirstDayOfWeek()[getFirstDayOfWeek]()
* int {java11-javadoc}/java.base/java/util/Calendar.html#getGreatestMinimum(int)[getGreatestMinimum](int)
* int {java11-javadoc}/java.base/java/util/Calendar.html#getLeastMaximum(int)[getLeastMaximum](int)
* int {java11-javadoc}/java.base/java/util/Calendar.html#getMaximum(int)[getMaximum](int)
* int {java11-javadoc}/java.base/java/util/Calendar.html#getMinimalDaysInFirstWeek()[getMinimalDaysInFirstWeek]()
* int {java11-javadoc}/java.base/java/util/Calendar.html#getMinimum(int)[getMinimum](int)
* Date {java11-javadoc}/java.base/java/util/Calendar.html#getTime()[getTime]()
* long {java11-javadoc}/java.base/java/util/Calendar.html#getTimeInMillis()[getTimeInMillis]()
* TimeZone {java11-javadoc}/java.base/java/util/Calendar.html#getTimeZone()[getTimeZone]()
* int {java11-javadoc}/java.base/java/util/Calendar.html#getWeekYear()[getWeekYear]()
* int {java11-javadoc}/java.base/java/util/Calendar.html#getWeeksInWeekYear()[getWeeksInWeekYear]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Calendar.html#isLenient()[isLenient]()
* boolean {java11-javadoc}/java.base/java/util/Calendar.html#isSet(int)[isSet](int)
* boolean {java11-javadoc}/java.base/java/util/Calendar.html#isWeekDateSupported()[isWeekDateSupported]()
* void {java11-javadoc}/java.base/java/util/Calendar.html#roll(int,int)[roll](int, int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#set(int,int)[set](int, int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#set(int,int,int)[set](int, int, int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#set(int,int,int,int,int)[set](int, int, int, int, int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#set(int,int,int,int,int,int)[set](int, int, int, int, int, int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setFirstDayOfWeek(int)[setFirstDayOfWeek](int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setLenient(boolean)[setLenient](boolean)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setMinimalDaysInFirstWeek(int)[setMinimalDaysInFirstWeek](int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setTime(java.util.Date)[setTime](Date)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setTimeInMillis(long)[setTimeInMillis](long)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setTimeZone(java.util.TimeZone)[setTimeZone](TimeZone)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setWeekDate(int,int,int)[setWeekDate](int, int, int)
* Instant {java11-javadoc}/java.base/java/util/Calendar.html#toInstant()[toInstant]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Calendar.Builder]]
==== Calendar.Builder
* {java11-javadoc}/java.base/java/util/Calendar$Builder.html#<init>()[Calendar.Builder]()
* Calendar {java11-javadoc}/java.base/java/util/Calendar$Builder.html#build()[build]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#set(int,int)[set](int, int)
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#setCalendarType(java.lang.String)[setCalendarType](String)
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#setDate(int,int,int)[setDate](int, int, int)
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#setFields(int%5B%5D)[setFields](int[])
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#setInstant(long)[setInstant](long)
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#setLenient(boolean)[setLenient](boolean)
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#setLocale(java.util.Locale)[setLocale](Locale)
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#setTimeOfDay(int,int,int)[setTimeOfDay](int, int, int)
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#setTimeOfDay(int,int,int,int)[setTimeOfDay](int, int, int, int)
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#setTimeZone(java.util.TimeZone)[setTimeZone](TimeZone)
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#setWeekDate(int,int,int)[setWeekDate](int, int, int)
* Calendar.Builder {java11-javadoc}/java.base/java/util/Calendar$Builder.html#setWeekDefinition(int,int)[setWeekDefinition](int, int)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Collection]]
==== Collection
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Collections]]
==== Collections
* static List {java11-javadoc}/java.base/java/util/Collections.html#EMPTY_LIST[EMPTY_LIST]
* static Map {java11-javadoc}/java.base/java/util/Collections.html#EMPTY_MAP[EMPTY_MAP]
* static Set {java11-javadoc}/java.base/java/util/Collections.html#EMPTY_SET[EMPTY_SET]
* static boolean {java11-javadoc}/java.base/java/util/Collections.html#addAll(java.util.Collection,java.lang.Object%5B%5D)[addAll](Collection, def[])
* static Queue {java11-javadoc}/java.base/java/util/Collections.html#asLifoQueue(java.util.Deque)[asLifoQueue](Deque)
* static int {java11-javadoc}/java.base/java/util/Collections.html#binarySearch(java.util.List,java.lang.Object)[binarySearch](List, def)
* static int {java11-javadoc}/java.base/java/util/Collections.html#binarySearch(java.util.List,java.lang.Object,java.util.Comparator)[binarySearch](List, def, Comparator)
* static void {java11-javadoc}/java.base/java/util/Collections.html#copy(java.util.List,java.util.List)[copy](List, List)
* static boolean {java11-javadoc}/java.base/java/util/Collections.html#disjoint(java.util.Collection,java.util.Collection)[disjoint](Collection, Collection)
* static Enumeration {java11-javadoc}/java.base/java/util/Collections.html#emptyEnumeration()[emptyEnumeration]()
* static Iterator {java11-javadoc}/java.base/java/util/Collections.html#emptyIterator()[emptyIterator]()
* static List {java11-javadoc}/java.base/java/util/Collections.html#emptyList()[emptyList]()
* static ListIterator {java11-javadoc}/java.base/java/util/Collections.html#emptyListIterator()[emptyListIterator]()
* static Map {java11-javadoc}/java.base/java/util/Collections.html#emptyMap()[emptyMap]()
* static NavigableMap {java11-javadoc}/java.base/java/util/Collections.html#emptyNavigableMap()[emptyNavigableMap]()
* static NavigableSet {java11-javadoc}/java.base/java/util/Collections.html#emptyNavigableSet()[emptyNavigableSet]()
* static Set {java11-javadoc}/java.base/java/util/Collections.html#emptySet()[emptySet]()
* static SortedMap {java11-javadoc}/java.base/java/util/Collections.html#emptySortedMap()[emptySortedMap]()
* static SortedSet {java11-javadoc}/java.base/java/util/Collections.html#emptySortedSet()[emptySortedSet]()
* static Enumeration {java11-javadoc}/java.base/java/util/Collections.html#enumeration(java.util.Collection)[enumeration](Collection)
* static void {java11-javadoc}/java.base/java/util/Collections.html#fill(java.util.List,java.lang.Object)[fill](List, def)
* static int {java11-javadoc}/java.base/java/util/Collections.html#frequency(java.util.Collection,java.lang.Object)[frequency](Collection, def)
* static int {java11-javadoc}/java.base/java/util/Collections.html#indexOfSubList(java.util.List,java.util.List)[indexOfSubList](List, List)
* static int {java11-javadoc}/java.base/java/util/Collections.html#lastIndexOfSubList(java.util.List,java.util.List)[lastIndexOfSubList](List, List)
* static ArrayList {java11-javadoc}/java.base/java/util/Collections.html#list(java.util.Enumeration)[list](Enumeration)
* static def {java11-javadoc}/java.base/java/util/Collections.html#max(java.util.Collection)[max](Collection)
* static def {java11-javadoc}/java.base/java/util/Collections.html#max(java.util.Collection,java.util.Comparator)[max](Collection, Comparator)
* static def {java11-javadoc}/java.base/java/util/Collections.html#min(java.util.Collection)[min](Collection)
* static def {java11-javadoc}/java.base/java/util/Collections.html#min(java.util.Collection,java.util.Comparator)[min](Collection, Comparator)
* static List {java11-javadoc}/java.base/java/util/Collections.html#nCopies(int,java.lang.Object)[nCopies](int, def)
* static Set {java11-javadoc}/java.base/java/util/Collections.html#newSetFromMap(java.util.Map)[newSetFromMap](Map)
* static boolean {java11-javadoc}/java.base/java/util/Collections.html#replaceAll(java.util.List,java.lang.Object,java.lang.Object)[replaceAll](List, def, def)
* static void {java11-javadoc}/java.base/java/util/Collections.html#reverse(java.util.List)[reverse](List)
* static Comparator {java11-javadoc}/java.base/java/util/Collections.html#reverseOrder()[reverseOrder]()
* static Comparator {java11-javadoc}/java.base/java/util/Collections.html#reverseOrder(java.util.Comparator)[reverseOrder](Comparator)
* static void {java11-javadoc}/java.base/java/util/Collections.html#rotate(java.util.List,int)[rotate](List, int)
* static void {java11-javadoc}/java.base/java/util/Collections.html#shuffle(java.util.List)[shuffle](List)
* static void {java11-javadoc}/java.base/java/util/Collections.html#shuffle(java.util.List,java.util.Random)[shuffle](List, Random)
* static Set {java11-javadoc}/java.base/java/util/Collections.html#singleton(java.lang.Object)[singleton](def)
* static List {java11-javadoc}/java.base/java/util/Collections.html#singletonList(java.lang.Object)[singletonList](def)
* static Map {java11-javadoc}/java.base/java/util/Collections.html#singletonMap(java.lang.Object,java.lang.Object)[singletonMap](def, def)
* static void {java11-javadoc}/java.base/java/util/Collections.html#sort(java.util.List)[sort](List)
* static void {java11-javadoc}/java.base/java/util/Collections.html#sort(java.util.List,java.util.Comparator)[sort](List, Comparator)
* static void {java11-javadoc}/java.base/java/util/Collections.html#swap(java.util.List,int,int)[swap](List, int, int)
* static Collection {java11-javadoc}/java.base/java/util/Collections.html#unmodifiableCollection(java.util.Collection)[unmodifiableCollection](Collection)
* static List {java11-javadoc}/java.base/java/util/Collections.html#unmodifiableList(java.util.List)[unmodifiableList](List)
* static Map {java11-javadoc}/java.base/java/util/Collections.html#unmodifiableMap(java.util.Map)[unmodifiableMap](Map)
* static NavigableMap {java11-javadoc}/java.base/java/util/Collections.html#unmodifiableNavigableMap(java.util.NavigableMap)[unmodifiableNavigableMap](NavigableMap)
* static NavigableSet {java11-javadoc}/java.base/java/util/Collections.html#unmodifiableNavigableSet(java.util.NavigableSet)[unmodifiableNavigableSet](NavigableSet)
* static Set {java11-javadoc}/java.base/java/util/Collections.html#unmodifiableSet(java.util.Set)[unmodifiableSet](Set)
* static SortedMap {java11-javadoc}/java.base/java/util/Collections.html#unmodifiableSortedMap(java.util.SortedMap)[unmodifiableSortedMap](SortedMap)
* static SortedSet {java11-javadoc}/java.base/java/util/Collections.html#unmodifiableSortedSet(java.util.SortedSet)[unmodifiableSortedSet](SortedSet)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Comparator]]
==== Comparator
* static Comparator {java11-javadoc}/java.base/java/util/Comparator.html#comparing(java.util.function.Function)[comparing](Function)
* static Comparator {java11-javadoc}/java.base/java/util/Comparator.html#comparing(java.util.function.Function,java.util.Comparator)[comparing](Function, Comparator)
* static Comparator {java11-javadoc}/java.base/java/util/Comparator.html#comparingDouble(java.util.function.ToDoubleFunction)[comparingDouble](ToDoubleFunction)
* static Comparator {java11-javadoc}/java.base/java/util/Comparator.html#comparingInt(java.util.function.ToIntFunction)[comparingInt](ToIntFunction)
* static Comparator {java11-javadoc}/java.base/java/util/Comparator.html#comparingLong(java.util.function.ToLongFunction)[comparingLong](ToLongFunction)
* static Comparator {java11-javadoc}/java.base/java/util/Comparator.html#naturalOrder()[naturalOrder]()
* static Comparator {java11-javadoc}/java.base/java/util/Comparator.html#nullsFirst(java.util.Comparator)[nullsFirst](Comparator)
* static Comparator {java11-javadoc}/java.base/java/util/Comparator.html#nullsLast(java.util.Comparator)[nullsLast](Comparator)
* static Comparator {java11-javadoc}/java.base/java/util/Comparator.html#reverseOrder()[reverseOrder]()
* int {java11-javadoc}/java.base/java/util/Comparator.html#compare(java.lang.Object,java.lang.Object)[compare](def, def)
* boolean {java11-javadoc}/java.base/java/util/Comparator.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* Comparator {java11-javadoc}/java.base/java/util/Comparator.html#reversed()[reversed]()
* Comparator {java11-javadoc}/java.base/java/util/Comparator.html#thenComparing(java.util.Comparator)[thenComparing](Comparator)
* Comparator {java11-javadoc}/java.base/java/util/Comparator.html#thenComparing(java.util.function.Function,java.util.Comparator)[thenComparing](Function, Comparator)
* Comparator {java11-javadoc}/java.base/java/util/Comparator.html#thenComparingDouble(java.util.function.ToDoubleFunction)[thenComparingDouble](ToDoubleFunction)
* Comparator {java11-javadoc}/java.base/java/util/Comparator.html#thenComparingInt(java.util.function.ToIntFunction)[thenComparingInt](ToIntFunction)
* Comparator {java11-javadoc}/java.base/java/util/Comparator.html#thenComparingLong(java.util.function.ToLongFunction)[thenComparingLong](ToLongFunction)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-ConcurrentModificationException]]
==== ConcurrentModificationException
* {java11-javadoc}/java.base/java/util/ConcurrentModificationException.html#<init>()[ConcurrentModificationException]()
* {java11-javadoc}/java.base/java/util/ConcurrentModificationException.html#<init>(java.lang.String)[ConcurrentModificationException](String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Currency]]
==== Currency
* static Set {java11-javadoc}/java.base/java/util/Currency.html#getAvailableCurrencies()[getAvailableCurrencies]()
* static Currency {java11-javadoc}/java.base/java/util/Currency.html#getInstance(java.lang.String)[getInstance](String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/util/Currency.html#getCurrencyCode()[getCurrencyCode]()
* int {java11-javadoc}/java.base/java/util/Currency.html#getDefaultFractionDigits()[getDefaultFractionDigits]()
* String {java11-javadoc}/java.base/java/util/Currency.html#getDisplayName()[getDisplayName]()
* String {java11-javadoc}/java.base/java/util/Currency.html#getDisplayName(java.util.Locale)[getDisplayName](Locale)
* int {java11-javadoc}/java.base/java/util/Currency.html#getNumericCode()[getNumericCode]()
* String {java11-javadoc}/java.base/java/util/Currency.html#getSymbol()[getSymbol]()
* String {java11-javadoc}/java.base/java/util/Currency.html#getSymbol(java.util.Locale)[getSymbol](Locale)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Date]]
==== Date
* static Date {java11-javadoc}/java.base/java/util/Date.html#from(java.time.Instant)[from](Instant)
* {java11-javadoc}/java.base/java/util/Date.html#<init>()[Date]()
* {java11-javadoc}/java.base/java/util/Date.html#<init>(long)[Date](long)
* boolean {java11-javadoc}/java.base/java/util/Date.html#after(java.util.Date)[after](Date)
* boolean {java11-javadoc}/java.base/java/util/Date.html#before(java.util.Date)[before](Date)
* def {java11-javadoc}/java.base/java/util/Date.html#clone()[clone]()
* int {java11-javadoc}/java.base/java/util/Date.html#compareTo(java.util.Date)[compareTo](Date)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* long {java11-javadoc}/java.base/java/util/Date.html#getTime()[getTime]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* void {java11-javadoc}/java.base/java/util/Date.html#setTime(long)[setTime](long)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Deque]]
==== Deque
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* void {java11-javadoc}/java.base/java/util/Deque.html#addFirst(java.lang.Object)[addFirst](def)
* void {java11-javadoc}/java.base/java/util/Deque.html#addLast(java.lang.Object)[addLast](def)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* Iterator {java11-javadoc}/java.base/java/util/Deque.html#descendingIterator()[descendingIterator]()
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* def {java11-javadoc}/java.base/java/util/Queue.html#element()[element]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/Deque.html#getFirst()[getFirst]()
* def {java11-javadoc}/java.base/java/util/Deque.html#getLast()[getLast]()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* boolean {java11-javadoc}/java.base/java/util/Queue.html#offer(java.lang.Object)[offer](def)
* boolean {java11-javadoc}/java.base/java/util/Deque.html#offerFirst(java.lang.Object)[offerFirst](def)
* boolean {java11-javadoc}/java.base/java/util/Deque.html#offerLast(java.lang.Object)[offerLast](def)
* def {java11-javadoc}/java.base/java/util/Queue.html#peek()[peek]()
* def {java11-javadoc}/java.base/java/util/Deque.html#peekFirst()[peekFirst]()
* def {java11-javadoc}/java.base/java/util/Deque.html#peekLast()[peekLast]()
* def {java11-javadoc}/java.base/java/util/Queue.html#poll()[poll]()
* def {java11-javadoc}/java.base/java/util/Deque.html#pollFirst()[pollFirst]()
* def {java11-javadoc}/java.base/java/util/Deque.html#pollLast()[pollLast]()
* def {java11-javadoc}/java.base/java/util/Deque.html#pop()[pop]()
* void {java11-javadoc}/java.base/java/util/Deque.html#push(java.lang.Object)[push](def)
* def {java11-javadoc}/java.base/java/util/Queue.html#remove()[remove]()
* boolean {java11-javadoc}/java.base/java/util/Deque.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* def {java11-javadoc}/java.base/java/util/Deque.html#removeFirst()[removeFirst]()
* boolean {java11-javadoc}/java.base/java/util/Deque.html#removeFirstOccurrence(java.lang.Object)[removeFirstOccurrence](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* def {java11-javadoc}/java.base/java/util/Deque.html#removeLast()[removeLast]()
* boolean {java11-javadoc}/java.base/java/util/Deque.html#removeLastOccurrence(java.lang.Object)[removeLastOccurrence](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Dictionary]]
==== Dictionary
* Enumeration {java11-javadoc}/java.base/java/util/Dictionary.html#elements()[elements]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* def {java11-javadoc}/java.base/java/util/Dictionary.html#get(java.lang.Object)[get](def)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Dictionary.html#isEmpty()[isEmpty]()
* Enumeration {java11-javadoc}/java.base/java/util/Dictionary.html#keys()[keys]()
* def {java11-javadoc}/java.base/java/util/Dictionary.html#put(java.lang.Object,java.lang.Object)[put](def, def)
* def {java11-javadoc}/java.base/java/util/Dictionary.html#remove(java.lang.Object)[remove](def)
* int {java11-javadoc}/java.base/java/util/Dictionary.html#size()[size]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-DoubleSummaryStatistics]]
==== DoubleSummaryStatistics
* {java11-javadoc}/java.base/java/util/DoubleSummaryStatistics.html#<init>()[DoubleSummaryStatistics]()
* void {java11-javadoc}/java.base/java/util/function/DoubleConsumer.html#accept(double)[accept](double)
* DoubleConsumer {java11-javadoc}/java.base/java/util/function/DoubleConsumer.html#andThen(java.util.function.DoubleConsumer)[andThen](DoubleConsumer)
* void {java11-javadoc}/java.base/java/util/DoubleSummaryStatistics.html#combine(java.util.DoubleSummaryStatistics)[combine](DoubleSummaryStatistics)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* double {java11-javadoc}/java.base/java/util/DoubleSummaryStatistics.html#getAverage()[getAverage]()
* long {java11-javadoc}/java.base/java/util/DoubleSummaryStatistics.html#getCount()[getCount]()
* double {java11-javadoc}/java.base/java/util/DoubleSummaryStatistics.html#getMax()[getMax]()
* double {java11-javadoc}/java.base/java/util/DoubleSummaryStatistics.html#getMin()[getMin]()
* double {java11-javadoc}/java.base/java/util/DoubleSummaryStatistics.html#getSum()[getSum]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-DuplicateFormatFlagsException]]
==== DuplicateFormatFlagsException
* {java11-javadoc}/java.base/java/util/DuplicateFormatFlagsException.html#<init>(java.lang.String)[DuplicateFormatFlagsException](String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/util/DuplicateFormatFlagsException.html#getFlags()[getFlags]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-EmptyStackException]]
==== EmptyStackException
* {java11-javadoc}/java.base/java/util/EmptyStackException.html#<init>()[EmptyStackException]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Enumeration]]
==== Enumeration
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* boolean {java11-javadoc}/java.base/java/util/Enumeration.html#hasMoreElements()[hasMoreElements]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* def {java11-javadoc}/java.base/java/util/Enumeration.html#nextElement()[nextElement]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-EventListener]]
==== EventListener
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-EventListenerProxy]]
==== EventListenerProxy
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* EventListener {java11-javadoc}/java.base/java/util/EventListenerProxy.html#getListener()[getListener]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-EventObject]]
==== EventObject
* {java11-javadoc}/java.base/java/util/EventObject.html#<init>(java.lang.Object)[EventObject](Object)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* Object {java11-javadoc}/java.base/java/util/EventObject.html#getSource()[getSource]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-FormatFlagsConversionMismatchException]]
==== FormatFlagsConversionMismatchException
* {java11-javadoc}/java.base/java/util/FormatFlagsConversionMismatchException.html#<init>(java.lang.String,char)[FormatFlagsConversionMismatchException](String, char)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* char {java11-javadoc}/java.base/java/util/FormatFlagsConversionMismatchException.html#getConversion()[getConversion]()
* String {java11-javadoc}/java.base/java/util/FormatFlagsConversionMismatchException.html#getFlags()[getFlags]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Formattable]]
==== Formattable
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* void {java11-javadoc}/java.base/java/util/Formattable.html#formatTo(java.util.Formatter,int,int,int)[formatTo](Formatter, int, int, int)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-FormattableFlags]]
==== FormattableFlags
* static int {java11-javadoc}/java.base/java/util/FormattableFlags.html#ALTERNATE[ALTERNATE]
* static int {java11-javadoc}/java.base/java/util/FormattableFlags.html#LEFT_JUSTIFY[LEFT_JUSTIFY]
* static int {java11-javadoc}/java.base/java/util/FormattableFlags.html#UPPERCASE[UPPERCASE]
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Formatter]]
==== Formatter
* {java11-javadoc}/java.base/java/util/Formatter.html#<init>()[Formatter]()
* {java11-javadoc}/java.base/java/util/Formatter.html#<init>(java.lang.Appendable)[Formatter](Appendable)
* {java11-javadoc}/java.base/java/util/Formatter.html#<init>(java.lang.Appendable,java.util.Locale)[Formatter](Appendable, Locale)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* Formatter {java11-javadoc}/java.base/java/util/Formatter.html#format(java.lang.String,java.lang.Object%5B%5D)[format](String, def[])
* Formatter {java11-javadoc}/java.base/java/util/Formatter.html#format(java.util.Locale,java.lang.String,java.lang.Object%5B%5D)[format](Locale, String, def[])
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* Locale {java11-javadoc}/java.base/java/util/Formatter.html#locale()[locale]()
* Appendable {java11-javadoc}/java.base/java/util/Formatter.html#out()[out]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Formatter.BigDecimalLayoutForm]]
==== Formatter.BigDecimalLayoutForm
* static Formatter.BigDecimalLayoutForm {java11-javadoc}/java.base/java/util/Formatter$BigDecimalLayoutForm.html#DECIMAL_FLOAT[DECIMAL_FLOAT]
* static Formatter.BigDecimalLayoutForm {java11-javadoc}/java.base/java/util/Formatter$BigDecimalLayoutForm.html#SCIENTIFIC[SCIENTIFIC]
* int {java11-javadoc}/java.base/java/lang/Enum.html#compareTo(java.lang.Enum)[compareTo](Enum)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Enum.html#name()[name]()
* int {java11-javadoc}/java.base/java/lang/Enum.html#ordinal()[ordinal]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-FormatterClosedException]]
==== FormatterClosedException
* {java11-javadoc}/java.base/java/util/FormatterClosedException.html#<init>()[FormatterClosedException]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-GregorianCalendar]]
==== GregorianCalendar
* static int {java11-javadoc}/java.base/java/util/GregorianCalendar.html#AD[AD]
* static int {java11-javadoc}/java.base/java/util/GregorianCalendar.html#BC[BC]
* static GregorianCalendar {java11-javadoc}/java.base/java/util/GregorianCalendar.html#from(java.time.ZonedDateTime)[from](ZonedDateTime)
* {java11-javadoc}/java.base/java/util/GregorianCalendar.html#<init>()[GregorianCalendar]()
* {java11-javadoc}/java.base/java/util/GregorianCalendar.html#<init>(java.util.TimeZone)[GregorianCalendar](TimeZone)
* {java11-javadoc}/java.base/java/util/GregorianCalendar.html#<init>(java.util.TimeZone,java.util.Locale)[GregorianCalendar](TimeZone, Locale)
* {java11-javadoc}/java.base/java/util/GregorianCalendar.html#<init>(int,int,int)[GregorianCalendar](int, int, int)
* {java11-javadoc}/java.base/java/util/GregorianCalendar.html#<init>(int,int,int,int,int)[GregorianCalendar](int, int, int, int, int)
* {java11-javadoc}/java.base/java/util/GregorianCalendar.html#<init>(int,int,int,int,int,int)[GregorianCalendar](int, int, int, int, int, int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#add(int,int)[add](int, int)
* boolean {java11-javadoc}/java.base/java/util/Calendar.html#after(java.lang.Object)[after](Object)
* boolean {java11-javadoc}/java.base/java/util/Calendar.html#before(java.lang.Object)[before](Object)
* void {java11-javadoc}/java.base/java/util/Calendar.html#clear()[clear]()
* void {java11-javadoc}/java.base/java/util/Calendar.html#clear(int)[clear](int)
* def {java11-javadoc}/java.base/java/util/Calendar.html#clone()[clone]()
* int {java11-javadoc}/java.base/java/util/Calendar.html#compareTo(java.util.Calendar)[compareTo](Calendar)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/util/Calendar.html#get(int)[get](int)
* int {java11-javadoc}/java.base/java/util/Calendar.html#getActualMaximum(int)[getActualMaximum](int)
* int {java11-javadoc}/java.base/java/util/Calendar.html#getActualMinimum(int)[getActualMinimum](int)
* String {java11-javadoc}/java.base/java/util/Calendar.html#getCalendarType()[getCalendarType]()
* String {java11-javadoc}/java.base/java/util/Calendar.html#getDisplayName(int,int,java.util.Locale)[getDisplayName](int, int, Locale)
* Map {java11-javadoc}/java.base/java/util/Calendar.html#getDisplayNames(int,int,java.util.Locale)[getDisplayNames](int, int, Locale)
* int {java11-javadoc}/java.base/java/util/Calendar.html#getFirstDayOfWeek()[getFirstDayOfWeek]()
* int {java11-javadoc}/java.base/java/util/Calendar.html#getGreatestMinimum(int)[getGreatestMinimum](int)
* Date {java11-javadoc}/java.base/java/util/GregorianCalendar.html#getGregorianChange()[getGregorianChange]()
* int {java11-javadoc}/java.base/java/util/Calendar.html#getLeastMaximum(int)[getLeastMaximum](int)
* int {java11-javadoc}/java.base/java/util/Calendar.html#getMaximum(int)[getMaximum](int)
* int {java11-javadoc}/java.base/java/util/Calendar.html#getMinimalDaysInFirstWeek()[getMinimalDaysInFirstWeek]()
* int {java11-javadoc}/java.base/java/util/Calendar.html#getMinimum(int)[getMinimum](int)
* Date {java11-javadoc}/java.base/java/util/Calendar.html#getTime()[getTime]()
* long {java11-javadoc}/java.base/java/util/Calendar.html#getTimeInMillis()[getTimeInMillis]()
* TimeZone {java11-javadoc}/java.base/java/util/Calendar.html#getTimeZone()[getTimeZone]()
* int {java11-javadoc}/java.base/java/util/Calendar.html#getWeekYear()[getWeekYear]()
* int {java11-javadoc}/java.base/java/util/Calendar.html#getWeeksInWeekYear()[getWeeksInWeekYear]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/GregorianCalendar.html#isLeapYear(int)[isLeapYear](int)
* boolean {java11-javadoc}/java.base/java/util/Calendar.html#isLenient()[isLenient]()
* boolean {java11-javadoc}/java.base/java/util/Calendar.html#isSet(int)[isSet](int)
* boolean {java11-javadoc}/java.base/java/util/Calendar.html#isWeekDateSupported()[isWeekDateSupported]()
* void {java11-javadoc}/java.base/java/util/Calendar.html#roll(int,int)[roll](int, int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#set(int,int)[set](int, int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#set(int,int,int)[set](int, int, int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#set(int,int,int,int,int)[set](int, int, int, int, int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#set(int,int,int,int,int,int)[set](int, int, int, int, int, int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setFirstDayOfWeek(int)[setFirstDayOfWeek](int)
* void {java11-javadoc}/java.base/java/util/GregorianCalendar.html#setGregorianChange(java.util.Date)[setGregorianChange](Date)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setLenient(boolean)[setLenient](boolean)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setMinimalDaysInFirstWeek(int)[setMinimalDaysInFirstWeek](int)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setTime(java.util.Date)[setTime](Date)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setTimeInMillis(long)[setTimeInMillis](long)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setTimeZone(java.util.TimeZone)[setTimeZone](TimeZone)
* void {java11-javadoc}/java.base/java/util/Calendar.html#setWeekDate(int,int,int)[setWeekDate](int, int, int)
* Instant {java11-javadoc}/java.base/java/util/Calendar.html#toInstant()[toInstant]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* ZonedDateTime {java11-javadoc}/java.base/java/util/GregorianCalendar.html#toZonedDateTime()[toZonedDateTime]()


[[painless-api-reference-watcher-condition-java-util-HashMap]]
==== HashMap
* {java11-javadoc}/java.base/java/util/HashMap.html#<init>()[HashMap]()
* {java11-javadoc}/java.base/java/util/HashMap.html#<init>(java.util.Map)[HashMap](Map)
* void {java11-javadoc}/java.base/java/util/Map.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/HashMap.html#clone()[clone]()
* List collect(BiFunction)
* def collect(Collection, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)[compute](def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)[computeIfAbsent](def, Function)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)[computeIfPresent](def, BiFunction)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsKey(java.lang.Object)[containsKey](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsValue(java.lang.Object)[containsValue](def)
* int count(BiPredicate)
* def each(BiConsumer)
* Set {java11-javadoc}/java.base/java/util/Map.html#entrySet()[entrySet]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#equals(java.lang.Object)[equals](Object)
* boolean every(BiPredicate)
* Map.Entry find(BiPredicate)
* Map findAll(BiPredicate)
* def findResult(BiFunction)
* def findResult(def, BiFunction)
* List findResults(BiFunction)
* void {java11-javadoc}/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)[forEach](BiConsumer)
* def {java11-javadoc}/java.base/java/util/Map.html#get(java.lang.Object)[get](def)
* def {java11-javadoc}/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)[getOrDefault](def, def)
* Map groupBy(BiFunction)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#isEmpty()[isEmpty]()
* Set {java11-javadoc}/java.base/java/util/Map.html#keySet()[keySet]()
* def {java11-javadoc}/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)[merge](def, def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)[put](def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#putAll(java.util.Map)[putAll](Map)
* def {java11-javadoc}/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)[putIfAbsent](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)[remove](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)[replace](def, def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)[replace](def, def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)[replaceAll](BiFunction)
* int {java11-javadoc}/java.base/java/util/Map.html#size()[size]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* Collection {java11-javadoc}/java.base/java/util/Map.html#values()[values]()


[[painless-api-reference-watcher-condition-java-util-HashSet]]
==== HashSet
* {java11-javadoc}/java.base/java/util/HashSet.html#<init>()[HashSet]()
* {java11-javadoc}/java.base/java/util/HashSet.html#<init>(java.util.Collection)[HashSet](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/HashSet.html#clone()[clone]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/Set.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/Set.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* boolean {java11-javadoc}/java.base/java/util/Set.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Hashtable]]
==== Hashtable
* {java11-javadoc}/java.base/java/util/Hashtable.html#<init>()[Hashtable]()
* {java11-javadoc}/java.base/java/util/Hashtable.html#<init>(java.util.Map)[Hashtable](Map)
* void {java11-javadoc}/java.base/java/util/Map.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/Hashtable.html#clone()[clone]()
* List collect(BiFunction)
* def collect(Collection, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)[compute](def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)[computeIfAbsent](def, Function)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)[computeIfPresent](def, BiFunction)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsKey(java.lang.Object)[containsKey](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsValue(java.lang.Object)[containsValue](def)
* int count(BiPredicate)
* def each(BiConsumer)
* Enumeration {java11-javadoc}/java.base/java/util/Dictionary.html#elements()[elements]()
* Set {java11-javadoc}/java.base/java/util/Map.html#entrySet()[entrySet]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#equals(java.lang.Object)[equals](Object)
* boolean every(BiPredicate)
* Map.Entry find(BiPredicate)
* Map findAll(BiPredicate)
* def findResult(BiFunction)
* def findResult(def, BiFunction)
* List findResults(BiFunction)
* void {java11-javadoc}/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)[forEach](BiConsumer)
* def {java11-javadoc}/java.base/java/util/Map.html#get(java.lang.Object)[get](def)
* def {java11-javadoc}/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)[getOrDefault](def, def)
* Map groupBy(BiFunction)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#isEmpty()[isEmpty]()
* Set {java11-javadoc}/java.base/java/util/Map.html#keySet()[keySet]()
* Enumeration {java11-javadoc}/java.base/java/util/Dictionary.html#keys()[keys]()
* def {java11-javadoc}/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)[merge](def, def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)[put](def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#putAll(java.util.Map)[putAll](Map)
* def {java11-javadoc}/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)[putIfAbsent](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)[remove](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)[replace](def, def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)[replace](def, def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)[replaceAll](BiFunction)
* int {java11-javadoc}/java.base/java/util/Map.html#size()[size]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* Collection {java11-javadoc}/java.base/java/util/Map.html#values()[values]()


[[painless-api-reference-watcher-condition-java-util-IdentityHashMap]]
==== IdentityHashMap
* {java11-javadoc}/java.base/java/util/IdentityHashMap.html#<init>()[IdentityHashMap]()
* {java11-javadoc}/java.base/java/util/IdentityHashMap.html#<init>(java.util.Map)[IdentityHashMap](Map)
* void {java11-javadoc}/java.base/java/util/Map.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/IdentityHashMap.html#clone()[clone]()
* List collect(BiFunction)
* def collect(Collection, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)[compute](def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)[computeIfAbsent](def, Function)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)[computeIfPresent](def, BiFunction)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsKey(java.lang.Object)[containsKey](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsValue(java.lang.Object)[containsValue](def)
* int count(BiPredicate)
* def each(BiConsumer)
* Set {java11-javadoc}/java.base/java/util/Map.html#entrySet()[entrySet]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#equals(java.lang.Object)[equals](Object)
* boolean every(BiPredicate)
* Map.Entry find(BiPredicate)
* Map findAll(BiPredicate)
* def findResult(BiFunction)
* def findResult(def, BiFunction)
* List findResults(BiFunction)
* void {java11-javadoc}/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)[forEach](BiConsumer)
* def {java11-javadoc}/java.base/java/util/Map.html#get(java.lang.Object)[get](def)
* def {java11-javadoc}/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)[getOrDefault](def, def)
* Map groupBy(BiFunction)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#isEmpty()[isEmpty]()
* Set {java11-javadoc}/java.base/java/util/Map.html#keySet()[keySet]()
* def {java11-javadoc}/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)[merge](def, def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)[put](def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#putAll(java.util.Map)[putAll](Map)
* def {java11-javadoc}/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)[putIfAbsent](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)[remove](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)[replace](def, def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)[replace](def, def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)[replaceAll](BiFunction)
* int {java11-javadoc}/java.base/java/util/Map.html#size()[size]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* Collection {java11-javadoc}/java.base/java/util/Map.html#values()[values]()


[[painless-api-reference-watcher-condition-java-util-IllegalFormatCodePointException]]
==== IllegalFormatCodePointException
* {java11-javadoc}/java.base/java/util/IllegalFormatCodePointException.html#<init>(int)[IllegalFormatCodePointException](int)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/util/IllegalFormatCodePointException.html#getCodePoint()[getCodePoint]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-IllegalFormatConversionException]]
==== IllegalFormatConversionException
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* char {java11-javadoc}/java.base/java/util/IllegalFormatConversionException.html#getConversion()[getConversion]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-IllegalFormatException]]
==== IllegalFormatException
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-IllegalFormatFlagsException]]
==== IllegalFormatFlagsException
* {java11-javadoc}/java.base/java/util/IllegalFormatFlagsException.html#<init>(java.lang.String)[IllegalFormatFlagsException](String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/util/IllegalFormatFlagsException.html#getFlags()[getFlags]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-IllegalFormatPrecisionException]]
==== IllegalFormatPrecisionException
* {java11-javadoc}/java.base/java/util/IllegalFormatPrecisionException.html#<init>(int)[IllegalFormatPrecisionException](int)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* int {java11-javadoc}/java.base/java/util/IllegalFormatPrecisionException.html#getPrecision()[getPrecision]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-IllegalFormatWidthException]]
==== IllegalFormatWidthException
* {java11-javadoc}/java.base/java/util/IllegalFormatWidthException.html#<init>(int)[IllegalFormatWidthException](int)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/util/IllegalFormatWidthException.html#getWidth()[getWidth]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-IllformedLocaleException]]
==== IllformedLocaleException
* {java11-javadoc}/java.base/java/util/IllformedLocaleException.html#<init>()[IllformedLocaleException]()
* {java11-javadoc}/java.base/java/util/IllformedLocaleException.html#<init>(java.lang.String)[IllformedLocaleException](String)
* {java11-javadoc}/java.base/java/util/IllformedLocaleException.html#<init>(java.lang.String,int)[IllformedLocaleException](String, int)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/util/IllformedLocaleException.html#getErrorIndex()[getErrorIndex]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-InputMismatchException]]
==== InputMismatchException
* {java11-javadoc}/java.base/java/util/InputMismatchException.html#<init>()[InputMismatchException]()
* {java11-javadoc}/java.base/java/util/InputMismatchException.html#<init>(java.lang.String)[InputMismatchException](String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-IntSummaryStatistics]]
==== IntSummaryStatistics
* {java11-javadoc}/java.base/java/util/IntSummaryStatistics.html#<init>()[IntSummaryStatistics]()
* void {java11-javadoc}/java.base/java/util/function/IntConsumer.html#accept(int)[accept](int)
* IntConsumer {java11-javadoc}/java.base/java/util/function/IntConsumer.html#andThen(java.util.function.IntConsumer)[andThen](IntConsumer)
* void {java11-javadoc}/java.base/java/util/IntSummaryStatistics.html#combine(java.util.IntSummaryStatistics)[combine](IntSummaryStatistics)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* double {java11-javadoc}/java.base/java/util/IntSummaryStatistics.html#getAverage()[getAverage]()
* long {java11-javadoc}/java.base/java/util/IntSummaryStatistics.html#getCount()[getCount]()
* int {java11-javadoc}/java.base/java/util/IntSummaryStatistics.html#getMax()[getMax]()
* int {java11-javadoc}/java.base/java/util/IntSummaryStatistics.html#getMin()[getMin]()
* long {java11-javadoc}/java.base/java/util/IntSummaryStatistics.html#getSum()[getSum]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Iterator]]
==== Iterator
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* void {java11-javadoc}/java.base/java/util/Iterator.html#forEachRemaining(java.util.function.Consumer)[forEachRemaining](Consumer)
* boolean {java11-javadoc}/java.base/java/util/Iterator.html#hasNext()[hasNext]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* def {java11-javadoc}/java.base/java/util/Iterator.html#next()[next]()
* void {java11-javadoc}/java.base/java/util/Iterator.html#remove()[remove]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-LinkedHashMap]]
==== LinkedHashMap
* {java11-javadoc}/java.base/java/util/LinkedHashMap.html#<init>()[LinkedHashMap]()
* {java11-javadoc}/java.base/java/util/LinkedHashMap.html#<init>(java.util.Map)[LinkedHashMap](Map)
* void {java11-javadoc}/java.base/java/util/Map.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/HashMap.html#clone()[clone]()
* List collect(BiFunction)
* def collect(Collection, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)[compute](def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)[computeIfAbsent](def, Function)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)[computeIfPresent](def, BiFunction)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsKey(java.lang.Object)[containsKey](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsValue(java.lang.Object)[containsValue](def)
* int count(BiPredicate)
* def each(BiConsumer)
* Set {java11-javadoc}/java.base/java/util/Map.html#entrySet()[entrySet]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#equals(java.lang.Object)[equals](Object)
* boolean every(BiPredicate)
* Map.Entry find(BiPredicate)
* Map findAll(BiPredicate)
* def findResult(BiFunction)
* def findResult(def, BiFunction)
* List findResults(BiFunction)
* void {java11-javadoc}/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)[forEach](BiConsumer)
* def {java11-javadoc}/java.base/java/util/Map.html#get(java.lang.Object)[get](def)
* def {java11-javadoc}/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)[getOrDefault](def, def)
* Map groupBy(BiFunction)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#isEmpty()[isEmpty]()
* Set {java11-javadoc}/java.base/java/util/Map.html#keySet()[keySet]()
* def {java11-javadoc}/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)[merge](def, def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)[put](def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#putAll(java.util.Map)[putAll](Map)
* def {java11-javadoc}/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)[putIfAbsent](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)[remove](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)[replace](def, def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)[replace](def, def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)[replaceAll](BiFunction)
* int {java11-javadoc}/java.base/java/util/Map.html#size()[size]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* Collection {java11-javadoc}/java.base/java/util/Map.html#values()[values]()


[[painless-api-reference-watcher-condition-java-util-LinkedHashSet]]
==== LinkedHashSet
* {java11-javadoc}/java.base/java/util/LinkedHashSet.html#<init>()[LinkedHashSet]()
* {java11-javadoc}/java.base/java/util/LinkedHashSet.html#<init>(java.util.Collection)[LinkedHashSet](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/HashSet.html#clone()[clone]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/Set.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/Set.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* boolean {java11-javadoc}/java.base/java/util/Set.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-LinkedList]]
==== LinkedList
* {java11-javadoc}/java.base/java/util/LinkedList.html#<init>()[LinkedList]()
* {java11-javadoc}/java.base/java/util/LinkedList.html#<init>(java.util.Collection)[LinkedList](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* void {java11-javadoc}/java.base/java/util/List.html#add(int,java.lang.Object)[add](int, def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/List.html#addAll(int,java.util.Collection)[addAll](int, Collection)
* void {java11-javadoc}/java.base/java/util/Deque.html#addFirst(java.lang.Object)[addFirst](def)
* void {java11-javadoc}/java.base/java/util/Deque.html#addLast(java.lang.Object)[addLast](def)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/LinkedList.html#clone()[clone]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* Iterator {java11-javadoc}/java.base/java/util/Deque.html#descendingIterator()[descendingIterator]()
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* def {java11-javadoc}/java.base/java/util/Queue.html#element()[element]()
* boolean {java11-javadoc}/java.base/java/util/List.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/List.html#get(int)[get](int)
* def {java11-javadoc}/java.base/java/util/Deque.html#getFirst()[getFirst]()
* def {java11-javadoc}/java.base/java/util/Deque.html#getLast()[getLast]()
* int getLength()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/List.html#hashCode()[hashCode]()
* int {java11-javadoc}/java.base/java/util/List.html#indexOf(java.lang.Object)[indexOf](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* int {java11-javadoc}/java.base/java/util/List.html#lastIndexOf(java.lang.Object)[lastIndexOf](def)
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator()[listIterator]()
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator(int)[listIterator](int)
* boolean {java11-javadoc}/java.base/java/util/Queue.html#offer(java.lang.Object)[offer](def)
* boolean {java11-javadoc}/java.base/java/util/Deque.html#offerFirst(java.lang.Object)[offerFirst](def)
* boolean {java11-javadoc}/java.base/java/util/Deque.html#offerLast(java.lang.Object)[offerLast](def)
* def {java11-javadoc}/java.base/java/util/Queue.html#peek()[peek]()
* def {java11-javadoc}/java.base/java/util/Deque.html#peekFirst()[peekFirst]()
* def {java11-javadoc}/java.base/java/util/Deque.html#peekLast()[peekLast]()
* def {java11-javadoc}/java.base/java/util/Queue.html#poll()[poll]()
* def {java11-javadoc}/java.base/java/util/Deque.html#pollFirst()[pollFirst]()
* def {java11-javadoc}/java.base/java/util/Deque.html#pollLast()[pollLast]()
* def {java11-javadoc}/java.base/java/util/Deque.html#pop()[pop]()
* void {java11-javadoc}/java.base/java/util/Deque.html#push(java.lang.Object)[push](def)
* def {java11-javadoc}/java.base/java/util/Queue.html#remove()[remove]()
* def {java11-javadoc}/java.base/java/util/List.html#remove(int)[remove](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* def {java11-javadoc}/java.base/java/util/Deque.html#removeFirst()[removeFirst]()
* boolean {java11-javadoc}/java.base/java/util/Deque.html#removeFirstOccurrence(java.lang.Object)[removeFirstOccurrence](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* def {java11-javadoc}/java.base/java/util/Deque.html#removeLast()[removeLast]()
* boolean {java11-javadoc}/java.base/java/util/Deque.html#removeLastOccurrence(java.lang.Object)[removeLastOccurrence](def)
* void {java11-javadoc}/java.base/java/util/List.html#replaceAll(java.util.function.UnaryOperator)[replaceAll](UnaryOperator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* def {java11-javadoc}/java.base/java/util/List.html#set(int,java.lang.Object)[set](int, def)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* void {java11-javadoc}/java.base/java/util/List.html#sort(java.util.Comparator)[sort](Comparator)
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* List {java11-javadoc}/java.base/java/util/List.html#subList(int,int)[subList](int, int)
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-List]]
==== List
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* void {java11-javadoc}/java.base/java/util/List.html#add(int,java.lang.Object)[add](int, def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/List.html#addAll(int,java.util.Collection)[addAll](int, Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/List.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/List.html#get(int)[get](int)
* int getLength()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/List.html#hashCode()[hashCode]()
* int {java11-javadoc}/java.base/java/util/List.html#indexOf(java.lang.Object)[indexOf](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* int {java11-javadoc}/java.base/java/util/List.html#lastIndexOf(java.lang.Object)[lastIndexOf](def)
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator()[listIterator]()
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator(int)[listIterator](int)
* def {java11-javadoc}/java.base/java/util/List.html#remove(int)[remove](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* void {java11-javadoc}/java.base/java/util/List.html#replaceAll(java.util.function.UnaryOperator)[replaceAll](UnaryOperator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* def {java11-javadoc}/java.base/java/util/List.html#set(int,java.lang.Object)[set](int, def)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* void {java11-javadoc}/java.base/java/util/List.html#sort(java.util.Comparator)[sort](Comparator)
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* List {java11-javadoc}/java.base/java/util/List.html#subList(int,int)[subList](int, int)
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-ListIterator]]
==== ListIterator
* void {java11-javadoc}/java.base/java/util/ListIterator.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* void {java11-javadoc}/java.base/java/util/Iterator.html#forEachRemaining(java.util.function.Consumer)[forEachRemaining](Consumer)
* boolean {java11-javadoc}/java.base/java/util/Iterator.html#hasNext()[hasNext]()
* boolean {java11-javadoc}/java.base/java/util/ListIterator.html#hasPrevious()[hasPrevious]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* def {java11-javadoc}/java.base/java/util/Iterator.html#next()[next]()
* int {java11-javadoc}/java.base/java/util/ListIterator.html#nextIndex()[nextIndex]()
* int {java11-javadoc}/java.base/java/util/ListIterator.html#previousIndex()[previousIndex]()
* void {java11-javadoc}/java.base/java/util/Iterator.html#remove()[remove]()
* void {java11-javadoc}/java.base/java/util/ListIterator.html#set(java.lang.Object)[set](def)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Locale]]
==== Locale
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#CANADA[CANADA]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#CANADA_FRENCH[CANADA_FRENCH]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#CHINA[CHINA]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#CHINESE[CHINESE]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#ENGLISH[ENGLISH]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#FRANCE[FRANCE]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#FRENCH[FRENCH]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#GERMAN[GERMAN]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#GERMANY[GERMANY]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#ITALIAN[ITALIAN]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#ITALY[ITALY]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#JAPAN[JAPAN]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#JAPANESE[JAPANESE]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#KOREA[KOREA]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#KOREAN[KOREAN]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#PRC[PRC]
* static char {java11-javadoc}/java.base/java/util/Locale.html#PRIVATE_USE_EXTENSION[PRIVATE_USE_EXTENSION]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#ROOT[ROOT]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#SIMPLIFIED_CHINESE[SIMPLIFIED_CHINESE]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#TAIWAN[TAIWAN]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#TRADITIONAL_CHINESE[TRADITIONAL_CHINESE]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#UK[UK]
* static char {java11-javadoc}/java.base/java/util/Locale.html#UNICODE_LOCALE_EXTENSION[UNICODE_LOCALE_EXTENSION]
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#US[US]
* static List {java11-javadoc}/java.base/java/util/Locale.html#filter(java.util.List,java.util.Collection)[filter](List, Collection)
* static List {java11-javadoc}/java.base/java/util/Locale.html#filterTags(java.util.List,java.util.Collection)[filterTags](List, Collection)
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#forLanguageTag(java.lang.String)[forLanguageTag](String)
* static Locale[] {java11-javadoc}/java.base/java/util/Locale.html#getAvailableLocales()[getAvailableLocales]()
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#getDefault()[getDefault]()
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#getDefault(java.util.Locale$Category)[getDefault](Locale.Category)
* static String[] {java11-javadoc}/java.base/java/util/Locale.html#getISOCountries()[getISOCountries]()
* static String[] {java11-javadoc}/java.base/java/util/Locale.html#getISOLanguages()[getISOLanguages]()
* static Locale {java11-javadoc}/java.base/java/util/Locale.html#lookup(java.util.List,java.util.Collection)[lookup](List, Collection)
* static String {java11-javadoc}/java.base/java/util/Locale.html#lookupTag(java.util.List,java.util.Collection)[lookupTag](List, Collection)
* {java11-javadoc}/java.base/java/util/Locale.html#<init>(java.lang.String)[Locale](String)
* {java11-javadoc}/java.base/java/util/Locale.html#<init>(java.lang.String,java.lang.String)[Locale](String, String)
* {java11-javadoc}/java.base/java/util/Locale.html#<init>(java.lang.String,java.lang.String,java.lang.String)[Locale](String, String, String)
* def {java11-javadoc}/java.base/java/util/Locale.html#clone()[clone]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/util/Locale.html#getCountry()[getCountry]()
* String {java11-javadoc}/java.base/java/util/Locale.html#getDisplayCountry()[getDisplayCountry]()
* String {java11-javadoc}/java.base/java/util/Locale.html#getDisplayCountry(java.util.Locale)[getDisplayCountry](Locale)
* String {java11-javadoc}/java.base/java/util/Locale.html#getDisplayLanguage()[getDisplayLanguage]()
* String {java11-javadoc}/java.base/java/util/Locale.html#getDisplayLanguage(java.util.Locale)[getDisplayLanguage](Locale)
* String {java11-javadoc}/java.base/java/util/Locale.html#getDisplayName()[getDisplayName]()
* String {java11-javadoc}/java.base/java/util/Locale.html#getDisplayName(java.util.Locale)[getDisplayName](Locale)
* String {java11-javadoc}/java.base/java/util/Locale.html#getDisplayScript()[getDisplayScript]()
* String {java11-javadoc}/java.base/java/util/Locale.html#getDisplayScript(java.util.Locale)[getDisplayScript](Locale)
* String {java11-javadoc}/java.base/java/util/Locale.html#getDisplayVariant()[getDisplayVariant]()
* String {java11-javadoc}/java.base/java/util/Locale.html#getDisplayVariant(java.util.Locale)[getDisplayVariant](Locale)
* String {java11-javadoc}/java.base/java/util/Locale.html#getExtension(char)[getExtension](char)
* Set {java11-javadoc}/java.base/java/util/Locale.html#getExtensionKeys()[getExtensionKeys]()
* String {java11-javadoc}/java.base/java/util/Locale.html#getISO3Country()[getISO3Country]()
* String {java11-javadoc}/java.base/java/util/Locale.html#getISO3Language()[getISO3Language]()
* String {java11-javadoc}/java.base/java/util/Locale.html#getLanguage()[getLanguage]()
* String {java11-javadoc}/java.base/java/util/Locale.html#getScript()[getScript]()
* Set {java11-javadoc}/java.base/java/util/Locale.html#getUnicodeLocaleAttributes()[getUnicodeLocaleAttributes]()
* Set {java11-javadoc}/java.base/java/util/Locale.html#getUnicodeLocaleKeys()[getUnicodeLocaleKeys]()
* String {java11-javadoc}/java.base/java/util/Locale.html#getUnicodeLocaleType(java.lang.String)[getUnicodeLocaleType](String)
* String {java11-javadoc}/java.base/java/util/Locale.html#getVariant()[getVariant]()
* boolean {java11-javadoc}/java.base/java/util/Locale.html#hasExtensions()[hasExtensions]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* Locale {java11-javadoc}/java.base/java/util/Locale.html#stripExtensions()[stripExtensions]()
* String {java11-javadoc}/java.base/java/util/Locale.html#toLanguageTag()[toLanguageTag]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Locale.Builder]]
==== Locale.Builder
* {java11-javadoc}/java.base/java/util/Locale$Builder.html#<init>()[Locale.Builder]()
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#addUnicodeLocaleAttribute(java.lang.String)[addUnicodeLocaleAttribute](String)
* Locale {java11-javadoc}/java.base/java/util/Locale$Builder.html#build()[build]()
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#clear()[clear]()
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#clearExtensions()[clearExtensions]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#removeUnicodeLocaleAttribute(java.lang.String)[removeUnicodeLocaleAttribute](String)
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#setExtension(char,java.lang.String)[setExtension](char, String)
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#setLanguage(java.lang.String)[setLanguage](String)
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#setLanguageTag(java.lang.String)[setLanguageTag](String)
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#setLocale(java.util.Locale)[setLocale](Locale)
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#setRegion(java.lang.String)[setRegion](String)
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#setScript(java.lang.String)[setScript](String)
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#setUnicodeLocaleKeyword(java.lang.String,java.lang.String)[setUnicodeLocaleKeyword](String, String)
* Locale.Builder {java11-javadoc}/java.base/java/util/Locale$Builder.html#setVariant(java.lang.String)[setVariant](String)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Locale.Category]]
==== Locale.Category
* static Locale.Category {java11-javadoc}/java.base/java/util/Locale$Category.html#DISPLAY[DISPLAY]
* static Locale.Category {java11-javadoc}/java.base/java/util/Locale$Category.html#FORMAT[FORMAT]
* static Locale.Category {java11-javadoc}/java.base/java/util/Locale$Category.html#valueOf(java.lang.String)[valueOf](String)
* static Locale.Category[] {java11-javadoc}/java.base/java/util/Locale$Category.html#values()[values]()
* int {java11-javadoc}/java.base/java/lang/Enum.html#compareTo(java.lang.Enum)[compareTo](Enum)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Enum.html#name()[name]()
* int {java11-javadoc}/java.base/java/lang/Enum.html#ordinal()[ordinal]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Locale.FilteringMode]]
==== Locale.FilteringMode
* static Locale.FilteringMode {java11-javadoc}/java.base/java/util/Locale$FilteringMode.html#AUTOSELECT_FILTERING[AUTOSELECT_FILTERING]
* static Locale.FilteringMode {java11-javadoc}/java.base/java/util/Locale$FilteringMode.html#EXTENDED_FILTERING[EXTENDED_FILTERING]
* static Locale.FilteringMode {java11-javadoc}/java.base/java/util/Locale$FilteringMode.html#IGNORE_EXTENDED_RANGES[IGNORE_EXTENDED_RANGES]
* static Locale.FilteringMode {java11-javadoc}/java.base/java/util/Locale$FilteringMode.html#MAP_EXTENDED_RANGES[MAP_EXTENDED_RANGES]
* static Locale.FilteringMode {java11-javadoc}/java.base/java/util/Locale$FilteringMode.html#REJECT_EXTENDED_RANGES[REJECT_EXTENDED_RANGES]
* static Locale.FilteringMode {java11-javadoc}/java.base/java/util/Locale$FilteringMode.html#valueOf(java.lang.String)[valueOf](String)
* static Locale.FilteringMode[] {java11-javadoc}/java.base/java/util/Locale$FilteringMode.html#values()[values]()
* int {java11-javadoc}/java.base/java/lang/Enum.html#compareTo(java.lang.Enum)[compareTo](Enum)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Enum.html#name()[name]()
* int {java11-javadoc}/java.base/java/lang/Enum.html#ordinal()[ordinal]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Locale.LanguageRange]]
==== Locale.LanguageRange
* static double {java11-javadoc}/java.base/java/util/Locale$LanguageRange.html#MAX_WEIGHT[MAX_WEIGHT]
* static double {java11-javadoc}/java.base/java/util/Locale$LanguageRange.html#MIN_WEIGHT[MIN_WEIGHT]
* static List {java11-javadoc}/java.base/java/util/Locale$LanguageRange.html#mapEquivalents(java.util.List,java.util.Map)[mapEquivalents](List, Map)
* static List {java11-javadoc}/java.base/java/util/Locale$LanguageRange.html#parse(java.lang.String)[parse](String)
* static List {java11-javadoc}/java.base/java/util/Locale$LanguageRange.html#parse(java.lang.String,java.util.Map)[parse](String, Map)
* {java11-javadoc}/java.base/java/util/Locale$LanguageRange.html#<init>(java.lang.String)[Locale.LanguageRange](String)
* {java11-javadoc}/java.base/java/util/Locale$LanguageRange.html#<init>(java.lang.String,double)[Locale.LanguageRange](String, double)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/util/Locale$LanguageRange.html#getRange()[getRange]()
* double {java11-javadoc}/java.base/java/util/Locale$LanguageRange.html#getWeight()[getWeight]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-LongSummaryStatistics]]
==== LongSummaryStatistics
* {java11-javadoc}/java.base/java/util/LongSummaryStatistics.html#<init>()[LongSummaryStatistics]()
* void {java11-javadoc}/java.base/java/util/function/LongConsumer.html#accept(long)[accept](long)
* LongConsumer {java11-javadoc}/java.base/java/util/function/LongConsumer.html#andThen(java.util.function.LongConsumer)[andThen](LongConsumer)
* void {java11-javadoc}/java.base/java/util/LongSummaryStatistics.html#combine(java.util.LongSummaryStatistics)[combine](LongSummaryStatistics)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* double {java11-javadoc}/java.base/java/util/LongSummaryStatistics.html#getAverage()[getAverage]()
* long {java11-javadoc}/java.base/java/util/LongSummaryStatistics.html#getCount()[getCount]()
* long {java11-javadoc}/java.base/java/util/LongSummaryStatistics.html#getMax()[getMax]()
* long {java11-javadoc}/java.base/java/util/LongSummaryStatistics.html#getMin()[getMin]()
* long {java11-javadoc}/java.base/java/util/LongSummaryStatistics.html#getSum()[getSum]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Map]]
==== Map
* void {java11-javadoc}/java.base/java/util/Map.html#clear()[clear]()
* List collect(BiFunction)
* def collect(Collection, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)[compute](def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)[computeIfAbsent](def, Function)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)[computeIfPresent](def, BiFunction)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsKey(java.lang.Object)[containsKey](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsValue(java.lang.Object)[containsValue](def)
* int count(BiPredicate)
* def each(BiConsumer)
* Set {java11-javadoc}/java.base/java/util/Map.html#entrySet()[entrySet]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#equals(java.lang.Object)[equals](Object)
* boolean every(BiPredicate)
* Map.Entry find(BiPredicate)
* Map findAll(BiPredicate)
* def findResult(BiFunction)
* def findResult(def, BiFunction)
* List findResults(BiFunction)
* void {java11-javadoc}/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)[forEach](BiConsumer)
* def {java11-javadoc}/java.base/java/util/Map.html#get(java.lang.Object)[get](def)
* def {java11-javadoc}/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)[getOrDefault](def, def)
* Map groupBy(BiFunction)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#isEmpty()[isEmpty]()
* Set {java11-javadoc}/java.base/java/util/Map.html#keySet()[keySet]()
* def {java11-javadoc}/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)[merge](def, def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)[put](def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#putAll(java.util.Map)[putAll](Map)
* def {java11-javadoc}/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)[putIfAbsent](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)[remove](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)[replace](def, def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)[replace](def, def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)[replaceAll](BiFunction)
* int {java11-javadoc}/java.base/java/util/Map.html#size()[size]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* Collection {java11-javadoc}/java.base/java/util/Map.html#values()[values]()


[[painless-api-reference-watcher-condition-java-util-Map.Entry]]
==== Map.Entry
* static Comparator {java11-javadoc}/java.base/java/util/Map$Entry.html#comparingByKey()[comparingByKey]()
* static Comparator {java11-javadoc}/java.base/java/util/Map$Entry.html#comparingByKey(java.util.Comparator)[comparingByKey](Comparator)
* static Comparator {java11-javadoc}/java.base/java/util/Map$Entry.html#comparingByValue()[comparingByValue]()
* static Comparator {java11-javadoc}/java.base/java/util/Map$Entry.html#comparingByValue(java.util.Comparator)[comparingByValue](Comparator)
* boolean {java11-javadoc}/java.base/java/util/Map$Entry.html#equals(java.lang.Object)[equals](Object)
* def {java11-javadoc}/java.base/java/util/Map$Entry.html#getKey()[getKey]()
* def {java11-javadoc}/java.base/java/util/Map$Entry.html#getValue()[getValue]()
* int {java11-javadoc}/java.base/java/util/Map$Entry.html#hashCode()[hashCode]()
* def {java11-javadoc}/java.base/java/util/Map$Entry.html#setValue(java.lang.Object)[setValue](def)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-MissingFormatArgumentException]]
==== MissingFormatArgumentException
* {java11-javadoc}/java.base/java/util/MissingFormatArgumentException.html#<init>(java.lang.String)[MissingFormatArgumentException](String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/util/MissingFormatArgumentException.html#getFormatSpecifier()[getFormatSpecifier]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-MissingFormatWidthException]]
==== MissingFormatWidthException
* {java11-javadoc}/java.base/java/util/MissingFormatWidthException.html#<init>(java.lang.String)[MissingFormatWidthException](String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/util/MissingFormatWidthException.html#getFormatSpecifier()[getFormatSpecifier]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-MissingResourceException]]
==== MissingResourceException
* {java11-javadoc}/java.base/java/util/MissingResourceException.html#<init>(java.lang.String,java.lang.String,java.lang.String)[MissingResourceException](String, String, String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/util/MissingResourceException.html#getClassName()[getClassName]()
* String {java11-javadoc}/java.base/java/util/MissingResourceException.html#getKey()[getKey]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-NavigableMap]]
==== NavigableMap
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#ceilingEntry(java.lang.Object)[ceilingEntry](def)
* def {java11-javadoc}/java.base/java/util/NavigableMap.html#ceilingKey(java.lang.Object)[ceilingKey](def)
* void {java11-javadoc}/java.base/java/util/Map.html#clear()[clear]()
* List collect(BiFunction)
* def collect(Collection, BiFunction)
* Comparator {java11-javadoc}/java.base/java/util/SortedMap.html#comparator()[comparator]()
* def {java11-javadoc}/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)[compute](def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)[computeIfAbsent](def, Function)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)[computeIfPresent](def, BiFunction)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsKey(java.lang.Object)[containsKey](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsValue(java.lang.Object)[containsValue](def)
* int count(BiPredicate)
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableMap.html#descendingKeySet()[descendingKeySet]()
* NavigableMap {java11-javadoc}/java.base/java/util/NavigableMap.html#descendingMap()[descendingMap]()
* def each(BiConsumer)
* Set {java11-javadoc}/java.base/java/util/Map.html#entrySet()[entrySet]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#equals(java.lang.Object)[equals](Object)
* boolean every(BiPredicate)
* Map.Entry find(BiPredicate)
* Map findAll(BiPredicate)
* def findResult(BiFunction)
* def findResult(def, BiFunction)
* List findResults(BiFunction)
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#firstEntry()[firstEntry]()
* def {java11-javadoc}/java.base/java/util/SortedMap.html#firstKey()[firstKey]()
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#floorEntry(java.lang.Object)[floorEntry](def)
* def {java11-javadoc}/java.base/java/util/NavigableMap.html#floorKey(java.lang.Object)[floorKey](def)
* void {java11-javadoc}/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)[forEach](BiConsumer)
* def {java11-javadoc}/java.base/java/util/Map.html#get(java.lang.Object)[get](def)
* def {java11-javadoc}/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)[getOrDefault](def, def)
* Map groupBy(BiFunction)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* SortedMap {java11-javadoc}/java.base/java/util/SortedMap.html#headMap(java.lang.Object)[headMap](def)
* NavigableMap {java11-javadoc}/java.base/java/util/NavigableMap.html#headMap(java.lang.Object,boolean)[headMap](def, boolean)
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#higherEntry(java.lang.Object)[higherEntry](def)
* def {java11-javadoc}/java.base/java/util/NavigableMap.html#higherKey(java.lang.Object)[higherKey](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#isEmpty()[isEmpty]()
* Set {java11-javadoc}/java.base/java/util/Map.html#keySet()[keySet]()
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#lastEntry()[lastEntry]()
* def {java11-javadoc}/java.base/java/util/SortedMap.html#lastKey()[lastKey]()
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#lowerEntry(java.lang.Object)[lowerEntry](def)
* def {java11-javadoc}/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)[merge](def, def, BiFunction)
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableMap.html#navigableKeySet()[navigableKeySet]()
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#pollFirstEntry()[pollFirstEntry]()
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#pollLastEntry()[pollLastEntry]()
* def {java11-javadoc}/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)[put](def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#putAll(java.util.Map)[putAll](Map)
* def {java11-javadoc}/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)[putIfAbsent](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)[remove](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)[replace](def, def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)[replace](def, def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)[replaceAll](BiFunction)
* int {java11-javadoc}/java.base/java/util/Map.html#size()[size]()
* SortedMap {java11-javadoc}/java.base/java/util/SortedMap.html#subMap(java.lang.Object,java.lang.Object)[subMap](def, def)
* NavigableMap {java11-javadoc}/java.base/java/util/NavigableMap.html#subMap(java.lang.Object,boolean,java.lang.Object,boolean)[subMap](def, boolean, def, boolean)
* SortedMap {java11-javadoc}/java.base/java/util/SortedMap.html#tailMap(java.lang.Object)[tailMap](def)
* NavigableMap {java11-javadoc}/java.base/java/util/NavigableMap.html#tailMap(java.lang.Object,boolean)[tailMap](def, boolean)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* Collection {java11-javadoc}/java.base/java/util/Map.html#values()[values]()


[[painless-api-reference-watcher-condition-java-util-NavigableSet]]
==== NavigableSet
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#ceiling(java.lang.Object)[ceiling](def)
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* Comparator {java11-javadoc}/java.base/java/util/SortedSet.html#comparator()[comparator]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* Iterator {java11-javadoc}/java.base/java/util/NavigableSet.html#descendingIterator()[descendingIterator]()
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableSet.html#descendingSet()[descendingSet]()
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/Set.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* def {java11-javadoc}/java.base/java/util/SortedSet.html#first()[first]()
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#floor(java.lang.Object)[floor](def)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/Set.html#hashCode()[hashCode]()
* SortedSet {java11-javadoc}/java.base/java/util/SortedSet.html#headSet(java.lang.Object)[headSet](def)
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableSet.html#headSet(java.lang.Object,boolean)[headSet](def, boolean)
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#higher(java.lang.Object)[higher](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* def {java11-javadoc}/java.base/java/util/SortedSet.html#last()[last]()
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#lower(java.lang.Object)[lower](def)
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#pollFirst()[pollFirst]()
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#pollLast()[pollLast]()
* boolean {java11-javadoc}/java.base/java/util/Set.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* SortedSet {java11-javadoc}/java.base/java/util/SortedSet.html#subSet(java.lang.Object,java.lang.Object)[subSet](def, def)
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableSet.html#subSet(java.lang.Object,boolean,java.lang.Object,boolean)[subSet](def, boolean, def, boolean)
* double sum()
* double sum(ToDoubleFunction)
* SortedSet {java11-javadoc}/java.base/java/util/SortedSet.html#tailSet(java.lang.Object)[tailSet](def)
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableSet.html#tailSet(java.lang.Object,boolean)[tailSet](def, boolean)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-NoSuchElementException]]
==== NoSuchElementException
* {java11-javadoc}/java.base/java/util/NoSuchElementException.html#<init>()[NoSuchElementException]()
* {java11-javadoc}/java.base/java/util/NoSuchElementException.html#<init>(java.lang.String)[NoSuchElementException](String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Objects]]
==== Objects
* static int {java11-javadoc}/java.base/java/util/Objects.html#compare(java.lang.Object,java.lang.Object,java.util.Comparator)[compare](def, def, Comparator)
* static boolean {java11-javadoc}/java.base/java/util/Objects.html#deepEquals(java.lang.Object,java.lang.Object)[deepEquals](Object, Object)
* static boolean {java11-javadoc}/java.base/java/util/Objects.html#equals(java.lang.Object,java.lang.Object)[equals](Object, Object)
* static int {java11-javadoc}/java.base/java/util/Objects.html#hash(java.lang.Object%5B%5D)[hash](Object[])
* static int {java11-javadoc}/java.base/java/util/Objects.html#hashCode(java.lang.Object)[hashCode](Object)
* static boolean {java11-javadoc}/java.base/java/util/Objects.html#isNull(java.lang.Object)[isNull](Object)
* static boolean {java11-javadoc}/java.base/java/util/Objects.html#nonNull(java.lang.Object)[nonNull](Object)
* static def {java11-javadoc}/java.base/java/util/Objects.html#requireNonNull(java.lang.Object)[requireNonNull](def)
* static def {java11-javadoc}/java.base/java/util/Objects.html#requireNonNull(java.lang.Object,java.lang.String)[requireNonNull](def, String)
* static String {java11-javadoc}/java.base/java/util/Objects.html#toString(java.lang.Object)[toString](Object)
* static String {java11-javadoc}/java.base/java/util/Objects.html#toString(java.lang.Object,java.lang.String)[toString](Object, String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Observable]]
==== Observable
* {java11-javadoc}/java.base/java/util/Observable.html#<init>()[Observable]()
* void {java11-javadoc}/java.base/java/util/Observable.html#addObserver(java.util.Observer)[addObserver](Observer)
* int {java11-javadoc}/java.base/java/util/Observable.html#countObservers()[countObservers]()
* void {java11-javadoc}/java.base/java/util/Observable.html#deleteObserver(java.util.Observer)[deleteObserver](Observer)
* void {java11-javadoc}/java.base/java/util/Observable.html#deleteObservers()[deleteObservers]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* boolean {java11-javadoc}/java.base/java/util/Observable.html#hasChanged()[hasChanged]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* void {java11-javadoc}/java.base/java/util/Observable.html#notifyObservers()[notifyObservers]()
* void {java11-javadoc}/java.base/java/util/Observable.html#notifyObservers(java.lang.Object)[notifyObservers](Object)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Observer]]
==== Observer
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* void {java11-javadoc}/java.base/java/util/Observer.html#update(java.util.Observable,java.lang.Object)[update](Observable, Object)


[[painless-api-reference-watcher-condition-java-util-Optional]]
==== Optional
* static Optional {java11-javadoc}/java.base/java/util/Optional.html#empty()[empty]()
* static Optional {java11-javadoc}/java.base/java/util/Optional.html#of(java.lang.Object)[of](def)
* static Optional {java11-javadoc}/java.base/java/util/Optional.html#ofNullable(java.lang.Object)[ofNullable](def)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* Optional {java11-javadoc}/java.base/java/util/Optional.html#filter(java.util.function.Predicate)[filter](Predicate)
* Optional {java11-javadoc}/java.base/java/util/Optional.html#flatMap(java.util.function.Function)[flatMap](Function)
* def {java11-javadoc}/java.base/java/util/Optional.html#get()[get]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* void {java11-javadoc}/java.base/java/util/Optional.html#ifPresent(java.util.function.Consumer)[ifPresent](Consumer)
* boolean {java11-javadoc}/java.base/java/util/Optional.html#isPresent()[isPresent]()
* Optional {java11-javadoc}/java.base/java/util/Optional.html#map(java.util.function.Function)[map](Function)
* def {java11-javadoc}/java.base/java/util/Optional.html#orElse(java.lang.Object)[orElse](def)
* def {java11-javadoc}/java.base/java/util/Optional.html#orElseGet(java.util.function.Supplier)[orElseGet](Supplier)
* def {java11-javadoc}/java.base/java/util/Optional.html#orElseThrow(java.util.function.Supplier)[orElseThrow](Supplier)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-OptionalDouble]]
==== OptionalDouble
* static OptionalDouble {java11-javadoc}/java.base/java/util/OptionalDouble.html#empty()[empty]()
* static OptionalDouble {java11-javadoc}/java.base/java/util/OptionalDouble.html#of(double)[of](double)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* double {java11-javadoc}/java.base/java/util/OptionalDouble.html#getAsDouble()[getAsDouble]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* void {java11-javadoc}/java.base/java/util/OptionalDouble.html#ifPresent(java.util.function.DoubleConsumer)[ifPresent](DoubleConsumer)
* boolean {java11-javadoc}/java.base/java/util/OptionalDouble.html#isPresent()[isPresent]()
* double {java11-javadoc}/java.base/java/util/OptionalDouble.html#orElse(double)[orElse](double)
* double {java11-javadoc}/java.base/java/util/OptionalDouble.html#orElseGet(java.util.function.DoubleSupplier)[orElseGet](DoubleSupplier)
* double {java11-javadoc}/java.base/java/util/OptionalDouble.html#orElseThrow(java.util.function.Supplier)[orElseThrow](Supplier)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-OptionalInt]]
==== OptionalInt
* static OptionalInt {java11-javadoc}/java.base/java/util/OptionalInt.html#empty()[empty]()
* static OptionalInt {java11-javadoc}/java.base/java/util/OptionalInt.html#of(int)[of](int)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/util/OptionalInt.html#getAsInt()[getAsInt]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* void {java11-javadoc}/java.base/java/util/OptionalInt.html#ifPresent(java.util.function.IntConsumer)[ifPresent](IntConsumer)
* boolean {java11-javadoc}/java.base/java/util/OptionalInt.html#isPresent()[isPresent]()
* int {java11-javadoc}/java.base/java/util/OptionalInt.html#orElse(int)[orElse](int)
* int {java11-javadoc}/java.base/java/util/OptionalInt.html#orElseGet(java.util.function.IntSupplier)[orElseGet](IntSupplier)
* int {java11-javadoc}/java.base/java/util/OptionalInt.html#orElseThrow(java.util.function.Supplier)[orElseThrow](Supplier)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-OptionalLong]]
==== OptionalLong
* static OptionalLong {java11-javadoc}/java.base/java/util/OptionalLong.html#empty()[empty]()
* static OptionalLong {java11-javadoc}/java.base/java/util/OptionalLong.html#of(long)[of](long)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* long {java11-javadoc}/java.base/java/util/OptionalLong.html#getAsLong()[getAsLong]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* void {java11-javadoc}/java.base/java/util/OptionalLong.html#ifPresent(java.util.function.LongConsumer)[ifPresent](LongConsumer)
* boolean {java11-javadoc}/java.base/java/util/OptionalLong.html#isPresent()[isPresent]()
* long {java11-javadoc}/java.base/java/util/OptionalLong.html#orElse(long)[orElse](long)
* long {java11-javadoc}/java.base/java/util/OptionalLong.html#orElseGet(java.util.function.LongSupplier)[orElseGet](LongSupplier)
* long {java11-javadoc}/java.base/java/util/OptionalLong.html#orElseThrow(java.util.function.Supplier)[orElseThrow](Supplier)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-PrimitiveIterator]]
==== PrimitiveIterator
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* void {java11-javadoc}/java.base/java/util/PrimitiveIterator.html#forEachRemaining(java.lang.Object)[forEachRemaining](def)
* boolean {java11-javadoc}/java.base/java/util/Iterator.html#hasNext()[hasNext]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* def {java11-javadoc}/java.base/java/util/Iterator.html#next()[next]()
* void {java11-javadoc}/java.base/java/util/Iterator.html#remove()[remove]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-PrimitiveIterator.OfDouble]]
==== PrimitiveIterator.OfDouble
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* void {java11-javadoc}/java.base/java/util/PrimitiveIterator.html#forEachRemaining(java.lang.Object)[forEachRemaining](def)
* boolean {java11-javadoc}/java.base/java/util/Iterator.html#hasNext()[hasNext]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* Double {java11-javadoc}/java.base/java/util/PrimitiveIterator$OfDouble.html#next()[next]()
* double {java11-javadoc}/java.base/java/util/PrimitiveIterator$OfDouble.html#nextDouble()[nextDouble]()
* void {java11-javadoc}/java.base/java/util/Iterator.html#remove()[remove]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-PrimitiveIterator.OfInt]]
==== PrimitiveIterator.OfInt
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* void {java11-javadoc}/java.base/java/util/PrimitiveIterator.html#forEachRemaining(java.lang.Object)[forEachRemaining](def)
* boolean {java11-javadoc}/java.base/java/util/Iterator.html#hasNext()[hasNext]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* Integer {java11-javadoc}/java.base/java/util/PrimitiveIterator$OfInt.html#next()[next]()
* int {java11-javadoc}/java.base/java/util/PrimitiveIterator$OfInt.html#nextInt()[nextInt]()
* void {java11-javadoc}/java.base/java/util/Iterator.html#remove()[remove]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-PrimitiveIterator.OfLong]]
==== PrimitiveIterator.OfLong
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* void {java11-javadoc}/java.base/java/util/PrimitiveIterator.html#forEachRemaining(java.lang.Object)[forEachRemaining](def)
* boolean {java11-javadoc}/java.base/java/util/Iterator.html#hasNext()[hasNext]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* Long {java11-javadoc}/java.base/java/util/PrimitiveIterator$OfLong.html#next()[next]()
* long {java11-javadoc}/java.base/java/util/PrimitiveIterator$OfLong.html#nextLong()[nextLong]()
* void {java11-javadoc}/java.base/java/util/Iterator.html#remove()[remove]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-PriorityQueue]]
==== PriorityQueue
* {java11-javadoc}/java.base/java/util/PriorityQueue.html#<init>()[PriorityQueue]()
* {java11-javadoc}/java.base/java/util/PriorityQueue.html#<init>(java.util.Comparator)[PriorityQueue](Comparator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* def {java11-javadoc}/java.base/java/util/Queue.html#element()[element]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* boolean {java11-javadoc}/java.base/java/util/Queue.html#offer(java.lang.Object)[offer](def)
* def {java11-javadoc}/java.base/java/util/Queue.html#peek()[peek]()
* def {java11-javadoc}/java.base/java/util/Queue.html#poll()[poll]()
* def {java11-javadoc}/java.base/java/util/Queue.html#remove()[remove]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Queue]]
==== Queue
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* def {java11-javadoc}/java.base/java/util/Queue.html#element()[element]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* boolean {java11-javadoc}/java.base/java/util/Queue.html#offer(java.lang.Object)[offer](def)
* def {java11-javadoc}/java.base/java/util/Queue.html#peek()[peek]()
* def {java11-javadoc}/java.base/java/util/Queue.html#poll()[poll]()
* def {java11-javadoc}/java.base/java/util/Queue.html#remove()[remove]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Random]]
==== Random
* {java11-javadoc}/java.base/java/util/Random.html#<init>()[Random]()
* {java11-javadoc}/java.base/java/util/Random.html#<init>(long)[Random](long)
* DoubleStream {java11-javadoc}/java.base/java/util/Random.html#doubles(long)[doubles](long)
* DoubleStream {java11-javadoc}/java.base/java/util/Random.html#doubles(long,double,double)[doubles](long, double, double)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* IntStream {java11-javadoc}/java.base/java/util/Random.html#ints(long)[ints](long)
* IntStream {java11-javadoc}/java.base/java/util/Random.html#ints(long,int,int)[ints](long, int, int)
* LongStream {java11-javadoc}/java.base/java/util/Random.html#longs(long)[longs](long)
* LongStream {java11-javadoc}/java.base/java/util/Random.html#longs(long,long,long)[longs](long, long, long)
* boolean {java11-javadoc}/java.base/java/util/Random.html#nextBoolean()[nextBoolean]()
* void {java11-javadoc}/java.base/java/util/Random.html#nextBytes(byte%5B%5D)[nextBytes](byte[])
* double {java11-javadoc}/java.base/java/util/Random.html#nextDouble()[nextDouble]()
* float {java11-javadoc}/java.base/java/util/Random.html#nextFloat()[nextFloat]()
* double {java11-javadoc}/java.base/java/util/Random.html#nextGaussian()[nextGaussian]()
* int {java11-javadoc}/java.base/java/util/Random.html#nextInt()[nextInt]()
* int {java11-javadoc}/java.base/java/util/Random.html#nextInt(int)[nextInt](int)
* long {java11-javadoc}/java.base/java/util/Random.html#nextLong()[nextLong]()
* void {java11-javadoc}/java.base/java/util/Random.html#setSeed(long)[setSeed](long)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-RandomAccess]]
==== RandomAccess
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Set]]
==== Set
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/Set.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/Set.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* boolean {java11-javadoc}/java.base/java/util/Set.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-SimpleTimeZone]]
==== SimpleTimeZone
* static int {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#STANDARD_TIME[STANDARD_TIME]
* static int {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#UTC_TIME[UTC_TIME]
* static int {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#WALL_TIME[WALL_TIME]
* {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#<init>(int,java.lang.String,int,int,int,int,int,int,int,int)[SimpleTimeZone](int, String, int, int, int, int, int, int, int, int)
* {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#<init>(int,java.lang.String,int,int,int,int,int,int,int,int,int)[SimpleTimeZone](int, String, int, int, int, int, int, int, int, int, int)
* {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#<init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)[SimpleTimeZone](int, String, int, int, int, int, int, int, int, int, int, int, int)
* {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#<init>(int,java.lang.String)[SimpleTimeZone](int, String)
* def {java11-javadoc}/java.base/java/util/TimeZone.html#clone()[clone]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#getDSTSavings()[getDSTSavings]()
* String {java11-javadoc}/java.base/java/util/TimeZone.html#getDisplayName()[getDisplayName]()
* String {java11-javadoc}/java.base/java/util/TimeZone.html#getDisplayName(java.util.Locale)[getDisplayName](Locale)
* String {java11-javadoc}/java.base/java/util/TimeZone.html#getDisplayName(boolean,int)[getDisplayName](boolean, int)
* String {java11-javadoc}/java.base/java/util/TimeZone.html#getDisplayName(boolean,int,java.util.Locale)[getDisplayName](boolean, int, Locale)
* String {java11-javadoc}/java.base/java/util/TimeZone.html#getID()[getID]()
* int {java11-javadoc}/java.base/java/util/TimeZone.html#getOffset(long)[getOffset](long)
* int {java11-javadoc}/java.base/java/util/TimeZone.html#getOffset(int,int,int,int,int,int)[getOffset](int, int, int, int, int, int)
* int {java11-javadoc}/java.base/java/util/TimeZone.html#getRawOffset()[getRawOffset]()
* boolean {java11-javadoc}/java.base/java/util/TimeZone.html#hasSameRules(java.util.TimeZone)[hasSameRules](TimeZone)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/TimeZone.html#inDaylightTime(java.util.Date)[inDaylightTime](Date)
* boolean {java11-javadoc}/java.base/java/util/TimeZone.html#observesDaylightTime()[observesDaylightTime]()
* void {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#setDSTSavings(int)[setDSTSavings](int)
* void {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#setEndRule(int,int,int)[setEndRule](int, int, int)
* void {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#setEndRule(int,int,int,int)[setEndRule](int, int, int, int)
* void {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#setEndRule(int,int,int,int,boolean)[setEndRule](int, int, int, int, boolean)
* void {java11-javadoc}/java.base/java/util/TimeZone.html#setRawOffset(int)[setRawOffset](int)
* void {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#setStartRule(int,int,int)[setStartRule](int, int, int)
* void {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#setStartRule(int,int,int,int)[setStartRule](int, int, int, int)
* void {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#setStartRule(int,int,int,int,boolean)[setStartRule](int, int, int, int, boolean)
* void {java11-javadoc}/java.base/java/util/SimpleTimeZone.html#setStartYear(int)[setStartYear](int)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* ZoneId {java11-javadoc}/java.base/java/util/TimeZone.html#toZoneId()[toZoneId]()
* boolean {java11-javadoc}/java.base/java/util/TimeZone.html#useDaylightTime()[useDaylightTime]()


[[painless-api-reference-watcher-condition-java-util-SortedMap]]
==== SortedMap
* void {java11-javadoc}/java.base/java/util/Map.html#clear()[clear]()
* List collect(BiFunction)
* def collect(Collection, BiFunction)
* Comparator {java11-javadoc}/java.base/java/util/SortedMap.html#comparator()[comparator]()
* def {java11-javadoc}/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)[compute](def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)[computeIfAbsent](def, Function)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)[computeIfPresent](def, BiFunction)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsKey(java.lang.Object)[containsKey](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsValue(java.lang.Object)[containsValue](def)
* int count(BiPredicate)
* def each(BiConsumer)
* Set {java11-javadoc}/java.base/java/util/Map.html#entrySet()[entrySet]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#equals(java.lang.Object)[equals](Object)
* boolean every(BiPredicate)
* Map.Entry find(BiPredicate)
* Map findAll(BiPredicate)
* def findResult(BiFunction)
* def findResult(def, BiFunction)
* List findResults(BiFunction)
* def {java11-javadoc}/java.base/java/util/SortedMap.html#firstKey()[firstKey]()
* void {java11-javadoc}/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)[forEach](BiConsumer)
* def {java11-javadoc}/java.base/java/util/Map.html#get(java.lang.Object)[get](def)
* def {java11-javadoc}/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)[getOrDefault](def, def)
* Map groupBy(BiFunction)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* SortedMap {java11-javadoc}/java.base/java/util/SortedMap.html#headMap(java.lang.Object)[headMap](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#isEmpty()[isEmpty]()
* Set {java11-javadoc}/java.base/java/util/Map.html#keySet()[keySet]()
* def {java11-javadoc}/java.base/java/util/SortedMap.html#lastKey()[lastKey]()
* def {java11-javadoc}/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)[merge](def, def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)[put](def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#putAll(java.util.Map)[putAll](Map)
* def {java11-javadoc}/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)[putIfAbsent](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)[remove](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)[replace](def, def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)[replace](def, def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)[replaceAll](BiFunction)
* int {java11-javadoc}/java.base/java/util/Map.html#size()[size]()
* SortedMap {java11-javadoc}/java.base/java/util/SortedMap.html#subMap(java.lang.Object,java.lang.Object)[subMap](def, def)
* SortedMap {java11-javadoc}/java.base/java/util/SortedMap.html#tailMap(java.lang.Object)[tailMap](def)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* Collection {java11-javadoc}/java.base/java/util/Map.html#values()[values]()


[[painless-api-reference-watcher-condition-java-util-SortedSet]]
==== SortedSet
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* Comparator {java11-javadoc}/java.base/java/util/SortedSet.html#comparator()[comparator]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/Set.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* def {java11-javadoc}/java.base/java/util/SortedSet.html#first()[first]()
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/Set.html#hashCode()[hashCode]()
* SortedSet {java11-javadoc}/java.base/java/util/SortedSet.html#headSet(java.lang.Object)[headSet](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* def {java11-javadoc}/java.base/java/util/SortedSet.html#last()[last]()
* boolean {java11-javadoc}/java.base/java/util/Set.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* SortedSet {java11-javadoc}/java.base/java/util/SortedSet.html#subSet(java.lang.Object,java.lang.Object)[subSet](def, def)
* double sum()
* double sum(ToDoubleFunction)
* SortedSet {java11-javadoc}/java.base/java/util/SortedSet.html#tailSet(java.lang.Object)[tailSet](def)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Spliterator]]
==== Spliterator
* static int {java11-javadoc}/java.base/java/util/Spliterator.html#CONCURRENT[CONCURRENT]
* static int {java11-javadoc}/java.base/java/util/Spliterator.html#DISTINCT[DISTINCT]
* static int {java11-javadoc}/java.base/java/util/Spliterator.html#IMMUTABLE[IMMUTABLE]
* static int {java11-javadoc}/java.base/java/util/Spliterator.html#NONNULL[NONNULL]
* static int {java11-javadoc}/java.base/java/util/Spliterator.html#ORDERED[ORDERED]
* static int {java11-javadoc}/java.base/java/util/Spliterator.html#SIZED[SIZED]
* static int {java11-javadoc}/java.base/java/util/Spliterator.html#SORTED[SORTED]
* static int {java11-javadoc}/java.base/java/util/Spliterator.html#SUBSIZED[SUBSIZED]
* int {java11-javadoc}/java.base/java/util/Spliterator.html#characteristics()[characteristics]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* long {java11-javadoc}/java.base/java/util/Spliterator.html#estimateSize()[estimateSize]()
* void {java11-javadoc}/java.base/java/util/Spliterator.html#forEachRemaining(java.util.function.Consumer)[forEachRemaining](Consumer)
* Comparator {java11-javadoc}/java.base/java/util/Spliterator.html#getComparator()[getComparator]()
* long {java11-javadoc}/java.base/java/util/Spliterator.html#getExactSizeIfKnown()[getExactSizeIfKnown]()
* boolean {java11-javadoc}/java.base/java/util/Spliterator.html#hasCharacteristics(int)[hasCharacteristics](int)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* boolean {java11-javadoc}/java.base/java/util/Spliterator.html#tryAdvance(java.util.function.Consumer)[tryAdvance](Consumer)
* Spliterator {java11-javadoc}/java.base/java/util/Spliterator.html#trySplit()[trySplit]()


[[painless-api-reference-watcher-condition-java-util-Spliterator.OfDouble]]
==== Spliterator.OfDouble
* int {java11-javadoc}/java.base/java/util/Spliterator.html#characteristics()[characteristics]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* long {java11-javadoc}/java.base/java/util/Spliterator.html#estimateSize()[estimateSize]()
* void {java11-javadoc}/java.base/java/util/Spliterator$OfPrimitive.html#forEachRemaining(java.lang.Object)[forEachRemaining](def)
* Comparator {java11-javadoc}/java.base/java/util/Spliterator.html#getComparator()[getComparator]()
* long {java11-javadoc}/java.base/java/util/Spliterator.html#getExactSizeIfKnown()[getExactSizeIfKnown]()
* boolean {java11-javadoc}/java.base/java/util/Spliterator.html#hasCharacteristics(int)[hasCharacteristics](int)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* boolean {java11-javadoc}/java.base/java/util/Spliterator$OfPrimitive.html#tryAdvance(java.lang.Object)[tryAdvance](def)
* Spliterator.OfDouble {java11-javadoc}/java.base/java/util/Spliterator$OfDouble.html#trySplit()[trySplit]()


[[painless-api-reference-watcher-condition-java-util-Spliterator.OfInt]]
==== Spliterator.OfInt
* int {java11-javadoc}/java.base/java/util/Spliterator.html#characteristics()[characteristics]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* long {java11-javadoc}/java.base/java/util/Spliterator.html#estimateSize()[estimateSize]()
* void {java11-javadoc}/java.base/java/util/Spliterator$OfPrimitive.html#forEachRemaining(java.lang.Object)[forEachRemaining](def)
* Comparator {java11-javadoc}/java.base/java/util/Spliterator.html#getComparator()[getComparator]()
* long {java11-javadoc}/java.base/java/util/Spliterator.html#getExactSizeIfKnown()[getExactSizeIfKnown]()
* boolean {java11-javadoc}/java.base/java/util/Spliterator.html#hasCharacteristics(int)[hasCharacteristics](int)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* boolean {java11-javadoc}/java.base/java/util/Spliterator$OfPrimitive.html#tryAdvance(java.lang.Object)[tryAdvance](def)
* Spliterator.OfInt {java11-javadoc}/java.base/java/util/Spliterator$OfInt.html#trySplit()[trySplit]()


[[painless-api-reference-watcher-condition-java-util-Spliterator.OfLong]]
==== Spliterator.OfLong
* int {java11-javadoc}/java.base/java/util/Spliterator.html#characteristics()[characteristics]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* long {java11-javadoc}/java.base/java/util/Spliterator.html#estimateSize()[estimateSize]()
* void {java11-javadoc}/java.base/java/util/Spliterator$OfPrimitive.html#forEachRemaining(java.lang.Object)[forEachRemaining](def)
* Comparator {java11-javadoc}/java.base/java/util/Spliterator.html#getComparator()[getComparator]()
* long {java11-javadoc}/java.base/java/util/Spliterator.html#getExactSizeIfKnown()[getExactSizeIfKnown]()
* boolean {java11-javadoc}/java.base/java/util/Spliterator.html#hasCharacteristics(int)[hasCharacteristics](int)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* boolean {java11-javadoc}/java.base/java/util/Spliterator$OfPrimitive.html#tryAdvance(java.lang.Object)[tryAdvance](def)
* Spliterator.OfLong {java11-javadoc}/java.base/java/util/Spliterator$OfLong.html#trySplit()[trySplit]()


[[painless-api-reference-watcher-condition-java-util-Spliterator.OfPrimitive]]
==== Spliterator.OfPrimitive
* int {java11-javadoc}/java.base/java/util/Spliterator.html#characteristics()[characteristics]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* long {java11-javadoc}/java.base/java/util/Spliterator.html#estimateSize()[estimateSize]()
* void {java11-javadoc}/java.base/java/util/Spliterator$OfPrimitive.html#forEachRemaining(java.lang.Object)[forEachRemaining](def)
* Comparator {java11-javadoc}/java.base/java/util/Spliterator.html#getComparator()[getComparator]()
* long {java11-javadoc}/java.base/java/util/Spliterator.html#getExactSizeIfKnown()[getExactSizeIfKnown]()
* boolean {java11-javadoc}/java.base/java/util/Spliterator.html#hasCharacteristics(int)[hasCharacteristics](int)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* boolean {java11-javadoc}/java.base/java/util/Spliterator$OfPrimitive.html#tryAdvance(java.lang.Object)[tryAdvance](def)
* Spliterator.OfPrimitive {java11-javadoc}/java.base/java/util/Spliterator$OfPrimitive.html#trySplit()[trySplit]()


[[painless-api-reference-watcher-condition-java-util-Spliterators]]
==== Spliterators
* static Spliterator.OfDouble {java11-javadoc}/java.base/java/util/Spliterators.html#emptyDoubleSpliterator()[emptyDoubleSpliterator]()
* static Spliterator.OfInt {java11-javadoc}/java.base/java/util/Spliterators.html#emptyIntSpliterator()[emptyIntSpliterator]()
* static Spliterator.OfLong {java11-javadoc}/java.base/java/util/Spliterators.html#emptyLongSpliterator()[emptyLongSpliterator]()
* static Spliterator {java11-javadoc}/java.base/java/util/Spliterators.html#emptySpliterator()[emptySpliterator]()
* static Iterator {java11-javadoc}/java.base/java/util/Spliterators.html#iterator(java.util.Spliterator)[iterator](Spliterator)
* static Spliterator {java11-javadoc}/java.base/java/util/Spliterators.html#spliterator(java.util.Collection,int)[spliterator](Collection, int)
* static Spliterator {java11-javadoc}/java.base/java/util/Spliterators.html#spliterator(java.util.Iterator,long,int)[spliterator](Iterator, long, int)
* static Spliterator {java11-javadoc}/java.base/java/util/Spliterators.html#spliteratorUnknownSize(java.util.Iterator,int)[spliteratorUnknownSize](Iterator, int)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Stack]]
==== Stack
* {java11-javadoc}/java.base/java/util/Stack.html#<init>()[Stack]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* void {java11-javadoc}/java.base/java/util/List.html#add(int,java.lang.Object)[add](int, def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/List.html#addAll(int,java.util.Collection)[addAll](int, Collection)
* void {java11-javadoc}/java.base/java/util/Vector.html#addElement(java.lang.Object)[addElement](def)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/Vector.html#clone()[clone]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* void {java11-javadoc}/java.base/java/util/Vector.html#copyInto(java.lang.Object%5B%5D)[copyInto](Object[])
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* def {java11-javadoc}/java.base/java/util/Vector.html#elementAt(int)[elementAt](int)
* Enumeration {java11-javadoc}/java.base/java/util/Vector.html#elements()[elements]()
* boolean {java11-javadoc}/java.base/java/util/Stack.html#empty()[empty]()
* boolean {java11-javadoc}/java.base/java/util/List.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* def {java11-javadoc}/java.base/java/util/Vector.html#firstElement()[firstElement]()
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/List.html#get(int)[get](int)
* int getLength()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/List.html#hashCode()[hashCode]()
* int {java11-javadoc}/java.base/java/util/List.html#indexOf(java.lang.Object)[indexOf](def)
* void {java11-javadoc}/java.base/java/util/Vector.html#insertElementAt(java.lang.Object,int)[insertElementAt](def, int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* def {java11-javadoc}/java.base/java/util/Vector.html#lastElement()[lastElement]()
* int {java11-javadoc}/java.base/java/util/List.html#lastIndexOf(java.lang.Object)[lastIndexOf](def)
* int {java11-javadoc}/java.base/java/util/Vector.html#lastIndexOf(java.lang.Object,int)[lastIndexOf](def, int)
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator()[listIterator]()
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator(int)[listIterator](int)
* def {java11-javadoc}/java.base/java/util/Stack.html#peek()[peek]()
* def {java11-javadoc}/java.base/java/util/Stack.html#pop()[pop]()
* def {java11-javadoc}/java.base/java/util/Stack.html#push(java.lang.Object)[push](def)
* def {java11-javadoc}/java.base/java/util/List.html#remove(int)[remove](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* void {java11-javadoc}/java.base/java/util/Vector.html#removeAllElements()[removeAllElements]()
* boolean {java11-javadoc}/java.base/java/util/Vector.html#removeElement(java.lang.Object)[removeElement](def)
* void {java11-javadoc}/java.base/java/util/Vector.html#removeElementAt(int)[removeElementAt](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* void {java11-javadoc}/java.base/java/util/List.html#replaceAll(java.util.function.UnaryOperator)[replaceAll](UnaryOperator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Stack.html#search(java.lang.Object)[search](def)
* def {java11-javadoc}/java.base/java/util/List.html#set(int,java.lang.Object)[set](int, def)
* void {java11-javadoc}/java.base/java/util/Vector.html#setElementAt(java.lang.Object,int)[setElementAt](def, int)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* void {java11-javadoc}/java.base/java/util/List.html#sort(java.util.Comparator)[sort](Comparator)
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* List {java11-javadoc}/java.base/java/util/List.html#subList(int,int)[subList](int, int)
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-StringJoiner]]
==== StringJoiner
* {java11-javadoc}/java.base/java/util/StringJoiner.html#<init>(java.lang.CharSequence)[StringJoiner](CharSequence)
* {java11-javadoc}/java.base/java/util/StringJoiner.html#<init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)[StringJoiner](CharSequence, CharSequence, CharSequence)
* StringJoiner {java11-javadoc}/java.base/java/util/StringJoiner.html#add(java.lang.CharSequence)[add](CharSequence)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* int {java11-javadoc}/java.base/java/util/StringJoiner.html#length()[length]()
* StringJoiner {java11-javadoc}/java.base/java/util/StringJoiner.html#merge(java.util.StringJoiner)[merge](StringJoiner)
* StringJoiner {java11-javadoc}/java.base/java/util/StringJoiner.html#setEmptyValue(java.lang.CharSequence)[setEmptyValue](CharSequence)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-StringTokenizer]]
==== StringTokenizer
* {java11-javadoc}/java.base/java/util/StringTokenizer.html#<init>(java.lang.String)[StringTokenizer](String)
* {java11-javadoc}/java.base/java/util/StringTokenizer.html#<init>(java.lang.String,java.lang.String)[StringTokenizer](String, String)
* {java11-javadoc}/java.base/java/util/StringTokenizer.html#<init>(java.lang.String,java.lang.String,boolean)[StringTokenizer](String, String, boolean)
* int {java11-javadoc}/java.base/java/util/StringTokenizer.html#countTokens()[countTokens]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* boolean {java11-javadoc}/java.base/java/util/Enumeration.html#hasMoreElements()[hasMoreElements]()
* boolean {java11-javadoc}/java.base/java/util/StringTokenizer.html#hasMoreTokens()[hasMoreTokens]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* def {java11-javadoc}/java.base/java/util/Enumeration.html#nextElement()[nextElement]()
* String {java11-javadoc}/java.base/java/util/StringTokenizer.html#nextToken()[nextToken]()
* String {java11-javadoc}/java.base/java/util/StringTokenizer.html#nextToken(java.lang.String)[nextToken](String)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-TimeZone]]
==== TimeZone
* static int {java11-javadoc}/java.base/java/util/TimeZone.html#LONG[LONG]
* static int {java11-javadoc}/java.base/java/util/TimeZone.html#SHORT[SHORT]
* static String[] {java11-javadoc}/java.base/java/util/TimeZone.html#getAvailableIDs()[getAvailableIDs]()
* static String[] {java11-javadoc}/java.base/java/util/TimeZone.html#getAvailableIDs(int)[getAvailableIDs](int)
* static TimeZone {java11-javadoc}/java.base/java/util/TimeZone.html#getDefault()[getDefault]()
* static TimeZone {java11-javadoc}/java.base/java/util/TimeZone.html#getTimeZone(java.lang.String)[getTimeZone](String)
* def {java11-javadoc}/java.base/java/util/TimeZone.html#clone()[clone]()
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* int {java11-javadoc}/java.base/java/util/TimeZone.html#getDSTSavings()[getDSTSavings]()
* String {java11-javadoc}/java.base/java/util/TimeZone.html#getDisplayName()[getDisplayName]()
* String {java11-javadoc}/java.base/java/util/TimeZone.html#getDisplayName(java.util.Locale)[getDisplayName](Locale)
* String {java11-javadoc}/java.base/java/util/TimeZone.html#getDisplayName(boolean,int)[getDisplayName](boolean, int)
* String {java11-javadoc}/java.base/java/util/TimeZone.html#getDisplayName(boolean,int,java.util.Locale)[getDisplayName](boolean, int, Locale)
* String {java11-javadoc}/java.base/java/util/TimeZone.html#getID()[getID]()
* int {java11-javadoc}/java.base/java/util/TimeZone.html#getOffset(long)[getOffset](long)
* int {java11-javadoc}/java.base/java/util/TimeZone.html#getOffset(int,int,int,int,int,int)[getOffset](int, int, int, int, int, int)
* int {java11-javadoc}/java.base/java/util/TimeZone.html#getRawOffset()[getRawOffset]()
* boolean {java11-javadoc}/java.base/java/util/TimeZone.html#hasSameRules(java.util.TimeZone)[hasSameRules](TimeZone)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* boolean {java11-javadoc}/java.base/java/util/TimeZone.html#inDaylightTime(java.util.Date)[inDaylightTime](Date)
* boolean {java11-javadoc}/java.base/java/util/TimeZone.html#observesDaylightTime()[observesDaylightTime]()
* void {java11-javadoc}/java.base/java/util/TimeZone.html#setRawOffset(int)[setRawOffset](int)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* ZoneId {java11-javadoc}/java.base/java/util/TimeZone.html#toZoneId()[toZoneId]()
* boolean {java11-javadoc}/java.base/java/util/TimeZone.html#useDaylightTime()[useDaylightTime]()


[[painless-api-reference-watcher-condition-java-util-TooManyListenersException]]
==== TooManyListenersException
* {java11-javadoc}/java.base/java/util/TooManyListenersException.html#<init>()[TooManyListenersException]()
* {java11-javadoc}/java.base/java/util/TooManyListenersException.html#<init>(java.lang.String)[TooManyListenersException](String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-TreeMap]]
==== TreeMap
* {java11-javadoc}/java.base/java/util/TreeMap.html#<init>()[TreeMap]()
* {java11-javadoc}/java.base/java/util/TreeMap.html#<init>(java.util.Comparator)[TreeMap](Comparator)
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#ceilingEntry(java.lang.Object)[ceilingEntry](def)
* def {java11-javadoc}/java.base/java/util/NavigableMap.html#ceilingKey(java.lang.Object)[ceilingKey](def)
* void {java11-javadoc}/java.base/java/util/Map.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/TreeMap.html#clone()[clone]()
* List collect(BiFunction)
* def collect(Collection, BiFunction)
* Comparator {java11-javadoc}/java.base/java/util/SortedMap.html#comparator()[comparator]()
* def {java11-javadoc}/java.base/java/util/Map.html#compute(java.lang.Object,java.util.function.BiFunction)[compute](def, BiFunction)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfAbsent(java.lang.Object,java.util.function.Function)[computeIfAbsent](def, Function)
* def {java11-javadoc}/java.base/java/util/Map.html#computeIfPresent(java.lang.Object,java.util.function.BiFunction)[computeIfPresent](def, BiFunction)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsKey(java.lang.Object)[containsKey](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#containsValue(java.lang.Object)[containsValue](def)
* int count(BiPredicate)
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableMap.html#descendingKeySet()[descendingKeySet]()
* NavigableMap {java11-javadoc}/java.base/java/util/NavigableMap.html#descendingMap()[descendingMap]()
* def each(BiConsumer)
* Set {java11-javadoc}/java.base/java/util/Map.html#entrySet()[entrySet]()
* boolean {java11-javadoc}/java.base/java/util/Map.html#equals(java.lang.Object)[equals](Object)
* boolean every(BiPredicate)
* Map.Entry find(BiPredicate)
* Map findAll(BiPredicate)
* def findResult(BiFunction)
* def findResult(def, BiFunction)
* List findResults(BiFunction)
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#firstEntry()[firstEntry]()
* def {java11-javadoc}/java.base/java/util/SortedMap.html#firstKey()[firstKey]()
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#floorEntry(java.lang.Object)[floorEntry](def)
* def {java11-javadoc}/java.base/java/util/NavigableMap.html#floorKey(java.lang.Object)[floorKey](def)
* void {java11-javadoc}/java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)[forEach](BiConsumer)
* def {java11-javadoc}/java.base/java/util/Map.html#get(java.lang.Object)[get](def)
* def {java11-javadoc}/java.base/java/util/Map.html#getOrDefault(java.lang.Object,java.lang.Object)[getOrDefault](def, def)
* Map groupBy(BiFunction)
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* SortedMap {java11-javadoc}/java.base/java/util/SortedMap.html#headMap(java.lang.Object)[headMap](def)
* NavigableMap {java11-javadoc}/java.base/java/util/NavigableMap.html#headMap(java.lang.Object,boolean)[headMap](def, boolean)
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#higherEntry(java.lang.Object)[higherEntry](def)
* def {java11-javadoc}/java.base/java/util/NavigableMap.html#higherKey(java.lang.Object)[higherKey](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#isEmpty()[isEmpty]()
* Set {java11-javadoc}/java.base/java/util/Map.html#keySet()[keySet]()
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#lastEntry()[lastEntry]()
* def {java11-javadoc}/java.base/java/util/SortedMap.html#lastKey()[lastKey]()
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#lowerEntry(java.lang.Object)[lowerEntry](def)
* def {java11-javadoc}/java.base/java/util/Map.html#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)[merge](def, def, BiFunction)
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableMap.html#navigableKeySet()[navigableKeySet]()
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#pollFirstEntry()[pollFirstEntry]()
* Map.Entry {java11-javadoc}/java.base/java/util/NavigableMap.html#pollLastEntry()[pollLastEntry]()
* def {java11-javadoc}/java.base/java/util/Map.html#put(java.lang.Object,java.lang.Object)[put](def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#putAll(java.util.Map)[putAll](Map)
* def {java11-javadoc}/java.base/java/util/Map.html#putIfAbsent(java.lang.Object,java.lang.Object)[putIfAbsent](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)[remove](def, def)
* def {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object)[replace](def, def)
* boolean {java11-javadoc}/java.base/java/util/Map.html#replace(java.lang.Object,java.lang.Object,java.lang.Object)[replace](def, def, def)
* void {java11-javadoc}/java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)[replaceAll](BiFunction)
* int {java11-javadoc}/java.base/java/util/Map.html#size()[size]()
* SortedMap {java11-javadoc}/java.base/java/util/SortedMap.html#subMap(java.lang.Object,java.lang.Object)[subMap](def, def)
* NavigableMap {java11-javadoc}/java.base/java/util/NavigableMap.html#subMap(java.lang.Object,boolean,java.lang.Object,boolean)[subMap](def, boolean, def, boolean)
* SortedMap {java11-javadoc}/java.base/java/util/SortedMap.html#tailMap(java.lang.Object)[tailMap](def)
* NavigableMap {java11-javadoc}/java.base/java/util/NavigableMap.html#tailMap(java.lang.Object,boolean)[tailMap](def, boolean)
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* Collection {java11-javadoc}/java.base/java/util/Map.html#values()[values]()


[[painless-api-reference-watcher-condition-java-util-TreeSet]]
==== TreeSet
* {java11-javadoc}/java.base/java/util/TreeSet.html#<init>()[TreeSet]()
* {java11-javadoc}/java.base/java/util/TreeSet.html#<init>(java.util.Comparator)[TreeSet](Comparator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#ceiling(java.lang.Object)[ceiling](def)
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/TreeSet.html#clone()[clone]()
* List collect(Function)
* def collect(Collection, Function)
* Comparator {java11-javadoc}/java.base/java/util/SortedSet.html#comparator()[comparator]()
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* Iterator {java11-javadoc}/java.base/java/util/NavigableSet.html#descendingIterator()[descendingIterator]()
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableSet.html#descendingSet()[descendingSet]()
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/Set.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* def {java11-javadoc}/java.base/java/util/SortedSet.html#first()[first]()
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#floor(java.lang.Object)[floor](def)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/Set.html#hashCode()[hashCode]()
* SortedSet {java11-javadoc}/java.base/java/util/SortedSet.html#headSet(java.lang.Object)[headSet](def)
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableSet.html#headSet(java.lang.Object,boolean)[headSet](def, boolean)
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#higher(java.lang.Object)[higher](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* def {java11-javadoc}/java.base/java/util/SortedSet.html#last()[last]()
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#lower(java.lang.Object)[lower](def)
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#pollFirst()[pollFirst]()
* def {java11-javadoc}/java.base/java/util/NavigableSet.html#pollLast()[pollLast]()
* boolean {java11-javadoc}/java.base/java/util/Set.html#remove(java.lang.Object)[remove](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* SortedSet {java11-javadoc}/java.base/java/util/SortedSet.html#subSet(java.lang.Object,java.lang.Object)[subSet](def, def)
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableSet.html#subSet(java.lang.Object,boolean,java.lang.Object,boolean)[subSet](def, boolean, def, boolean)
* double sum()
* double sum(ToDoubleFunction)
* SortedSet {java11-javadoc}/java.base/java/util/SortedSet.html#tailSet(java.lang.Object)[tailSet](def)
* NavigableSet {java11-javadoc}/java.base/java/util/NavigableSet.html#tailSet(java.lang.Object,boolean)[tailSet](def, boolean)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-UUID]]
==== UUID
* static UUID {java11-javadoc}/java.base/java/util/UUID.html#fromString(java.lang.String)[fromString](String)
* static UUID {java11-javadoc}/java.base/java/util/UUID.html#nameUUIDFromBytes(byte%5B%5D)[nameUUIDFromBytes](byte[])
* {java11-javadoc}/java.base/java/util/UUID.html#<init>(long,long)[UUID](long, long)
* int {java11-javadoc}/java.base/java/util/UUID.html#clockSequence()[clockSequence]()
* int {java11-javadoc}/java.base/java/util/UUID.html#compareTo(java.util.UUID)[compareTo](UUID)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* long {java11-javadoc}/java.base/java/util/UUID.html#getLeastSignificantBits()[getLeastSignificantBits]()
* long {java11-javadoc}/java.base/java/util/UUID.html#getMostSignificantBits()[getMostSignificantBits]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* long {java11-javadoc}/java.base/java/util/UUID.html#node()[node]()
* long {java11-javadoc}/java.base/java/util/UUID.html#timestamp()[timestamp]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()
* int {java11-javadoc}/java.base/java/util/UUID.html#variant()[variant]()
* int {java11-javadoc}/java.base/java/util/UUID.html#version()[version]()


[[painless-api-reference-watcher-condition-java-util-UnknownFormatConversionException]]
==== UnknownFormatConversionException
* {java11-javadoc}/java.base/java/util/UnknownFormatConversionException.html#<init>(java.lang.String)[UnknownFormatConversionException](String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/util/UnknownFormatConversionException.html#getConversion()[getConversion]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-UnknownFormatFlagsException]]
==== UnknownFormatFlagsException
* {java11-javadoc}/java.base/java/util/UnknownFormatFlagsException.html#<init>(java.lang.String)[UnknownFormatFlagsException](String)
* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)
* String {java11-javadoc}/java.base/java/util/UnknownFormatFlagsException.html#getFlags()[getFlags]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getLocalizedMessage()[getLocalizedMessage]()
* String {java11-javadoc}/java.base/java/lang/Throwable.html#getMessage()[getMessage]()
* StackTraceElement[] {java11-javadoc}/java.base/java/lang/Throwable.html#getStackTrace()[getStackTrace]()
* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-watcher-condition-java-util-Vector]]
==== Vector
* {java11-javadoc}/java.base/java/util/Vector.html#<init>()[Vector]()
* {java11-javadoc}/java.base/java/util/Vector.html#<init>(java.util.Collection)[Vector](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* void {java11-javadoc}/java.base/java/util/List.html#add(int,java.lang.Object)[add](int, def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/List.html#addAll(int,java.util.Collection)[addAll](int, Collection)
* void {java11-javadoc}/java.base/java/util/Vector.html#addElement(java.lang.Object)[addElement](def)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* def {java11-javadoc}/java.base/java/util/Vector.html#clone()[clone]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* void {java11-javadoc}/java.base/java/util/Vector.html#copyInto(java.lang.Object%5B%5D)[copyInto](Object[])
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* def {java11-javadoc}/java.base/java/util/Vector.html#elementAt(int)[elementAt](int)
* Enumeration {java11-javadoc}/java.base/java/util/Vector.html#elements()[elements]()
* boolean {java11-javadoc}/java.base/java/util/List.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* def {java11-javadoc}/java.base/java/util/Vector.html#firstElement()[firstElement]()
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/List.html#get(int)[get](int)
* int getLength()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/List.html#hashCode()[hashCode]()
* int {java11-javadoc}/java.base/java/util/List.html#indexOf(java.lang.Object)[indexOf](def)
* void {java11-javadoc}/java.base/java/util/Vector.html#insertElementAt(java.lang.Object,int)[insertElementAt](def, int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* def {java11-javadoc}/java.base/java/util/Vector.html#lastElement()[lastElement]()
* int {java11-javadoc}/java.base/java/util/List.html#lastIndexOf(java.lang.Object)[lastIndexOf](def)
* int {java11-javadoc}/java.base/java/util/Vector.html#lastIndexOf(java.lang.Object,int)[lastIndexOf](def, int)
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator()[listIterator]()
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator(int)[listIterator](int)
* def {java11-javadoc}/java.base/java/util/List.html#remove(int)[remove](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* void {java11-javadoc}/java.base/java/util/Vector.html#removeAllElements()[removeAllElements]()
* boolean {java11-javadoc}/java.base/java/util/Vector.html#removeElement(java.lang.Object)[removeElement](def)
* void {java11-javadoc}/java.base/java/util/Vector.html#removeElementAt(int)[removeElementAt](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* void {java11-javadoc}/java.base/java/util/List.html#replaceAll(java.util.function.UnaryOperator)[replaceAll](UnaryOperator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* def {java11-javadoc}/java.base/java/util/List.html#set(int,java.lang.Object)[set](int, def)
* void {java11-javadoc}/java.base/java/util/Vector.html#setElementAt(java.lang.Object,int)[setElementAt](def, int)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* void {java11-javadoc}/java.base/java/util/List.html#sort(java.util.Comparator)[sort](Comparator)
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* List {java11-javadoc}/java.base/java/util/List.html#subList(int,int)[subList](int, int)
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


