[[painless-operators]]
=== Operators

<<<<<<< HEAD
An operator is the most basic action that can be taken to evaluate values in a
script. An expression is one-to-many consecutive operations.  Precedence is the
order in which an operator will be evaluated relative to another operator.
Associativity is the direction within an expression in which a specific operator
is evaluated.  The following table lists all available operators:

[cols="<6,<3,^3,^2,^4"]
|====
| *Operator*                                       | *Category*                                  | *Symbol(s)* | *Precedence* | *Associativity*
| <<precedence, Precedence>>                       | <<painless-operators-general, General>>     | ()          | 0            | left -> right
| <<method-call, Method Call>>                     | <<painless-operators-reference, Reference>> | . ()        | 1            | left -> right
| <<field-access, Field Access>>                   | <<painless-operators-reference, Reference>> | .           | 1            | left -> right
| <<null-safe, Null Safe>>                         | <<painless-operators-reference, Reference>> | ?.          | 1            | left -> right
| <<function-call, Function Call>>                 | <<painless-operators-general, General>>     | ()          | 1            | left -> right
| <<array-initialization, Array Initialization>>   | <<painless-operators-array, Array>>         | [] {}       | 1            | left -> right
| <<array-access, Array Access>>                   | <<painless-operators-array, Array>>         | []          | 1            | left -> right
| <<array-length, Array Length>>                   | <<painless-operators-array, Array>>         | .           | 1            | left -> right
| <<list-initialization, List Initialization>>     | <<painless-operators-reference, Reference>> | []          | 1            | left -> right
| <<list-access, List Access>>                     | <<painless-operators-reference, Reference>> | []          | 1            | left -> right
| <<map-initialization, Map Initialization>>       | <<painless-operators-reference, Reference>> | [:]         | 1            | left -> right
| <<map-access, Map Access>>                       | <<painless-operators-reference, Reference>> | []          | 1            | left -> right
| <<post-increment, Post Increment>>               | <<painless-operators-numeric, Numeric>>     | ++          | 1            | left -> right
| <<post-decrement, Post Decrement>>               | <<painless-operators-numeric, Numeric>>     | --          | 1            | left -> right
| <<pre-increment, Pre Increment>>                 | <<painless-operators-numeric, Numeric>>     | ++          | 2            | right -> left
| <<pre-decrement, Pre Decrement>>                 | <<painless-operators-numeric, Numeric>>     | --          | 2            | right -> left
| <<unary-positive, Unary Positive>>               | <<painless-operators-numeric, Numeric>>     | +           | 2            | right -> left
| <<unary-negative, Unary Negative>>               | <<painless-operators-numeric, Numeric>>     | -           | 2            | right -> left
| <<boolean-not, Boolean Not>>                     | <<painless-operators-boolean, Boolean>>     | !           | 2            | right -> left
| <<bitwise-not, Bitwise Not>>                     | <<painless-operators-numeric, Numeric>>     | ~           | 2            | right -> left
| <<cast, Cast>>                                   | <<painless-operators-general, General>>     | ()          | 3            | right -> left
| <<new-instance, New Instance>>                   | <<painless-operators-reference, Reference>> | new ()      | 3            | right -> left
| <<new-array, New Array>>                         | <<painless-operators-array, Array>>         | new         | 3            | right -> left
| <<multiplication, Multiplication>>               | <<painless-operators-numeric, Numeric>>     | *           | 4            | left -> right
| <<division, Division>>                           | <<painless-operators-numeric, Numeric>>     | /           | 4            | left -> right
| <<remainder, Remainder>>                         | <<painless-operators-numeric, Numeric>>     | %           | 4            | left -> right
| <<string-concatenation, String Concatenation>>   | <<painless-operators-reference, Reference>> | +           | 5            | left -> right
| <<addition, Addition>>                           | <<painless-operators-numeric, Numeric>>     | +           | 5            | left -> right
| <<subtraction, Subtraction>>                     | <<painless-operators-numeric, Numeric>>     | -           | 5            | left -> right
| <<left-shift, Left Shift>>                       | <<painless-operators-numeric, Numeric>>     | <<          | 6            | left -> right
| <<right-shift, Right Shift>>                     | <<painless-operators-numeric, Numeric>>     | >>          | 6            | left -> right
| <<unsigned-right-shift, Unsigned Right Shift>>   | <<painless-operators-numeric, Numeric>>     | >>>         | 6            | left -> right
| <<greater-than, Greater Than>>                   | <<painless-operators-boolean, Boolean>>     | >           | 7            | left -> right
| <<greater-than-or-equal, Greater Than Or Equal>> | <<painless-operators-boolean, Boolean>>     | >=          | 7            | left -> right
| <<less-than, Less Than>>                         | <<painless-operators-boolean, Boolean>>     | <           | 7            | left -> right
| <<less-than-or-equal, Less Than Or Equal>>       | <<painless-operators-boolean, Boolean>>     | <=          | 7            | left -> right
| <<instance-of, Instance Of>>                     | <<painless-operators-boolean, Boolean>>     | instanceof  | 8            | left -> right
| <<equality-equals, Equality Equals>>             | <<painless-operators-boolean, Boolean>>     | ==          | 9            | left -> right
| <<equality-not-equals, Equality Not Equals>>     | <<painless-operators-boolean, Boolean>>     | !=          | 9            | left -> right
| <<identity-equals, Identity Equals>>             | <<painless-operators-boolean, Boolean>>     | ===         | 9            | left -> right
| <<identity-not-equals, Identity Not Equals>>     | <<painless-operators-boolean, Boolean>>     | !==         | 9            | left -> right
| <<bitwise-and, Bitwise And>>                     | <<painless-operators-numeric, Numeric>>     | &           | 10           | left -> right
| <<boolean-xor, Boolean Xor>>                     | <<painless-operators-boolean, Boolean>>     | ^           | 11           | left -> right
| <<bitwise-xor, Bitwise Xor>>                     | <<painless-operators-numeric, Numeric>>     | ^           | 11           | left -> right
| <<bitwise-or, Bitwise Or>>                       | <<painless-operators-numeric, Numeric>>     | \|          | 12           | left -> right
| <<boolean-and, Boolean And>>                     | <<painless-operators-boolean, Boolean>>     | &&          | 13           | left -> right
| <<boolean-or, Boolean Or>>                       | <<painless-operators-boolean, Boolean>>     | \|\|        | 14           | left -> right
| <<conditional, Conditional>>                     | <<painless-operators-general, General>>     | ? :         | 15           | right -> left
| <<elvis, Elvis>>                                 | <<painless-operators-general, General>>     | ?:          | 16           | right -> left
| <<assignment, Assignment>>                       | <<painless-operators-general, General>>     | =           | 17           | right -> left
| <<compound-assignment, Compound Assignment>>     | <<painless-operators-general, General>>     | $=          | 17           | right -> left
|====
