[[painless-types]]
=== Types

Types are a classification of data used to describe the properties of values
operated on in expressions and statements. These properties describe what data
the value can represent such as a number, string, or something more complex and
the rules for when a value is operated on.  Types are split into the following
categories: <<primitive-types, primitive types>>,
<<reference-types, reference types>>, and <<dynamic-types, dynamic types>>.

[[primitive-types]]
==== Primitive Types

Primitive types are built directly into the JVM and are allocated to non-heap
memory.  Primitive type values are deep-copied when <<assignment, assigned>>
and when passed into <<method-access, method>> or function as arguments.

Primitive types have a corresponding <<reference-types, reference type>> (also
known as a <<boxing-unboxing, boxed type>>). Any member of the corresponding
<<reference-types, reference type>> can be <<field-access, accessed>> or
<<method-access, called>> by executing the appropriate operation on the
primitive type value. Operations performed in this manner convert (box) the
primitive type value to its corresponding <<reference-types, reference type>>
value at runtime and execute the specified <<field-access, field access>> or
<<method-access, method call>>.

The following primitive types are available:

[horizontal]
`byte`::
8-bit, signed, two's complement integer
* range: [`-128`, `127`]
* default value: `0`
* reference type: `Byte`

`short`::
16-bit, signed, two's complement integer
* range: [`-32768`, `32767`]
* default value: `0`
* reference type: `Short`

`char`::
16-bit, unsigned, Unicode character
* range: [`0`, `65535`]
* default value: `0` or `\u0000`
* reference type: `Character`

`int`::
32-bit, signed, two's complement integer
* range: [`-2^32`, `2^32-1`]
* default value: `0`
* reference type: `Integer`

`long`::
64-bit, signed, two's complement integer
* range: [`-2^64`, `2^64-1`]
* default value: `0`
* reference type: `Long`

`float`::
32-bit, signed, single-precision, IEEE 754 floating point number
* default value: `0.0`
* reference type: `Float`

`double`::
64-bit, signed, double-precision, IEEE 754 floating point number
* default value: `0.0`
* reference type: `Double`

`boolean`::
logical quanity with two possible values of `true` and `false`
* default value: `false`
* reference type: `Boolean`

*Examples*

* Primitive types used in <<declaration, declaration>> and
<<assignment, assignment>>.
+
[source,Painless]
----
<1> int i = 1;
<2> double d;
<3> boolean b = true;
----
+
<1> declare `int i`; assign `1` to `i`
<2> declare `double d`
<3> declare `boolean b`; assign `true` to `b`
+
* Method call on a primitive type from the corresponding
<<reference-types, reference type>>.
+
[source,Painless]
----
<1> int i = 1;
<2> i.toString();
----
+
<1> declare `int i`; assign `1` to `i`
<2> implicitly convert (box) `i` to the reference type `Integer`;
invoke the `Integer` method `toString` on the converted (boxed) value

[[reference-types]]
==== Reference Types

<<reference-types, Reference type>> values are shallow-copied when assigned.

Reference types are similar to Java classes and can contain multiple pieces
known as _members_. However, reference types do not support access modifiers.
You allocate reference type instances on the heap using the `new` operator.

Reference types can have both static and non-static members:

* Static members are shared by all instances of the same reference type and
can be accessed without allocating an instance of the reference type. For
example `Integer.MAX_VALUE`.
* Non-static members are specific to an instance of the reference type
and can only be accessed through the allocated instance.

The default value for a reference type is `null`, indicating that no memory has
been allocated for it. When you assign `null` to a reference type, its previous
value is discarded and garbage collected in accordance with the Java memory
model as long as there are no other references to that value.

A reference type can contain:

* Zero to many primitive types. Primitive type members can be static or
non-static and read-only or read-write.
* Zero to many reference types. Reference type members can be static or
non-static and read-only or read-write.
* Methods that call an internal function to return a value and/or manipulate
the primitive or reference type members. Method members can be static or
non-static.
* Constructors that call an internal function to return a newly-allocated
reference type instance. Constructors are non-static methods that can
optionally manipulate the primitive and reference type members.

Reference types support a Java-style inheritance model. Consider types A and B.
Type A is considered to be a parent of B, and B a child of A, if B inherits
(is able to access as its own) all of A's fields and methods. Type B is
considered a descendant of A if there exists a recursive parent-child
relationship from B to A with none to many types in between. In this case, B
inherits all of A's fields and methods along with all of the fields and
methods of the types in between. Type B is also considered to be a type A
in both relationships.

For the complete list of Painless reference types and their supported methods,
see the https://www.elastic.co/guide/en/elasticsearch/reference/current/painless-api-reference.html[Painless API Reference].

For more information about working with reference types, see
<<field-access, Accessing Fields>> and <<method-access, Calling Methods>>.

*Examples:*
[source,Java]
----
ArrayList al = new ArrayList();  // Declare variable al as an ArrayList and
                                 //   set it to a newly allocated ArrayList
List l = new ArrayList();        // Declare variable l as a List and set
                                 //   it to a newly allocated ArrayList, which is
                                 //   allowed because ArrayList inherits from List
Map m;                           // Declare variable m as a Map and set it
                                 //   to the default value of null
----

Directly accessing static pieces of a reference type.

[source,Java]
----
Integer.MAX_VALUE      // a static field access
Long.parseLong("123L") // a static function call
----

[[dynamic-types]]
==== Dynamic Types

Painless supports one dynamic type: `def`.  The `def` type can represent any
primitive or reference type. When you use the `def` type, it mimics the exact
behavior of whatever type it represents at runtime. The default value for the
def type is `null.`

Internally, if the `def` type represents a primitive type, it is converted to the
corresponding reference type. It still behaves like the primitive type, however,
including within the casting model. The `def` type can be assigned to different
types during the course of script execution.

IMPORTANT: Because a `def` type variable can be assigned to different types
during execution, type conversion errors that occur when using the `def` type
happen at runtime.

Using the `def` type can have a slight impact on performance. If performance is
critical, it's better to declare static types.

*Examples:*
[source,Java]
----
def x = 1;               // Declare def variable x and set it to the
                         //   literal int 1
def l = new ArrayList(); // Declare def variable l and set it a newly
                         //   allocated ArrayList
----

[[string-type]]
==== String Type

A `String` is a specialized reference type that is immutable and does not have
to be explicitly allocated. You can directly assign to a `String` without first
allocating it with the `new` keyword. (Strings can be allocated with the `new`
keyword, but it's not required.)

When assigning a value to a `String`, you must enclose the text in single or
double quotes. Strings are allocated according to the standard Java Memory Model.
The default value for a `String` is `null.`

*Examples:*
[source,Java]
----
String r = "some text";             // Declare String r and set it to the
                                    //   String "some text"
String s = 'some text';             // Declare String s and set it to the
                                    //   String 'some text'
String t = new String("some text"); // Declare String t and set it to the
                                    //   String "some text"
String u;                           // Declare String u and set it to the
                                    //   default value null
----

[[void-type]]
==== void Type

The `void` type represents the concept of no type. In Painless, `void` declares
that a function has no return value.

[[array-type]]
==== Array Type

Arrays contain a series of elements of the same type that can be allocated
simultaneously. Painless supports both single and multi-dimensional arrays for
all types except void (including `def`).

You declare an array by specifying a type followed by a series of empty brackets,
where each set of brackets represents a dimension. Declared arrays have a default
value of `null` and are themselves a reference type.

To allocate an array, you use the `new` keyword followed by the type and a
set of brackets for each dimension. You can explicitly define the size of each dimension by specifying an expression within the brackets, or initialize each
dimension with the desired number of values. The allocated size of each
dimension is its permanent size.

To initialize an array, specify the values you want to initialize
each dimension with as a comma-separated list of expressions enclosed in braces.
For example, `new int[] {1, 2, 3}` creates a one-dimensional `int` array with a
size of 3 and the values 1, 2, and 3.

When you initialize an array, the order of the expressions is maintained. Each expression used as part of the initialization is converted to the
array's type. An error occurs if the types do not match.

*Grammar:*
[source,ANTLR4]
----
declare_array: TYPE ('[' ']')+;

array_initialization: 'new' TYPE '[' ']' '{' expression (',' expression) '}'
                    | 'new' TYPE '[' ']' '{' '}';
----

*Examples:*
[source,Java]
----
int[] x = new int[5];          // Declare int array x and assign it a newly
                               //   allocated int array with a size of 5
def[][] y = new def[5][5];     // Declare the 2-dimensional def array y and
                               //   assign it a newly allocated 2-dimensional
                               //   array where both dimensions have a size of 5
int[] x = new int[] {1, 2, 3}; // Declare int array x and set it to an int
                               //   array with values 1, 2, 3 and a size of 3
int i = 1;
long l = 2L;
float f = 3.0F;
double d = 4.0;
String s = "5";
def[] da = new def[] {i, l, f*d, s}; // Declare def array da and set it to
                                     // a def array with a size of 4 and the
                                     // values i, l, f*d, and s
----
