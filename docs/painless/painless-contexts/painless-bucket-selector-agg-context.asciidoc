
[[painless-bucket-selector-agg-context]]
=== Bucket Selector aggregation context

Use a Painless script in an
{ref}/search-aggregations-pipeline-bucket-selector-aggregation.html[`bucket_selector` aggregation]
to determine if a bucket should be retained or filtered out.

==== Variables

`params` (`Map`, read-only)::
        User-defined parameters passed in as part of the query. The parameters
        include values defined as part of the `buckets_path`.

==== Return

boolean::
        True if the the bucket should be retained, false if the bucket should be filtered out.

==== API


To run this example, first follow the steps in <<painless-context-examples, context examples>>.

The painless context in a `bucket_selector` aggregation provides a `params` map.  This map contains both
user-specified custom values, as well as the values from other aggregations specified in the `buckets_path`
property.

For our example, we are going to find the `max` of each bucket, add in a user-defined "base" value, then keep all
the buckets that are greater than `10`.

Unlike some other aggregation contexts, the `bucket_selector` context must return a boolean `true`/`false`.

[source,Painless]
--------------------------------------------------
params.max + params.base_cost > 10
--------------------------------------------------

Note how all the values are being pulled from the `params` map. Also note how the script is in the form of an expression,
which returns `true`/`false`.  In context, the aggregation looks like this:

[source,js]
--------------------------------------------------
GET /seats/_search
{
  "size": 0,
  "aggs": {
    "theatres": {
      "terms": {
        "field": "theatre",
        "size": 10
      },
      "aggs": {
        "max_cost": {
          "max": {
            "field": "cost"
          }
        },
        "filtering_agg": {
          "bucket_selector": {
            "buckets_path": { <1>
              "max": "max_cost"
            },
            "script": {
              "params": {
                "base_cost": 5 <2>
              },
              "source": "params.max + params.base_cost > 10"
            }
          }
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TEST[setup:seats]
<1> the `buckets_path` points to the max aggregations (`max_cost`) and adds `max` variables
to the `params` map
<2> the user-specified `base_cost` is added in the script's `params` section, which is also added to the
`params` variable for use in the script.