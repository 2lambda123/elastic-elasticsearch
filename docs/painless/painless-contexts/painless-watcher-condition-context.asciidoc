[[painless-watcher-condition-context]]
=== Watcher condition context

include::painless-watcher-context-variables.asciidoc[]

==== Watch condition

Use a Painless script as a {xpack-ref}/condition-script.html[watcher condition]
to test if a watch or a particular action should be executed. The condition
will return a `boolean` value to determine if the condition was met. A
condition can be used to short circuit an entire watch or within an action
to determine execution of said action.

*Return*

`boolean`::
        Expects `true` if the condition is met, and `false` otherwise.

*API*

The standard <<painless-api-reference, Painless API>> is available.

The first example is a condition for the watch itself. This determines if any
of the actions in the watch are executed. The example aggregates the total sold
seats for each play in the data set. The condition validates that there is at
least one play that has sold under $15,000 or over $50,000.

[source,Painless]
----
POST _watcher/watch/_execute
{
  "watch" : {
    "trigger" : { "schedule" : { "interval" : "24h" } },
    "input" : {
      "search" : {
        "request" : {
          "indices" : [ "seats" ],
          "body" : {
            "query" : {
              "term": { "sold": "true"}
            },
            "aggs" : {
              "theatres" : {
                "terms" : { "field" : "play" },
                "aggs" : {
                  "money" : {
                    "sum": { "field" : "cost" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "condition" : {
      "script" :
      """
        return ctx.payload.aggregations.theatres.buckets.stream()       <1>
          .filter(t -> t.money.value < 15000 || t.money.value > 50000)  <2>
          .collect(Collectors.toList())                                 <3>
          .size() > 0                                                   <4>
      """
    },
    "actions" : {
      "my_log" : {
        "logging" : {
          "text" : "The output of the search was : {{ctx.payload.aggregations.theatres.buckets}}"
        }
      }
    }
  }
}
----

<1> The Java Stream API is used in the condition. This API allows manipulation of
the elements of the list in a pipeline.
<2> A Stream Filter is used to remove items that do not meet the criteria within the
filter.
<3> The collector reduces the stream back into a java.util.List
<4> The size of the list is is validated, and if it returns greater than zero entries,
the condition passes and is executed.

==== Action condition

The next example is a condition on an action. This determines if a distinct action
in the watch are executed. The example aggregates the total sold seats for each play
in the data set. The action condition validates that there is at least one play that
has sold over $50,000.

[source,Painless]
----
POST _watcher/watch/_execute
{
  "watch" : {
    "trigger" : { "schedule" : { "interval" : "24h" } },
    "input" : {
      "search" : {
        "request" : {
          "indices" : [ "seats" ],
          "body" : {
            "query" : {
              "term": { "sold": "true"}
            },
            "aggs" : {
              "theatres" : {
                "terms" : { "field" : "play" },
                "aggs" : {
                  "money" : {
                    "sum": { "field" : "cost" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "actions" : {
      "my_log" : {
        "condition": {                                                <1>
          "script" :
          """
            return ctx.payload.aggregations.theatres.buckets.stream()
            .filter(t -> t.money.value > 50000)                       <2>
            .collect(Collectors.toList())
            .size() > 0
          """
        },
        "logging" : {
          "text" : "At least one play has grossed over $50,000: {{ctx.payload.aggregations.theatres.buckets}}"
        }
      }
    }
  }
}
----

This example uses a nearly identical condition as the previous example. The
differences below are subtle and are worth calling out.

<1> The location of the condition is no longer at the top level, but is within
an individual action.
<2> The filter only checks there is any play has sold over $50,000.

include::painless-watcher-context-example.asciidoc[]
