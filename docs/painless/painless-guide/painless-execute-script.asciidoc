[[painless-execute-api]]
=== Painless execute API
experimental::[]

The Painless execute API runs a script and returns a result.

_Contexts_ control how scripts are executed, what variables are available at
runtime, and what the return type is.

[[painless-execute-test]]
==== Test context
The `painless_test` context runs scripts without additional parameters. The only
variable that is available is `params`, which can be used to access user defined
values. The result of the script is always converted to a string.

[[painless-execute-api-parameters]]
===== Parameters
`script`:: (Required, object)
The Painless script to execute.

`context`:: (Optional, string)
The context that the script should run in. Defaults to `painless_test` if no
context is specified.

`context_setup`:: (Optional, object)
Additional parameters for the `context`.

`params`:: (`Map`, read-only)
User-defined parameters passed in as part of the query.

===== Request

[source,console]
----------------------------------------------------------------
POST /_scripts/painless/_execute
{
  "script": {
    "source": "params.count / params.total",
    "params": {
      "count": 100.0,
      "total": 1000.0
    }
  }
}
----------------------------------------------------------------

===== Response

[source,console-result]
--------------------------------------------------
{
  "result": "0.1"
}
--------------------------------------------------

[[painless-execute-filter-context]]
==== Filter context
The `filter` context treats scripts as if they were run inside a `script` query.
For testing purposes, a document must be provided so that it will be temporarily
indexed in-memory and is accessible from the script. More precisely, the
`_source`, stored fields and doc values of such a document are available to the
script being tested.

[[painless-filter-context-parameters]]
===== Parameters

`context`:: (Required, string)
The field context that the script should run in. Set this parameter to `filter` to use
this context.

`context_setup`:: (Required, object)
Additional parameters for the `context`.
+
.Properties of `context_setup`
[%collapsible%open]
====
`document`:: (Required, string)
Document that's temporarily indexed in-memory and accessible from the script.

`index`:: (Required, string)
Index containing a mapping that's compatible with the indexed document.
====

===== Request

[source,console]
----
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "field": {
        "type": "keyword"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "doc['field'].value.length() <= params.max_length",
    "params": {
      "max_length": 4
    }
  },
  "context": "filter",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "field": "four"
    }
  }
}
----

===== Response

[source,console-result]
----
{
  "result": true
}
----

[[painless-execute-core-context]]
==== Score context
The `score` context treats scripts as if they were run inside a `script_score`
function in a `function_score` query.

[[painless-score-context-parameters]]
===== Parameters

`context`:: (Required, string)
The field context that the script should run in. Set this parameter to `score` to use
this context.

`context_setup`:: (Required, object)
Additional parameters for the `context`.
+
.Properties of `context_setup`
[%collapsible%open]
====
`document`:: (Required, string)
Document that's temporarily indexed in-memory and accessible from the script.

`index`:: (Required, string)
Index containing a mapping that's compatible with the indexed document.
====

`query`:: (Optional)
If `_score` is used in the script then a query can specify that it will be used to compute a score.

===== Request

[source,console]
----
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "field": {
        "type": "keyword"
      },
      "rank": {
        "type": "long"
      }
    }
  }
}


POST /_scripts/painless/_execute
{
  "script": {
    "source": "doc['rank'].value / params.max_rank",
    "params": {
      "max_rank": 5.0
    }
  },
  "context": "score",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "rank": 4
    }
  }
}
----

===== Response

[source,console-result]
----
{
  "result": 0.8
}
----

[[painless-execute-runtime-context]]
==== Runtime field context
The <<painless-runtime-fields-context,runtime field context>> runs a script used
for a runtime field and returns results in doc-values order.

Although runtime fields have their own context within the Painless execute API, you
indicate the context for a runtime field based on the data type.

NOTE: Result ordering in the runtime field context is not guaranteed.

[[painless-execute-api-runtime-parameters]]
===== Parameters
`script`:: (Required, object)
The Painless script to execute.
+
.Properties of `script`
--
include::../painless-contexts/painless-runtime-fields-context.asciidoc[tag=runtime-field-emit]
--

`context`:: (Required, string)
The runtime field context that the script should run in.
+
.Properties of `context`
[%collapsible%open]
====
`boolean_field`:: 
Emits a `boolean` data type and returns a sorted list of `boolean` values.

`date_field`:: 
Emits a `long` data type and returns a sorted list of `long` values.

`double_field`::
Emits a `long` data type and returns a sorted list of `double` values.

`geo_point_field`::
Emits a `long` data type and returns a sorted list of `double` values.

`ip_field`::
Emits a `string` data type and returns a sorted list of `string` values.

`keyword_field`::
Emits a `string` data type and returns a sorted list of `string` values.

`long_field`::
Emits a `long` data type and returns a sorted list of `long` values.
====

`context_setup`:: (Required, object)
Additional parameters for the `context`.
+
.Properties of `context_setup`
[%collapsible%open]
====
`document`:: (Required, string)
Document that's temporarily indexed in-memory and accessible from the script.

`index`:: (Required, string)
Index containing a mapping that's compatible with the indexed document.
====

`params`:: (`Map`, read-only)
User-defined parameters passed in as part of the query.

[[painless-runtime-boolean-request]]
===== Request (boolean_field)

[source,console]
----
PUT /my-index-boolean
{
  "mappings": {
    "properties": {
      "b": {
        "type": "boolean"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(params['p']); emit(doc['b'].value);",
    "params": {
      "p": true
    }
  },
  "context": "boolean_field",
  "context_setup": {
    "index": "my-index-boolean",
    "document": {
      "b": false
    }
  }
}
----

[[painless-runtime-boolean-response]]
===== Response (boolean_field)

[source,console-result]
----
{
  "result": [
    false,
    true
  ]
}
----

* date_field
+
[source,console]
----------------------------------------------------------------
PUT /my-index-date
{
  "mappings": {
    "properties": {
      "d": {
        "type": "date"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(doc['d'].value.toInstant().toEpochMilli());"
  },
  "context": "date_field",
  "context_setup": {
    "index": "my-index-date",
    "document": {
      "d": 2075885659000
    }
  }
}
----------------------------------------------------------------
+
Response:
+
[source,console-result]
--------------------------------------------------
{
  "result": [
    2075885659000
  ]
}
--------------------------------------------------
+
* double_field
+
[source,console]
----------------------------------------------------------------
PUT /my-index-double
{
  "mappings": {
    "properties": {
      "d": {
        "type": "double"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(doc['d'][0] + doc['d'][1])"
  },
  "context": "double_field",
  "context_setup": {
    "index": "my-index-double",
    "document": {
      "d": [2.0, 1.0]
    }
  }
}
----------------------------------------------------------------
+
Response:
+
[source,console-result]
--------------------------------------------------
{
  "result": [ 3.0 ]
}
--------------------------------------------------
+
* geo_point_field
+
[source,console]
----------------------------------------------------------------
PUT /my-index-geo-point
{
  "mappings": {
    "properties": {
      "g": {
        "type": "geo_point"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(doc['g'].value.lat + 1.2, doc['g'].value.lon - 2.3)"
  },
  "context": "geo_point_field",
  "context_setup": {
    "index": "my-index-geo-point",
    "document": {
      "g": "71.34,85.92"
    }
  }
}
----------------------------------------------------------------
+
Response:
+
[source,console-result]
--------------------------------------------------
{
  "result": [
    7434037857170656882
  ]
}
--------------------------------------------------
+
* ip_field
+
[source,console]
----------------------------------------------------------------
PUT /my-index-ip
{
  "mappings": {
    "properties": {
      "i": {
        "type": "ip"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(doc['i'].value)"
  },
  "context": "ip_field",
  "context_setup": {
    "index": "my-index-ip",
    "document": {
      "i": "127.0.0.1"
    }
  }
}
----------------------------------------------------------------
+
Response:
+
[source,console-result]
--------------------------------------------------
{
  "result": [
    "AAAAAAAAAAAAAP//fwAAAQ=="
  ]
}
--------------------------------------------------
+
* keyword_field
+
[source,console]
----------------------------------------------------------------
PUT /my-index-keyword
{
  "mappings": {
    "properties": {
      "k": {
        "type": "keyword"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(doc['k'].value + '_value'); emit('0'); emit('word');"
  },
  "context": "keyword_field",
  "context_setup": {
    "index": "my-index-keyword",
    "document": {
      "k": "my_keyword"
    }
  }
}
----------------------------------------------------------------
+
Response:
+
[source,console-result]
--------------------------------------------------
{
  "result": [
    "0",
    "my_keyword_value",
    "word"
  ]
}
--------------------------------------------------
+
* long_field
+
[source,console]
----------------------------------------------------------------
PUT /my-index-long
{
  "mappings": {
    "properties": {
      "l": {
        "type": "long"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(doc['l'][0] + doc['l'][1])"
  },
  "context": "long_field",
  "context_setup": {
    "index": "my-index-long",
    "document": {
      "l": [2, 1]
    }
  }
}
----------------------------------------------------------------
+
Response:
+
[source,console-result]
--------------------------------------------------
{
  "result": [
    3
  ]
}
--------------------------------------------------
