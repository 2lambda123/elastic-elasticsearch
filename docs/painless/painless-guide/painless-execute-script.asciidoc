[[painless-execute-api]]
=== Painless execute API
experimental::[]

The Painless execute API runs a script and returns a result.

[[painless-execute-api-request]]
==== {api-request-title}
`POST /_scripts/painless/_execute`

[[painless-execute-api-desc]]
==== {api-description-title}
This API is useful for building and testing scripts with very few dependencies,
especially if you don't have permissions to write documents on a cluster. The
API uses several _contexts_, which control how scripts are executed, what
variables are available at runtime, and what the return type is.

Each context requires a script, but additional parameters depend on the context
you're using for that script.

[[painless-execute-api-request-body]]
==== {api-request-body-title}
`script`:: (Required, object)
The Painless script to execute.
+
.Properties of `script`
--
include::../painless-contexts/painless-runtime-fields-context.asciidoc[tag=runtime-field-emit]
--

`context`:: (Optional, string)
The context that the script should run in. Defaults to `painless_test` if no
context is specified.
+
.Properties of `context`
[%collapsible%open]
====
`painless_test`::
The default context if no other context is specified.

`filter`::
Treats scripts as if they were run inside a `script` query.

`score`::
Treats scripts as if they were run inside a `script_score` function in a
`function_score` query.

[[painless-execute-runtime-context]]
.Runtime fields context
[%collapsible%open]
The following contexts are specific to runtime fields.

NOTE: Result ordering in the runtime field context is not guaranteed.

See the <<painless-execute-runtime-field-context,runtime field context>>
examples for how to use these different contexts.
=====
`boolean_field`:: 
Emits a `boolean` data type and returns a sorted list of `boolean` values.

`date_field`:: 
Emits a `long` data type and returns a sorted list of `long` values.

`double_field`::
Emits a `long` data type and returns a sorted list of `double` values.

`geo_point_field`::
Emits a `long` data type and returns a sorted list of `double` values.

`ip_field`::
Emits a `string` data type and returns a sorted list of `string` values. See
<<painless-runtime-ip-request,ip_field>>.

`keyword_field`::
Emits a `string` data type and returns a sorted list of `string` values. See
<<painless-runtime-keyword-request,keyword_field>>.

`long_field`::
Emits a `long` data type and returns a sorted list of `long` values. See
<<painless-runtime-long-request,long_field>>.
=====

====

`context_setup`:: (Required, object)
Additional parameters for the `context`.
+
NOTE: This parameter is required for all contexts except `painless_test`,
which is the default if no value is provided for `context`.
+
.Properties of `context_setup`
[%collapsible%open]
====
`document`:: (Required, string)
Document that's temporarily indexed in-memory and accessible from the script.

`index`:: (Required, string)
Index containing a mapping that's compatible with the indexed document.
====

`params`:: (`Map`, read-only)
User-defined parameters passed in as part of the query.

`query`:: (Optional, object)
NOTE: This parameter only applies when `score` is specified as the script 
`context`.
+
Use this parameter to specify a query for computing a score. Besides deciding
whether or not the document matches, the 
{ref}/query-filter-context.html#query-context[query clause] also calculates a 
relevance score in the `_score` metadata field.

==== {api-examples-title}

[[painless-execute-test]]
===== Test context
The `painless_test` context runs scripts without additional parameters. The only
variable that is available is `params`, which can be used to access user defined
values. The result of the script is always converted to a string.

Because the default context is `painless_test`, you don't need to specify the
`context` or `context_setup`.

====== Request

[source,console]
----
POST /_scripts/painless/_execute
{
  "script": {
    "source": "params.count / params.total",
    "params": {
      "count": 100.0,
      "total": 1000.0
    }
  }
}
----

====== Response

[source,console-result]
----
{
  "result": "0.1"
}
----

[[painless-execute-filter-context]]
===== Filter context
The `filter` context treats scripts as if they were run inside a `script` query.
For testing purposes, a document must be provided so that it will be temporarily
indexed in-memory and is accessible from the script. More precisely, the
`_source`, stored fields and doc values of such a document are available to the
script being tested.

====== Request

[source,console]
----
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "field": {
        "type": "keyword"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "doc['field'].value.length() <= params.max_length",
    "params": {
      "max_length": 4
    }
  },
  "context": "filter",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "field": "four"
    }
  }
}
----

====== Response

[source,console-result]
----
{
  "result": true
}
----

[[painless-execute-core-context]]
===== Score context
The `score` context treats scripts as if they were run inside a `script_score`
function in a `function_score` query.

===== Request

[source,console]
----
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "field": {
        "type": "keyword"
      },
      "rank": {
        "type": "long"
      }
    }
  }
}


POST /_scripts/painless/_execute
{
  "script": {
    "source": "doc['rank'].value / params.max_rank",
    "params": {
      "max_rank": 5.0
    }
  },
  "context": "score",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "rank": 4
    }
  }
}
----

===== Response

[source,console-result]
----
{
  "result": 0.8
}
----

[[painless-execute-runtime-field-context]]
===== Runtime field context
The <<painless-runtime-fields-context,runtime field context>> runs a script used
for a runtime field and returns results in doc-values order.

Although runtime fields have their own context within the Painless execute API,
you indicate the context for a runtime field based on the data type.

[[painless-runtime-boolean-request]]
====== `boolean_field` request

[source,console]
----
PUT /my-index-boolean
{
  "mappings": {
    "properties": {
      "b": {
        "type": "boolean"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(params['p']); emit(doc['b'].value);",
    "params": {
      "p": true
    }
  },
  "context": "boolean_field",
  "context_setup": {
    "index": "my-index-boolean",
    "document": {
      "b": false
    }
  }
}
----

[[painless-runtime-boolean-response]]
===== `boolean_field` response

[source,console-result]
----
{
  "result": [
    false,
    true
  ]
}
----

* date_field
+
[source,console]
----------------------------------------------------------------
PUT /my-index-date
{
  "mappings": {
    "properties": {
      "d": {
        "type": "date"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(doc['d'].value.toInstant().toEpochMilli());"
  },
  "context": "date_field",
  "context_setup": {
    "index": "my-index-date",
    "document": {
      "d": 2075885659000
    }
  }
}
----------------------------------------------------------------
+
Response:
+
[source,console-result]
--------------------------------------------------
{
  "result": [
    2075885659000
  ]
}
--------------------------------------------------
+
* double_field
+
[source,console]
----------------------------------------------------------------
PUT /my-index-double
{
  "mappings": {
    "properties": {
      "d": {
        "type": "double"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(doc['d'][0] + doc['d'][1])"
  },
  "context": "double_field",
  "context_setup": {
    "index": "my-index-double",
    "document": {
      "d": [2.0, 1.0]
    }
  }
}
----------------------------------------------------------------
+
Response:
+
[source,console-result]
--------------------------------------------------
{
  "result": [ 3.0 ]
}
--------------------------------------------------
+
* geo_point_field
+
[source,console]
----------------------------------------------------------------
PUT /my-index-geo-point
{
  "mappings": {
    "properties": {
      "g": {
        "type": "geo_point"
      }
    }
  }
}

POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(doc['g'].value.lat + 1.2, doc['g'].value.lon - 2.3)"
  },
  "context": "geo_point_field",
  "context_setup": {
    "index": "my-index-geo-point",
    "document": {
      "g": "71.34,85.92"
    }
  }
}
----------------------------------------------------------------
+
Response:
+
[source,console-result]
--------------------------------------------------
{
  "result": [
    7434037857170656882
  ]
}
--------------------------------------------------

[[painless-runtime-ip-request]]
===== `ip_field` request
The `ip_field` context is useful for data that includes properly formatted IP
addresses. For example, let's say you have a `message` field from an Apache log.
This field contains an IP address, but also other data that you don't need. 

You can add the `message` field to your index mappings as a `wildcard` to accept
pretty much any data you want to put in that field.

[source,console]
----
PUT /my-index-000001/
{
  "mappings": {
    "properties": {
      "message": {
        "type": "wildcard"
      }
    }
  }
}
----

You can then define a runtime script with a grok pattern that extracts
structured fields out of the `message` field.

The script matches on the `%{COMMONAPACHELOG}` log pattern, which understands
the structure of Apache logs. If the pattern matches, the script emits the
value matching the IP address. If the pattern doesnâ€™t match
(`clientip != null`), the script just returns the field value without crashing.

[source,console]
----
POST /_scripts/painless/_execute
{
  "script": {
    "source": """
        String clientip=grok('%{COMMONAPACHELOG}').extract(doc["message"].value)?.clientip;
        if (clientip != null) emit(clientip); 
      """
  },
  "context": "ip_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "message": "40.135.0.0 - - [30/Apr/2020:14:30:17 -0500] \"GET /images/hm_bg.jpg HTTP/1.0\" 200 24736"
    }
  }
}
----
// TEST[continued]

[[painless-runtime-ip-response]]
===== `ip_field` response
The response includes only the IP address, ignoring all of the other data in the
`message` field.

[source,console-result]
----
{
  "result" : [
    "40.135.0.0"
  ]
}
----

[[painless-runtime-keyword-request]]
===== `keyword_field` request
The following request adds a `@timestamp` field of type `date` to the index
mappings:

[source,console]
----
PUT /my-index-000001
{
  "mappings": {
    "properties": {
      "@timestamp": {
        "type": "date"
      }
    }
  }
}
----

If you have a timestamp but want to return the equivalent day of the week, you
can create a script in the `keyword_field` context:

[source,console]
----
POST /_scripts/painless/_execute
{
  "script": {
    "source": "emit(doc['@timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ROOT));"
  },
  "context": "keyword_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "@timestamp": "2020-04-30T14:31:43-05:00"
    }
  }
}
----
// TEST[continued]

[[painless-runtime-keyword-response]]
===== `keyword_field` response
The script operates on the value provided for the `@timestamp` field to
calculate the day of the week:

[source,console-result]
----
{
  "result" : [
    "Thursday"
  ]
}
----

[[painless-runtime-long-request]]
===== `long_field` request
The following request adds a `message` object to the mappings with two fields,
both of type `long`. 

[source,console]
----
PUT /my-index-000001/
{
  "mappings": {
    "properties": {
      "measures": {
        "properties": {
          "start": {
            "type": "long"
          },
          "end": {
           "type": "long" 
          }
        }
      }
    }
  }
}
----

You can then define a script that assigns values to the `start` and `end` fields
and operate on them. The following script extracts the value for the `end`
field from the `measures` object and subtracts it from the `start` field.

[source,console]
----
POST /_scripts/painless/_execute
{
  "script": {
    "source": """
          emit(doc['measures.end'].value - doc['measures.start'].value);
          """
  },
  "context": "long_field",
  "context_setup": {
    "index": "my-index-000001",
    "document": {
      "measures": {
        "voltage": "4.0",
        "start": "400",
        "end": "8625309"
      }
    }
  }
}
----
// TEST [continued]

[[painless-runtime-long-response]]
===== `long_field` response
The response includes the calculated value from the script valuation.

[source,console-result]
----
{
  "result" : [
    8624909
  ]
}
----