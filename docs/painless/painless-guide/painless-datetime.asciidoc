[[painless-datetime]]
=== Using Datetime in Painless

==== Datetime API

Datetimes in Painless use the standard Java libraries and are available through
the Painless <<painless-api-reference-shared, Shared API>>. Most of the classes
from the following Java packages are available to use in Painless scripts:

* <<painless-api-reference-shared-java-time, java.time>>
* <<painless-api-reference-shared-java-time-chrono, java.time.chrono>>
* <<painless-api-reference-shared-java-time-format, java.time.format>>
* <<painless-api-reference-shared-java-time-temporal, java.time.temporal>>
* <<painless-api-reference-shared-java-time-zone, java.time.zone>>

==== Datetime Representation

Datetimes in Painless are most commonly represented as a
<<primitive-types, long>>, a <<string-type, String>>, or a
<<painless-api-reference-shared-ZonedDateTime, ZonedDateTime>>.

long:: represents a datetime as the number of milliseconds or nanoseconds since
epoch (1970-01-01T00:00:00Z)
String:: represents a datetime as a sequence of characters defined by a
well-known standard such as https://en.wikipedia.org/wiki/ISO_8601[ISO 8601] or
defined by the source of input in a custom way
ZonedDateTime:: a <<reference-types, reference type>> (object) that contains an
internal representation of a datetime and provides numerous
<<painless-api-reference-shared-ZonedDateTime, methods>> for
modification and comparison

A typical pattern in a script is to convert a long or String representation of
a datetime to a ZonedDateTime representation, modify, or compare the
ZonedDateTime representation, and then format it back to a long or String
representation for storage or as a returned result depending on the script's
objective(s).

==== Datetime Parsing and Formatting

Switching between different representations of datetimes is often necessary to
achieve a script's objective(s). Datetime parsing is a switch from a long
or String to a ZonedDateTime, and datetime formatting is a switch from a
ZonedDateTime to a long or a String.

A <<painless-api-reference-shared-DateTimeFormatter, DateTimeFormatter>> is a
<<reference-types, reference type>> (object) that defines the allowed sequence
of characters for a String representation of a datetime. Switching of datetime
representations between a String and a ZonedDateTime and vice versa often
requires a DateTimeFormatter. For more information about how to use a
DateTimeFormatter see the
{java11-javadoc}/java.base/java/time/format/DateTimeFormatter.html[Java documentation].

===== Datetime Parsing Examples

* parse from a long (milliseconds)
+
[source,Painless]
----
long milliSinceEpoch = 434931330000L;
Instant instant = Instant.ofEpochMilli(milliSinceEpoch);
ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, ZoneOffset.UTC);
----
+
* parse from a String (ISO 1806)
+
[source,Painless]
----
String datetime = '1983-10-13T22:15:30Z';
ZonedDateTime zdt = ZonedDateTime.parse(datetime);
----
Note the parse method uses ISO 1806 by default.
+
* parse from a String (RFC 1123)
+
[source,Painless]
----
String datetime = 'Thu, 13 Oct 1983 22:15:30 GMT';
ZonedDateTime zdt = ZonedDateTime.parse(datetime,
        DateTimeFormatter.RFC_1123_DATE_TIME);
----
Note the specification of a built-in DateTimeFormatter.
+
* parse from a String (custom)
+
[source,Painless]
----
String datetime = 'custom y 1983 m 10 d 13 22:15:30 Z';
DateTimeFormatter dtf = DateTimeFormatter.ofPattern(
        "'custom' 'y' yyyy 'm' MM 'd' dd HH:mm:ss VV");
ZonedDateTime zdt = ZonedDateTime.parse(datetime, dtf);
----
Note the specification of a custom DateTimeFormatter.
+
* parse from individual pieces
+
[source,Painless]
----
int year = 1983;
int month = 10;
int day = 13;
int hour = 22;
int minutes = 15;
int seconds = 30;
int nanos = 0;
String tz = 'Z';
ZonedDateTime zdt = ZonedDateTime.of(
        year, month, day, hour, minutes, seconds, nanos, ZoneId.of(tz));
----

===== Datetime Formatting Examples

* format to a long (milliseconds)
+
[source,Painless]
----
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneOffset.UTC);
long milliSinceEpoch = zdt.toInstant().toEpochMilli();
----
+
* format to a String (ISO 1806)
+
[source,Painless]
----
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneOffset.UTC);
String datetime = zdt.format(DateTimeFormatter.ISO_INSTANT);
----
Note the specification of a built-in DateTimeFormatter.
+
* format to a String (custom)
+
[source,Painless]
----
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneOffset.UTC);
DateTimeFormatter dtf = DateTimeFormatter.ofPattern(
        "'date:' yyyy/MM/dd 'time:' HH:mm:ss");
String datetime = zdt.format(dtf);
----
Note the specification of a custom DateTimeFormatter.

==== Datetime Modification

<<painless-api-reference-shared-ZonedDateTime, ZonedDateTime>> has numerous
methods to add and subtract different sets of time units or set a time unit to
an specific number. Note these methods do not modify the existing
ZonedDateTime, but rather return a new one that requires assignment or
immediate use.

*Examples*

* Add days to a ZonedDateTime
+
[source,Painless]
----
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneOffset.UTC);
ZonedDateTime updatedZdt = zdt.plusDays(3);
----
+
* Subtract minutes from a ZonedDateTime
+
[source,Painless]
----
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneOffset.UTC);
ZonedDateTime updatedZdt = zdt.minusMinutes(125);
----
+
* Set the year on a ZonedDateTime
+
[source,Painless]
----
ZonedDateTime zdt =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 0, ZoneOffset.UTC);
ZonedDateTime updatedZdt = zdt.withYear(1976);
----

==== Difference Between ZonedDateTimes

Use <<painless-api-reference-shared-ChronoUnit, ChronoUnit>> to calculate the
difference between two
<<painless-api-reference-shared-ZonedDateTime, ZonedDateTime>>s for a specific
time unit.

*Examples*

* Find the difference in milliseconds between two ZonedDateTimes
+
[source,Painless]
----
ZonedDateTime zdt1 =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 11000000, ZoneOffset.UTC);
ZonedDateTime zdt2 =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 35, 0, ZoneOffset.UTC);
long differenceInMillis = ChronoUnit.MILLIS.between(zdt1, zdt2);
----
+
* Find the difference in days between two ZonedDateTimes
+
[source,Painless]
----
ZonedDateTime zdt1 =
        ZonedDateTime.of(1983, 10, 13, 22, 15, 30, 11000000, ZoneOffset.UTC);
ZonedDateTime zdt2 =
        ZonedDateTime.of(1983, 10, 17, 22, 15, 35, 0, ZoneOffset.UTC);
long differenceInDays = ChronoUnit.DAYS.between(zdt1, zdt2);
----
