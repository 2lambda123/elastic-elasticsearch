pr: 96161
summary: Skip shards when querying constant keyword fields
area: "Search"
type: enhancement
issues:
 - 95541
highlight:
  title: Better indexing and search performance under concurrent indexing and search
  body: "When a query like a match phrase query or a wildcard query targets a constant keyword field \
  we can skip the query execution on shards where the query is rewritten to match no documents.\
  We take advantage of index mappings including constant keyword fields and rewrite queries in such a way that, if\
  a constant keyword field does not match a value defined in the index mapping we rewrite the query to match no\
  document. This will result in the shard level request to return immediately, before the query is executed on the data\
  node and, as a result, skipping the shard completely. In a real world scenario it is likely that index patterns or\
  data streams include tens or hundreds of backing indices each of them with multiple shards involved. Skipping shards\
  in such scenario might result in better query performance and better cluster resource usage. Note, anyway, that\
  execution of the pre-filter and the corresponding \"can match\" phase where rewriting happens, depends on the overall
  number of shards involved and on whether there is at least one of them returning a non-empty result (see\
  'pre_filter_shard_size' setting to understand how to control this behaviour). We do the rewrite operation on the data\
  node in the so called \"can match\" phase, taking advantage of the fact that, at that moment, we can access the index\
  mapping and extract information about constant keyword fields and their value. This means we still \"fan-out\" the\
  request from the coordinator node to involved data nodes. Doing the rewrite on the coordinator node is indeed not\
  possible due to the unavailability of the index mapping."
  notable: true
