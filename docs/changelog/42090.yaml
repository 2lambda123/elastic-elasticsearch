pr: 42090
issues:
  - 41210
area: Snapshot/Restore
type: breaking, enhancement
summary: Get snapshots support for multiple repositories
versions:
  - v8.0.0
breaking:
  notable: false
  title: Get snapshots support for multiple repositories
  anchor: get_snapshots_support_for_multiple_repositories
  body: >-
    ## DescriptionThis commit adds multiple repositories support to get
    snapshots request.If some repository throws an exception this method does
    not fail fast instead, it returns results for all repositories.This PR is
    opened in favour of https://github.com/elastic/elasticsearch/pull/41799,
    because we decided to change the response format in a non-BwC manner. It
    makes sense to read discussion of the aforementioned PR.This is the
    continuation of work done here
    https://github.com/elastic/elasticsearch/pull/15151.

    ### _snapshot APINow the following requests are supported:[source]

    ----GET /_snapshot/[_all | * | repo* | repo1,repo2]/[_all | * | snap* | snap1,snap2]----This commit breaks BwC of response format for this request, that's why this PR is not backported to 7.x. For the response format see examples sections.

    ### _cat/snapshots APICat snapshot API also supports multiple repositories now.[source]

    ----GET /_cat/snapshots/[_all | * | repo* | repo1,repo2]----In the table returned new column named "repository" is added. If some repo fails with an exception, this method just reports that some repos have failed. See examples section.[source]

    ----GET /_cat/snapshots----is also supported and will return all snapshots for all repositories.Interestingly enough, the previous implementation also was registering `/_cat/snapshots` filter but a request to this endpoint always resulted in[source]

    ----{    "error": {        "root_cause": [            {                "type": "action_request_validation_exception",                "reason": "Validation Failed: 1: repository is missing;"            }        ],        "type": "action_request_validation_exception",        "reason": "Validation Failed: 1: repository is missing;"    },    "status": 400}----

    ## ImplementationTechnically, `TransportGetSnapshotsAction` calls `TransportGetRepositoriesAction` which resolves repo names and wildcards in request to concrete repository names. After that, we submit tasks in parallel for all returned repositories and are using the already implemented algorithm to get matching snapshots in the repositories.In terms of the transport level protocol, 2 classes are changed:* `GetSnapshotsRequest` now accepts the list of repository names (including wildcards) instead of single repo name.* `GetSnapshotsResponse` is changed in non-BwC manner.

    In terms of REST protocol, 2 classes are changed:* `SnapshotRequestsConverters.getSnapshots` now can understand the list of repository names in `GetSnapshotRequest` and adds it as comma separated list to the request path.* `RestGetSnapshotsAction` can now parse the comma-separated list of the repo names.* `GetSnapshotsResponse` XContent serialization is completely changed.

    `RestSnapshotAction` which is responsible for handling cat API for the snapshots is extended with repository field as well.

    ## Testing* `SharedClusterSnapshotRestoreIT.testGetSnapshotsMultipleRepos` tests that multiple repositories and wildcard work fine on transport level.* `SnapshotRequestConvertersTests.getSnapshots` tests that high-level REST client correctly sends the request when multiple repositories are used in the request.* `SnapshotIT.testGetSnapshots`  tests getting 2 snapshots from 2 different repositories using high-level REST client.* Some BwC tests, because we need compatibility between 7.latest and 8 (TBD) 

    ## DocumentationSeems that it makes sense to make adjustments to the following documentation pages:* cat-snapshots* modules-snapshots

    Both of them should talk about the ability to specify multiple repositories when querying the snapshots (TBD).

    Since it's breaking change also breaking changes doc should be extended (TBD).

    ## Examples### Working with `GetSnapshotsResponse`Consider you have response.First of all, you can check if there are any failures `response.isFailed()`.If you were using wildcard/regex for repository names, you can use `response.getRepositories` to get the set of repositories.If you know particular repository name, you can just do `response.getSnapshots(repoName)` and it will return the list of `SnapshotInfo` for the repository or it throws `ElasticsearchException`. So all methods that previously called `response.getSnapshots()` can now achieve the same behaviour by just passing the `repoName`.Finally, you can get a map of successful and failed responses using `getSuccessfulResponses` and `getFailedResponses`.

    ### _snapshot APIConsider you have 2 repositories:[source]

    ----PUT _snapshot/repo1PUT _snapshot/repo2----

    And you have one snapshot in each repository:[source]

    ----PUT _snapshot/repo1/snap1PUT _snapshot/repo2/snap2----

    Now the following commands[source]

    ----GET _snapshot/[* | _all | repo*]/[* | _all | snap*]----

    will give you the same output[source]

    ----{    "responses": [        {            "repository": "repo2",            "snapshots": [                {                    "snapshot": "snap2",                    "uuid": "XgGZx_QjRc6J5YkbbDWsdQ",                    "version_id": 8000099,                    "version": "8.0.0",                    "indices": [],                    "include_global_state": true,                    "state": "SUCCESS",                    "start_time": "2019-05-10T17:02:02.695Z",                    "start_time_in_millis": 1557507722695,                    "end_time": "2019-05-10T17:02:02.729Z",                    "end_time_in_millis": 1557507722729,                    "duration_in_millis": 34,                    "failures": [],                    "shards": {                        "total": 0,                        "failed": 0,                        "successful": 0                    }                }            ]        },        {            "repository": "repo1",            "snapshots": [                {                    "snapshot": "snap1",                    "uuid": "cEzdqUKxQ5G6MyrJAcYwmA",                    "version_id": 8000099,                    "version": "8.0.0",                    "indices": [],                    "include_global_state": true,                    "state": "SUCCESS",                    "start_time": "2019-05-10T17:01:57.868Z",                    "start_time_in_millis": 1557507717868,                    "end_time": "2019-05-10T17:01:57.909Z",                    "end_time_in_millis": 1557507717909,                    "duration_in_millis": 41,                    "failures": [],                    "shards": {                        "total": 0,                        "failed": 0,                        "successful": 0                    }                }            ]        }    ]}----Responses are currently not sorted by repository name. However, SnapshotInfos are still sorted by startDate and then by snapshotId.

    The following request[source]

    ----GET _snapshot/[* | _all | repo*]/snap1----results in[source]

    ----{    "responses": [        {            "repository": "repo1",            "snapshots": [                {                    "snapshot": "snap1",                    "uuid": "cEzdqUKxQ5G6MyrJAcYwmA",                    "version_id": 8000099,                    "version": "8.0.0",                    "indices": [],                    "include_global_state": true,                    "state": "SUCCESS",                    "start_time": "2019-05-10T17:01:57.868Z",                    "start_time_in_millis": 1557507717868,                    "end_time": "2019-05-10T17:01:57.909Z",                    "end_time_in_millis": 1557507717909,                    "duration_in_millis": 41,                    "failures": [],                    "shards": {                        "total": 0,                        "failed": 0,                        "successful": 0                    }                }            ]        },        {            "repository": "repo2",            "error": {                "root_cause": [                    {                        "type": "snapshot_missing_exception",                        "reason": "[repo2:snap1] is missing"                    }                ],                "type": "snapshot_missing_exception",                "reason": "[repo2:snap1] is missing"            }        }    ]}----because snap1 exists in repo1, but does not exist in repo2.This is an example of partial failure.Note that HTTP status code is 200 OK, despite partial failure.Even with full failure status code will be 200 OK.Currently, successful repositories are always reported on top.If you specify `ignore_unavailable` flag:[source]

    ----GET _snapshot/[* | _all | repo*]/snap1?ignore_unavailable=true----And get the following response:[source]

    ----{    "responses": [        {            "repository": "repo2",            "snapshots": []        },        {            "repository": "repo1",            "snapshots": [                {                    "snapshot": "snap1",                    "uuid": "cEzdqUKxQ5G6MyrJAcYwmA",                    "version_id": 8000099,                    "version": "8.0.0",                    "indices": [],                    "include_global_state": true,                    "state": "SUCCESS",                    "start_time": "2019-05-10T17:01:57.868Z",                    "start_time_in_millis": 1557507717868,                    "end_time": "2019-05-10T17:01:57.909Z",                    "end_time_in_millis": 1557507717909,                    "duration_in_millis": 41,                    "failures": [],                    "shards": {                        "total": 0,                        "failed": 0,                        "successful": 0                    }                }            ]        }    ]}----If you specify missing repository in the request[source]

    ----GET _snapshot/repo1,repo2,repo3/snap1----You get top-level error:[source]

    ----{    "error": {        "root_cause": [            {                "type": "repository_missing_exception",                "reason": "[repo3] missing"            }        ],        "type": "repository_missing_exception",        "reason": "[repo3] missing"    },    "status": 404}----

    ### _cat/snapshot APIConsider you have 2 repositories:[source]

    ----PUT _snapshot/repo1PUT _snapshot/repo2----

    And you have one snapshot in each repository:[source]

    ----PUT _snapshot/repo1/snap1PUT _snapshot/repo2/snap2----

    Now you can get all the snapshots using any of this API calls:[source]

    ----GET _cat/snapshotGET _cat/snapshot/_allGET _cat/snapshot/*GET _cat/snapshot/repo*GET _cat/snapshot/repo1,repo2----The response will contain the repository name:[source]

    ----snap2 repo2 SUCCESS 1557507722 17:02:02 1557507722 17:02:02 34ms 0 0 0 0snap1 repo1 SUCCESS 1557507717 17:01:57 1557507717 17:01:57 41ms 0 0 0 0----Currently snapshots are not sorted by repo name.If there is an unexpected error for at least one of the repositories you will get the followingresponse:[source]

    ----{    "error": {        "root_cause": [            {                "type": "exception",                "reason": "Repositories [repo1,repo2] failed to retrieve snapshots"            }        ],        "type": "exception",        "reason": "Repositories [repo1,repo2] failed to retrieve snapshots"    },    "status": 500}----


    Closes https://github.com/elastic/elasticsearch/issues/41210
