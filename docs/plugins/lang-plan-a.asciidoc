[[lang-plan-a]]
=== Plan A Language Plugin

The Plan A language plugin enables the use of Plan A in Elasticsearch
scripts.  Plan A is a simple scripting language, internal to Elasticsearch, designed to be as
secure as possible.  Plan A is a small subset of Groovy, and all scripts are written as a single
method.

[[lang-plan-a-install]]
[float]
==== Installation

This plugin can be installed using the plugin manager:

[source,sh]
----------------------------------------------------------------
sudo bin/plugin install lang-plan-a
----------------------------------------------------------------

The plugin must be installed on every node in the cluster, and each node must
be restarted after installation.

[[lang-plan-a-remove]]
[float]
==== Removal

The plugin can be removed with the following command:

[source,sh]
----------------------------------------------------------------
sudo bin/plugin remove lang-plan-a
----------------------------------------------------------------

The node must be stopped before removing the plugin.

[[lang-plan-a-usage]]
==== Using Plan A in Elasticsearch

Once the plugin has been installed, Plan A can be used at a scripting
language by setting the `lang` parameter to `plan-a`.

Scripting is available in many APIs, but we will use an example with the
`function_score` for demonstration purposes:

[[lang-plan-a-inline]]
[float]
=== Inline scripts

WARNING: Enabling inline scripting on an unprotected Elasticsearch cluster is dangerous.
See <<lang-plan-a-file>> for a safer option.

If you have enabled {ref}/modules-scripting.html#enable-dynamic-scripting[inline scripts],
you can use Plan A as follows:

[source,json]
----
DELETE test

PUT test/doc/1
{
  "num": 1.0
}

PUT test/doc/2
{
  "num": 2.0
}

GET test/_search
{
  "query": {
    "function_score": {
      "script_score": {
        "script": {
          "inline": "input.doc.num.value * input.factor",
          "lang": "plan-a",
          "params": {
            "factor": 2
          }
        }
      }
    }
  }
}
----
// AUTOSENSE

[[lang-plan-a-indexed]]
[float]
=== Indexed scripts

WARNING: Enabling indexed scripting on an unprotected Elasticsearch cluster is dangerous.
See <<lang-plan-a-file>> for a safer option.

If you have enabled {ref}/modules-scripting.html#enable-dynamic-scripting[indexed scripts],
you can use Plan A as follows:

[source,json]
----
DELETE test

PUT test/doc/1
{
  "num": 1.0
}

PUT test/doc/2
{
  "num": 2.0
}

POST _scripts/plan-a/my_script  <1>
{
  "script": "input.doc.num.value * input.factor"
}

GET test/_search
{
  "query": {
    "function_score": {
      "script_score": {
        "script": {
          "id": "my_script", <2>
          "lang": "plan-a",
          "params": {
            "factor": 2
          }
        }
      }
    }
  }
}

----
// AUTOSENSE

<1> We index the script under the id `my_script`.
<2> The function score query retrieves the script with id `my_script`.


[[lang-plan-a-file]]
[float]
=== File scripts

You can save your scripts to a file in the `config/scripts/` directory on
every node. The `.plan-a` file suffix identifies the script as containing
Plan A:

First, save this file as `config/scripts/my_script.plan-a` on every node
in the cluster:

[source,plan-a]
----
input.doc.num.value * input.factor
----

then use the script as follows:

[source,json]
----
DELETE test

PUT test/doc/1
{
  "num": 1.0
}

PUT test/doc/2
{
  "num": 2.0
}

GET test/_search
{
  "query": {
    "function_score": {
      "script_score": {
        "script": {
          "file": "my_script", <1>
          "lang": "plan-a",
          "params": {
            "factor": 2
          }
        }
      }
    }
  }
}

----
// AUTOSENSE

<1> The function score query retrieves the script with filename `my_script.plan-a`.

[lang-plan-a-api]
[float]
=== Plan A API

The following types are available for use in the Plan A language:

Basic Types:
[source,plan-a]
----
boolean
byte
short
char
int
long
float
double
----

Complex Types:

Note the following:
1. Non-static methods/members in superclasses are available to subclasses.
2. Generic types with unspecified generic parameters are parameters of type def.

[source,plan-a]
----
Object
    String toString()
    boolean equals(Object)
    int hashCode()

Number extends Object
    byte byteValue()
    short shortValue()
    int intValue()
    long longValue()
    float floatValue()
    double doubleValue()

Boolean extends Object
    <init>(boolean)
    static Boolean valueOf(boolean)
    boolean booleanValue()

Byte extends Number
    <init>(byte)
    static Byte valueOf(byte)
    static byte MIN_VALUE
    static byte MAX_VALUE

Short extends Number
    <init>(short)
    static Short valueOf(short)
    static short MIN_VALUE
    static short MAX_VALUE

Character extends Object
    <init>(char)
    static Character valueOf(char)
    char charValue()
    static char MIN_VALUE
    static char MAX_VALUE

Integer extends Number
    <init>(int)
    static Integer valueOf(int)
    static int MIN_VALUE
    static int MAX_VALUE

Long extends Number
    <init>(long)
    static Long valueOf(long)
    static long MIN_VALUE
    static long MAX_VALUE

Float extends Number
    <init>(float)
    static Float valueOf(float)
    static float MIN_VALUE
    static float MAX_VALUE

Double extends Number
    <init>(double)
    static Double valueOf(double)
    static double MIN_VALUE
    static double MAX_VALUE

String extends Object
    <init>(String)
    int codePointAt(int)
    int compareTo(String)


----

Dynamic Types:
[source,plan-a]
----
def (This type can be used to represent any other type.)
----