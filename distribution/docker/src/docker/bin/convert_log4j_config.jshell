//usr/bin/env jshell -q --execution local "$0" "$@"; exit $?
// vim:ft=java ts=4 sw=4 sts=4 et:

/*
 * This script processes the default Elasticsearch log4j config and outputs
 * a transformed version, where everything is logged to the console.
 */

import java.nio.file.*;
import java.util.*;

// The env var is useful for testing
Path configPath = Path.of(System.getenv().getOrDefault("LOG4J_CONFIG", "/usr/share/elasticsearch/config/log4j2.file.properties"));

List<String> rawLines = Files.readAllLines(configPath);

// This flag provides a way to handle properties whose values are split
// over multiple lines and we need to omit those properties.
boolean skipNext = false;

for (final String line : rawLines) {
    if (skipNext) {
        if (line.endsWith("\\") == false) {
            skipNext = false;
        }
        continue;
    }
    if (line.startsWith("appender.")) {
        String[] parts = line.split("\\s*=\\s*");
        String key = parts[0];
        String[] keyParts = key.split("\\.");
        String value = parts[1];

        // We don't need to explicitly define a console appender because the
        // "rolling" appender will become a console appender. We also don't
        // carry over "rolling_old"
        if (keyParts[1].equals("console") || keyParts[1].equals("rolling_old")) {
            continue;
        }

        switch (keyParts[2]) {
            case "type":
                if (value.equals("RollingFile")) {
                    value = "Console";
                }
                System.out.println(key + " = " + value);
                break;

            case "fileName":
            case "filePattern":
            case "policies":
            case "strategy":
                // No longer applicable. Omit it.
                skipNext = line.endsWith("\\");
                break;

            default:
                System.out.println(line);
                break;
        }
    } else if (line.startsWith("rootLogger.appenderRef")) {
        String[] parts = line.split("\\s*=\\s*");

        // The root logger only needs this appender
        if (parts[1].equals("rolling")) {
            System.out.println(line);
        }
    } else {
        System.out.println(line);
    }
}

// Exit jshell, otherwise it'll just open a prompt
/exit
