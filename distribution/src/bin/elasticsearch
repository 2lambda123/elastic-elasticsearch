#!/bin/bash

# CONTROLLING STARTUP:
#
# This script relies on a few environment variables to determine startup
# behavior, those variables are:
#
#   ES_PATH_CONF -- Path to config directory
#   ES_JAVA_OPTS -- External Java Opts on top of the defaults set
#
# Optionally, exact memory values can be set using the `ES_JAVA_OPTS`. Example
# values are "512m", and "10g".
#
#   ES_JAVA_OPTS="-Xms8g -Xmx8g" ./bin/elasticsearch

source "`dirname "$0"`"/elasticsearch-env

CHECK_KEYSTORE=true
TRY_AUTO_CONFIG="${TRY_AUTO_CONFIG:-true}"
GENERATE_ENROLL_CREDENTIALS=false
DAEMONIZE=false
QUIET=false
for option in "$@"; do
  case "$option" in
    -h|--help|-V|--version)
      CHECK_KEYSTORE=false
      TRY_AUTO_CONFIG=false
      ;;
    -d|--daemonize)
      DAEMONIZE=true
      ;;
    -q|--quiet)
      QUIET=true
      ;;
  esac
done

if [ -z "$ES_TMPDIR" ]; then
  ES_TMPDIR=`"$JAVA" "$XSHARE" -cp "$ES_CLASSPATH" org.elasticsearch.tools.launchers.TempDirectory`
fi

# get keystore password before setting java options to avoid
# conflicting GC configurations for the keystore tools
unset KEYSTORE_PASSWORD
KEYSTORE_PASSWORD=
if [[ $CHECK_KEYSTORE = true ]] \
    && bin/elasticsearch-keystore has-passwd-passwd --silent &> /dev/null
then
  if ! read -s -r -p "Elasticsearch keystore password: " KEYSTORE_PASSWORD ; then
    echo "Failed to read keystore password on console" 1>&2
    exit 1
  fi
fi

if [[ $TRY_AUTO_CONFIG = true ]]; then
  # It is possible that an auto-conf failure prevents the node from starting, but this is only the exceptional case (exit code 1).
  # Most likely an auto-conf failure will leave the configuration untouched (exit codes 63, 73, and 78), optionally printing a message
  # if the error is uncommon or unexpected, but it should otherwise let the node to start as usual.
  # This is passed in all the command line options in order to read the node settings ones (-E), while the others are ignored
  # (a small caveat is that this also handles the -v option in order to provide more information on how auto-config went)
  if (
    # run this in a subshell without sourcing the elasticsearch-env because it can otherwise raise all kind of interesting
    # fun problems (like multiple GC settings, duplicate settings when translating env vars to cmd line for docker, etc)
    source "$ES_HOME/bin/x-pack-env"
    source "$ES_HOME/bin/x-pack-security-env"
    ES_CLASSPATH="$ES_CLASSPATH:$ES_HOME/lib/tools/security-cli/*"
    exec \
      "$JAVA" \
      "$XSHARE" \
      -Xms4m -Xmx64m -XX:+UseSerialGC \
      -Des.path.home="$ES_HOME" \
      -Des.path.conf="$ES_PATH_CONF" \
      -Des.distribution.flavor="$ES_DISTRIBUTION_FLAVOR" \
      -Des.distribution.type="$ES_DISTRIBUTION_TYPE" \
      -cp "$ES_CLASSPATH" \
      "org.elasticsearch.xpack.security.cli.AutoConfigInitialNode" \
      "$@" \
      <<<"$KEYSTORE_PASSWORD"
    ); then
      GENERATE_ENROLL_CREDENTIALS=true
  else
    retval=$?
    GENERATE_ENROLL_CREDENTIALS=false
    # these exit codes cover the cases where auto-conf cannot run but the node should not be prevented from starting as usual
    if [[ $retval -ne 80 ]] && [[ $retval -ne 73 ]] && [[ $retval -ne 78 ]]; then
      exit $retval
    fi
  fi
fi

# The JVM options parser produces the final JVM options to start Elasticsearch.
# It does this by incorporating JVM options in the following way:
#   - first, system JVM options are applied (these are hardcoded options in the
#     parser)
#   - second, JVM options are read from jvm.options and jvm.options.d/*.options
#   - third, JVM options from ES_JAVA_OPTS are applied
#   - fourth, ergonomic JVM options are applied
ES_JAVA_OPTS=`export ES_TMPDIR; "$JAVA" "$XSHARE" -cp "$ES_CLASSPATH" org.elasticsearch.tools.launchers.JvmOptionsParser "$ES_PATH_CONF" "$ES_HOME/plugins"`

# manual parsing to find out if process should be detached
if [[ $DAEMONIZE = false ]]; then
  if [[ $GENERATE_ENROLL_CREDENTIALS = true ]]; then
# First check if the banner can be displayed given the OS and terminal type
    if [[ $QUIET = false ]] && "$JAVA" "$XSHARE" -Xms2m -Xmx32m -XX:+UseSerialGC \
      -cp "$ES_HOME/lib/jansi-2.3.4.jar:$ES_HOME/lib/elasticsearch-launchers-@project.version@.jar" \
      org.elasticsearch.tools.launchers.TerminalOutputFormatter; then
# redirect the ES node's output to the formatter code in order to output the bottom persistent banner
# TODO use pipes instead of process substitution
        exec > >(exec "$JAVA" "$XSHARE" -Xms4m -Xmx64m \
          -cp "$ES_HOME/lib/jansi-2.3.4.jar:$ES_HOME/lib/elasticsearch-launchers-@project.version@.jar" \
          org.elasticsearch.tools.launchers.TerminalOutputFormatter "BANNER_EOF" \
            <(
              # TODO this process lingers because parent doesn't call wait
              # TODO display error to stderr if this terminated abnormally
              source "$ES_HOME/bin/x-pack-env"
              source "$ES_HOME/bin/x-pack-security-env"
              ES_CLASSPATH="$ES_CLASSPATH:$ES_HOME/lib/tools/security-cli/*"
              exec \
                "$JAVA" \
                "$XSHARE" \
                -Xms4m -Xmx64m -XX:+UseSerialGC \
                -Des.path.home="$ES_HOME" \
                -Des.path.conf="$ES_PATH_CONF" \
                -Des.distribution.flavor="$ES_DISTRIBUTION_FLAVOR" \
                -Des.distribution.type="$ES_DISTRIBUTION_TYPE" \
                -cp "$ES_CLASSPATH" \
                "org.elasticsearch.xpack.security.enrollment.tool.BootstrapPasswordAndEnrollmentTokenForInitialNode" \
                "$@" \
                "-eof-marker" "BANNER_EOF" \
                <<<"$KEYSTORE_PASSWORD"
              ))
    else
      echo "warning: Security with TLS is now auto configured but no credentials have been generated" \
      "and displayed because stdout cannot be used or is not a terminal that supports ANSI escape sequences" >&2
    fi
  fi
  exec \
    "$JAVA" \
    "$XSHARE" \
    $ES_JAVA_OPTS \
    -Des.path.home="$ES_HOME" \
    -Des.path.conf="$ES_PATH_CONF" \
    -Des.distribution.flavor="$ES_DISTRIBUTION_FLAVOR" \
    -Des.distribution.type="$ES_DISTRIBUTION_TYPE" \
    -Des.bundled_jdk="$ES_BUNDLED_JDK" \
    -cp "$ES_CLASSPATH" \
    org.elasticsearch.bootstrap.Elasticsearch \
    "$@" <<<"$KEYSTORE_PASSWORD"
else
  if [[ $GENERATE_ENROLL_CREDENTIALS = true ]]; then
    echo "warning: Security with TLS is now auto configured but no credentials have been generated" \
    "and displayed because stdout cannot be used or is not a terminal that supports ANSI escape sequences" >&2
  fi
  exec \
    "$JAVA" \
    "$XSHARE" \
    $ES_JAVA_OPTS \
    -Des.path.home="$ES_HOME" \
    -Des.path.conf="$ES_PATH_CONF" \
    -Des.distribution.flavor="$ES_DISTRIBUTION_FLAVOR" \
    -Des.distribution.type="$ES_DISTRIBUTION_TYPE" \
    -Des.bundled_jdk="$ES_BUNDLED_JDK" \
    -cp "$ES_CLASSPATH" \
    org.elasticsearch.bootstrap.Elasticsearch \
    "$@" \
    <<<"$KEYSTORE_PASSWORD" &
  retval=$?
  pid=$!
  [ $retval -eq 0 ] || exit $retval
  if ! ps -p $pid > /dev/null ; then
    exit 1
  fi
  exit 0
fi

exit $?
