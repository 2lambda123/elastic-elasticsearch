/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.util.regex.Matcher
import org.elasticsearch.gradle.LoggedExec

/**
 * This is a dummy project which does a local worktree checkout of the previous
 * major version's stable branch, and builds a snapshot. This allows backcompat
 * tests in the next major version to test against the next unreleased minor
 * version, without relying on snapshots.
 */

apply plugin: 'distribution'

// TODO: generate this, by introspecting Version.java for last previous minor
String BWC_VERSION = "5.3.0-SNAPSHOT"

// cleanup any previous worktree refs which may have been removed by clean task
task pruneWorktree(type: LoggedExec) {
  commandLine = ['git', 'worktree', 'prune']
}

String worktreeDir = "${buildDir}/bwc/checkout-5.x"
task createWorktree(type: LoggedExec) {
  dependsOn pruneWorktree
  onlyIf { new File(worktreeDir).exists() == false }
  commandLine = ['git', 'worktree', 'add', '--detach', worktreeDir, '5.x']
}

task findRemote(type: LoggedExec) {
  commandLine = ['git', 'remote', '-v']
  doLast {
    output.toString('UTF-8').eachLine {
      if (it.contains("elastic/elasticsearch.git (fetch)")) {
        project.ext.gitRemote = it.split('\\t')[0]
      }
    }
  } 
}

task updateWorktree(type: LoggedExec) {
  dependsOn createWorktree, findRemote
  commandLine = ['git', 'pull', "${-> project.ext.gitRemote}", '5.x']
  workingDir = worktreeDir
}

File bwcZip = file("${worktreeDir}/distribution/zip/build/distributions/elasticsearch-${BWC_VERSION}.zip")
task buildBwcVersion(type: LoggedExec) {
  dependsOn updateWorktree
  commandLine = ['gradle', ':distribution:zip:assemble']
  workingDir = worktreeDir
}

artifacts {
  'default' file: bwcZip, name: 'elasticsearch', type: 'zip', builtBy: buildBwcVersion
}

gradle.taskGraph.whenReady {
  if (it.hasTask(createWorktree)) {
    ByteArrayOutputStream output = new ByteArrayOutputStream()
    exec {
      commandLine = ['git', '--version']
      standardOutput = output
    }
    String versionOutput = output.toString('UTF-8')
    Matcher version = versionOutput =~ /git version ((\d+)\.(\d+)\.\d+)/
    if (version.find() == false) {
      throw new GradleException("Could not parse git version from [${versionOutput}]")
    }
    int major = version.group(2).toInteger()
    int minor = version.group(3).toInteger()
    if (major < 2 || major == 2 && minor < 5) {
      throw new GradleException("Git version 2.5 or greater needed for worktree by bwc-zip, found ${version.group(1)}")
    }
  }  
}

