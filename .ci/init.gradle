import com.bettercloud.vault.VaultConfig;
import com.bettercloud.vault.Vault;
import net.rubygrapefruit.platform.Native;
import net.rubygrapefruit.platform.Process

initscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bettercloud:vault-java-driver:4.1.0'
        classpath "net.rubygrapefruit:native-platform:0.18"
    }
}

if (System.env.VAULT_ADDR == null) {
    throw new GradleException("You must set the VAULT_ADDR environment variable to use this init script.")
}

if (System.env.VAULT_TOKEN == null) {
    ['VAULT_ROLE_ID', 'VAULT_SECRET_ID'].each {
        if (System.env."$it" == null) {
            throw new GradleException("$it must be set!")

        }
    }
}

final String vaultToken = System.env.VAULT_TOKEN ?:   new Vault(
        new VaultConfig()
            .address(System.env.VAULT_ADDR)
            .engineVersion(1)
            .build()
    )
    .withRetries(5, 1000)
    .auth()
    .loginByAppRole("approle", System.env.VAULT_ROLE_ID, System.env.VAULT_SECRET_ID)
    .getAuthClientToken();


final Vault vault = new Vault(
     new VaultConfig()
        .address(System.env.VAULT_ADDR)
        .engineVersion(1)
        .token(vaultToken)
        .build()
)
        .withRetries(5, 1000)
    
Process process = Native.get(Process.class)
// Remove initial credentials from the envirnemnt so the build can't access them
['VAULT_ROLE_ID', 'VAULT_SECRET_ID'].each { 
    process.setEnvironmentVariable(it, null)
}
// export the token so the build could still talk with vault
process.setEnvironmentVariable("VAULT_TOKEN", vaultToken)   

final Map<String,String> artifactoryCredentials = vault.logical()
        .read("secret/elasticsearch-ci/artifactory.elstc.co")
        .getData();

logger.info("Using elastic artifactory repos")
Closure configCache = {
    return {
        name "artifactory-gradle-release"
        url "https://artifactory.elstc.co/artifactory/gradle-release"
        credentials {
            username artifactoryCredentials.get("username")
            password artifactoryCredentials.get("token")
        }
    }
}
settingsEvaluated { settings ->
    settings.pluginManagement {
        repositories {
            maven configCache()
        }
    }
}
projectsLoaded {
    allprojects {
        buildscript {
            repositories {
                maven configCache()
            }
        }
        repositories {
            maven configCache()
        }
    }
    rootProject {
        project.pluginManager.withPlugin('com.gradle.build-scan') {
            buildScan.server = 'https://gradle-enterprise.elastic.co'
        }
    }
}

final String buildCacheUrl = System.getProperty('org.elasticsearch.build.cache.url')
final boolean buildCachePush = Boolean.valueOf(System.getProperty('org.elasticsearch.build.cache.push', 'false'))

if (buildCacheUrl) {
    final Map<String,String> buildCacheCredentials = vault.logical()
            .read("secret/elasticsearch-ci/gradle-build-cache")
            .getData();
    gradle.settingsEvaluated { settings ->
        settings.buildCache {
            remote(HttpBuildCache) {
                url = buildCacheUrl
                push = buildCachePush
                credentials {
                        username = buildCacheCredentials.get("username")
                        password = buildCacheCredentials.get("password")
                }
            }
        }
    }
}

