import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.VersionProperties
import org.elasticsearch.gradle.internal.BwcVersions
import org.elasticsearch.gradle.internal.info.BuildParams
import org.elasticsearch.gradle.internal.JarApiComparisonTask

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

apply plugin: 'elasticsearch.publish'
apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.bwc-test'


tasks.named("loggerUsageCheck").configure {enabled = false }

dependencies {
  api "org.apache.lucene:lucene-core:${versions.lucene}"
  api project(':libs:elasticsearch-plugin-api')
}


tasks.named('forbiddenApisMain').configure {
  // :libs:elasticsearch-logging does not depend on server
  replaceSignatureFiles 'jdk-signatures'
}

tasks.named("dependencyLicenses").configure {
  mapping from: /lucene-.*/, to: 'lucene'
}

configurations {
  stableAnalysisPluginApi
}

BuildParams.bwcVersions.allIndexCompatible.findAll({ it.onOrAfter(Version.fromString("8.5.0")) && it != VersionProperties.elasticsearchVersion }).each { bwcVersion ->
  def baseName = "v${bwcVersion}"

  BwcVersions.UnreleasedVersionInfo unreleasedVersion = BuildParams.bwcVersions.unreleasedInfo(bwcVersion)
  Configuration stableApiConfiguration = configurations.create("stableAnalysisPluginApi${baseName}") {
    // TODO: Temporary workaround for https://github.com/elastic/elasticsearch/issues/73433
    transitive = false
  }
  Object libDependency = null

  if (unreleasedVersion) {
    // For unreleased snapshot versions, build them from source
    libDependency = files(project(unreleasedVersion.gradleProjectPath).tasks.named('buildBwcElasticsearchPluginAnalysisApi'))
  } else {
    // For released versions, download it
    libDependency = "org.elasticsearch:elasticsearch-plugin-analysis-api:${bwcVersion}"
  }

  dependencies {
    "stableAnalysisPluginApi${baseName}"(libDependency)
  }

  tasks.register(bwcTaskName(bwcVersion), JarApiComparisonTask) {
    dependsOn configurations."stableAnalysisPluginApi${baseName}"
    // TODO: "normalize" input with a classpath resolution strategy
    oldJar.fileProvider(project.provider(() -> configurations."stableAnalysisPluginApi${baseName}".singleFile))
    newJar = tasks.named("jar").flatMap(t -> t.archiveFile)
  }
}
