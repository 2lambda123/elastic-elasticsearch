<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <name>Quota Aware FS</name>
  <modelVersion>4.0.0</modelVersion>
  <groupId>co.elastic.cloud</groupId>
  <artifactId>quota-aware-fs</artifactId>
  <version>1.1.1-SNAPSHOT</version>
  <packaging>jar</packaging>
  <description>Make the JVM's default filesystem report capacity according to external quota</description>
  <inceptionYear>2016</inceptionYear>
  <scm>
    <connection>scm:git:git@github.com:elastic/cloud.git</connection>
    <developerConnection>scm:git:git@github.com:elastic/cloud.git</developerConnection>
    <url>https://github.com/elastic/cloud/tree/master/quota-aware-fs</url>
    <tag>HEAD</tag>
  </scm>
  <properties>
    <tests.output>onerror</tests.output>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
    <testframework.version>2.7.3</testframework.version>
    <project.reporting.outputEncoding>utf8</project.reporting.outputEncoding>
    <!-- <elasticsearch.version>2.4.1</elasticsearch.version> -->
    <elasticsearch.tools.directory>${project.build.directory}/dev-tools</elasticsearch.tools.directory>
    
    <!-- Test properties -->
    <tests.jvms>auto</tests.jvms>
    <tests.shuffle>true</tests.shuffle>
    <tests.output>onerror</tests.output>
    <tests.client.ratio />
    <tests.bwc.path>${project.basedir}/backwards</tests.bwc.path>
    <tests.locale>random</tests.locale>
    <tests.timezone>random</tests.timezone>
    <es.logger.level>ERROR</es.logger.level>
    <tests.heap.size>512m</tests.heap.size>
    <tests.heapdump.path>${project.build.directory}/heapdump/</tests.heapdump.path>
    <tests.topn>5</tests.topn>
    <execution.hint.file>.local-${elasticsearch.version}-execution-hints.log</execution.hint.file>
    <execution.hint.integ.file>.local-${elasticsearch.version}-integ-execution-hints.log</execution.hint.integ.file>
    <tests.assertion.disabled>false</tests.assertion.disabled>
    <tests.verbose>false</tests.verbose>
    <tests.seed />
    <tests.bwc />
    <tests.bwc.path />
    <tests.bwc.version />
    <tests.jvm.argline />
    <tests.appendseed />
    <tests.iters />
    <tests.maxfailures />
    <tests.class />
    <tests.method />
    <tests.nightly />
    <tests.badapples />
    <tests.weekly />
    <tests.awaitsfix />
    <tests.timeoutSuite />
    <tests.showSuccess />
    <tests.thirdparty />
    <tests.config />
    <tests.enable_mock_modules />
    <tests.rest />
    <tests.rest.suite />
    <tests.rest.blacklist />
    <tests.rest.spec />
    <tests.rest.load_packaged />
    <tests.network />
    <tests.multicast />
    <tests.cluster />
    <tests.filter />
    <env.ES_TEST_LOCAL />
    <tests.security.manager>true</tests.security.manager>
    <tests.compatibility />
    <tests.ifNoTests>fail</tests.ifNoTests>
    <skip.unit.tests>${skipTests}</skip.unit.tests>
    <skip.integ.tests>${skipTests}</skip.integ.tests>
    <integ.scratch>${project.build.directory}/integ tests</integ.scratch>
    <integ.deps>${project.build.directory}/integ deps</integ.deps>
    <integ.temp>${integ.scratch}/temp</integ.temp>
    <integ.http.port>9400</integ.http.port>
    <integ.transport.port>9500</integ.transport.port>
    <integ.http.port.sec>9600</integ.http.port.sec>
    <integ.transport.port.sec>9700</integ.transport.port.sec>
    <no.commit.pattern>\bno(n|)commit\b</no.commit.pattern>
  </properties>
  <distributionManagement>
    <snapshotRepository>
      <id>snapshots</id>
      <name>Cloud Internal Snaphots</name>
      <url>https://artifactory.elstc.co/artifactory/cloud-snapshot-local</url>
    </snapshotRepository>
    <repository>
      <id>central</id>
      <name>Cloud Internal Releases</name>
      <url>https://artifactory.elstc.co/artifactory/cloud-release-local</url>
    </repository>
  </distributionManagement>
  <repositories>
    <repository>
      <id>sonatype-snapshots</id>
      <name>Sonatype Snapshots Repository</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>sonatype-releases</id>
      <name>Sonatype Releases Repository</name>
      <url>https://oss.sonatype.org/content/repositories/releases/</url>
    </repository>
    <repository>
      <id>cloud-release</id>
      <name>Cloud releases</name>
      <url>https://artifactory.elstc.co/artifactory/cloud-release</url>
    </repository>
  </repositories>
  <dependencies>
    <dependency>
      <groupId>org.apache.lucene</groupId>
      <artifactId>lucene-test-framework</artifactId>
      <version>6.3.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>animal-sniffer-maven-plugin</artifactId>
        <version>1.14</version>
        <configuration>
          <signature>
            <groupId>org.codehaus.mojo.signature</groupId>
            <artifactId>java18</artifactId>
            <version>1.0</version>
          </signature>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.0</version>
        <configuration>
          <release>11</release>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>2.5.3</version>
        <configuration>
          <tagNameFormat>quota-aware-fs-v@{project.version}</tagNameFormat>
          <pushChanges>false</pushChanges>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <configuration>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.carrotsearch.randomizedtesting</groupId>
        <artifactId>junit4-maven-plugin</artifactId>
        <version>${testframework.version}</version>
        <!-- general test configuration, used for both unit and integ tests -->
        <configuration>
          <jvm>${jvm.executable}</jvm>
          <argLine>${tests.jvm.argline}</argLine>
          <heartbeat>10</heartbeat>
          <jvmOutputAction>warn</jvmOutputAction>
          <leaveTemporary>true</leaveTemporary>
          <parallelism>${tests.jvms}</parallelism>
          <!-- System assertions (-esa) are disabled for now because of what 
            looks like a JDK bug triggered by Groovy on JDK7. We should look at re-enabling 
            system assertions when we upgrade to a new version of Groovy (currently 2.4.4) 
            or require JDK8. See https://issues.apache.org/jira/browse/GROOVY-7528. -->
          <assertions enableSystemAssertions="false">
            <enable />
            <disable package="${tests.assertion.disabled}" />
            <!-- pass org.elasticsearch to run without assertions -->
          </assertions>
          <jvmArgs>
            <param>-Xmx${tests.heap.size}</param>
            <param>-Xms${tests.heap.size}</param>
            <param>${java.permGenSpace}</param>
            <param>-XX:MaxDirectMemorySize=512m</param>
            <param>-Des.logger.prefix=</param>
            <param>-XX:+HeapDumpOnOutOfMemoryError</param>
            <param>-XX:HeapDumpPath=${tests.heapdump.path}</param>
          </jvmArgs>
          <shuffleOnSlave>${tests.shuffle}</shuffleOnSlave>
          <sysouts>${tests.verbose}</sysouts>
          <seed>${tests.seed}</seed>
          <!-- enforce unique suite names, or reporting stuff can be screwed 
            up -->
          <uniqueSuiteNames>true</uniqueSuiteNames>
          <systemProperties>
            <!-- we use './temp' since this is per JVM and tests are forbidden 
              from writing to CWD -->
            <java.io.tmpdir>./temp</java.io.tmpdir>
            <!-- RandomizedTesting library system properties -->
            <tests.bwc>${tests.bwc}</tests.bwc>
            <tests.bwc.path>${tests.bwc.path}</tests.bwc.path>
            <tests.bwc.version>${tests.bwc.version}</tests.bwc.version>
            <tests.jvm.argline>${tests.jvm.argline}</tests.jvm.argline>
            <tests.appendseed>${tests.appendseed}</tests.appendseed>
            <tests.cluster>${tests.cluster}</tests.cluster>
            <tests.iters>${tests.iters}</tests.iters>
            <tests.project>${project.groupId}:${project.artifactId}</tests.project>
            <!-- needed to know which project we are in for plugin permissions -->
            <tests.artifact>${project.artifactId}</tests.artifact>
            <tests.maxfailures>${tests.maxfailures}</tests.maxfailures>
            <tests.failfast>${tests.failfast}</tests.failfast>
            <tests.class>${tests.class}</tests.class>
            <tests.method>${tests.method}</tests.method>
            <tests.nightly>${tests.nightly}</tests.nightly>
            <tests.verbose>${tests.verbose}</tests.verbose>
            <tests.badapples>${tests.badapples}</tests.badapples>
            <tests.weekly>${tests.weekly}</tests.weekly>
            <haltOnFailure>${tests.failfast}</haltOnFailure>
            <tests.awaitsfix>${tests.awaitsfix}</tests.awaitsfix>
            <tests.timeoutSuite>${tests.timeoutSuite}</tests.timeoutSuite>
            <tests.showSuccess>${tests.showSuccess}</tests.showSuccess>
            <tests.thirdparty>${tests.thirdparty}</tests.thirdparty>
            <tests.config>${tests.config}</tests.config>
            <tests.coverage>${tests.coverage}</tests.coverage>
            <tests.coverage.dir>${project.build.directory}</tests.coverage.dir>
            <tests.client.ratio>${tests.client.ratio}</tests.client.ratio>
            <tests.enable_mock_modules>${tests.enable_mock_modules}</tests.enable_mock_modules>
            <tests.assertion.disabled>${tests.assertion.disabled}</tests.assertion.disabled>
            <tests.rest>${tests.rest}</tests.rest>
            <tests.rest.suite>${tests.rest.suite}</tests.rest.suite>
            <tests.rest.blacklist>${tests.rest.blacklist}</tests.rest.blacklist>
            <tests.rest.spec>${tests.rest.spec}</tests.rest.spec>
            <tests.network>${tests.network}</tests.network>
            <tests.heap.size>${tests.heap.size}</tests.heap.size>
            <tests.filter>${tests.filter}</tests.filter>
            <tests.version>${elasticsearch.version}</tests.version>
            <tests.locale>${tests.locale}</tests.locale>
            <tests.rest.load_packaged>${tests.rest.load_packaged}</tests.rest.load_packaged>
            <tests.timezone>${tests.timezone}</tests.timezone>
            <es.node.local>${env.ES_TEST_LOCAL}</es.node.local>
            <es.node.mode>${es.node.mode}</es.node.mode>
            <es.logger.level>${es.logger.level}</es.logger.level>
            <tests.security.manager>${tests.security.manager}</tests.security.manager>
            <tests.compatibility>${tests.compatibility}</tests.compatibility>
            <java.awt.headless>true</java.awt.headless>
            <!-- true if we are running tests from maven (as opposed to IDE, 
              etc). allows us to assert certain things work, like libsigar -->
            <tests.maven>true</tests.maven>
            <jna.nosys>true</jna.nosys>
          </systemProperties>
          <listeners>
            <report-text showThrowable="true" showStackTraces="true" showOutput="${tests.output}" showStatusOk="false" showStatusError="true" showStatusFailure="true" showStatusIgnored="true" showSuiteSummary="true" showNumFailures="30" timestamps="false">
              <filtertrace>
                <!-- custom filters: we carefully only omit test infra noise 
                  here -->
                <containsstring contains=".SlaveMain." />
                <containsregex pattern="^(\s+at )(org\.junit\.)" />
                <!-- also includes anonymous classes inside these two: -->
                <containsregex pattern="^(\s+at )(com\.carrotsearch\.randomizedtesting.RandomizedRunner)" />
                <containsregex pattern="^(\s+at )(com\.carrotsearch\.randomizedtesting.ThreadLeakControl)" />
                <containsregex pattern="^(\s+at )(com\.carrotsearch\.randomizedtesting.rules\.)" />
                <containsregex pattern="^(\s+at )(org\.apache\.lucene.util\.TestRule)" />
                <containsregex pattern="^(\s+at )(org\.apache\.lucene.util\.AbstractBeforeAfterRule)" />
              </filtertrace>
            </report-text>
          </listeners>
        </configuration>
        <executions>
          <execution>
            <id>tests</id>
            <phase>test</phase>
            <goals>
              <goal>junit4</goal>
            </goals>
            <configuration>
              <ifNoTests>${tests.ifNoTests}</ifNoTests>
              <skipTests>${skip.unit.tests}</skipTests>
              <listeners>
                <report-ant-xml mavenExtensions="true" dir="${project.build.directory}/surefire-reports" />
                <report-execution-times historyLength="20" file="${basedir}/${execution.hint.file}" />
              </listeners>
              <balancers>
                <execution-times>
                  <fileset dir="${basedir}" includes="${execution.hint.file}" />
                </execution-times>
              </balancers>
              <includes>
                <include>**/*Tests.class</include>
              </includes>
              <excludes>
                <exclude>**/*$*.class</exclude>
              </excludes>
            </configuration>
          </execution>
          <execution>
            <id>integ-tests</id>
            <phase>integration-test</phase>
            <goals>
              <goal>junit4</goal>
            </goals>
            <configuration>
              <ifNoTests>warn</ifNoTests>
              <haltOnFailure>false</haltOnFailure>
              <skipTests>${skip.integ.tests}</skipTests>
              <listeners>
                <report-ant-xml mavenExtensions="true" summaryFile="${project.build.directory}/failsafe-reports/failsafe-summary.xml" dir="${project.build.directory}/failsafe-reports" />
                <report-execution-times historyLength="20" file="${basedir}/${execution.hint.integ.file}" />
              </listeners>
              <balancers>
                <execution-times>
                  <fileset dir="${basedir}" includes="${execution.hint.integ.file}" />
                </execution-times>
              </balancers>
              <includes>
                <include>**/*IT.class</include>
              </includes>
              <systemProperties>
                <!-- let framework know we are running integ tests, for correct 
                  'reproduce with' line -->
                <tests.verify.phase>true</tests.verify.phase>
              </systemProperties>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- disable surefire, we use junit4 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.19</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>de.thetaphi</groupId>
        <artifactId>forbiddenapis</artifactId>
        <version>2.6</version>

        <executions>
          <execution>
            <id>check-forbidden-apis</id>
            <configuration>
              <targetVersion>${maven.compiler.target}</targetVersion>
              <!-- disallow undocumented classes like sun.misc.Unsafe: -->
              <internalRuntimeForbidden>true</internalRuntimeForbidden>
              <!-- if the used Java version is too new, don't fail, just 
                do nothing: -->
              <failOnUnsupportedJava>false</failOnUnsupportedJava>
              <bundledSignatures>
                <!-- This will automatically choose the right signatures 
                  based on 'targetVersion': -->
                <bundledSignature>jdk-unsafe</bundledSignature>
                <bundledSignature>jdk-deprecated</bundledSignature>
                <bundledSignature>jdk-system-out</bundledSignature>
              </bundledSignatures>
              <signaturesFiles>
                <signaturesFile>forbidden/core-signatures.txt</signaturesFile>
                <signaturesFile>forbidden/all-signatures.txt</signaturesFile>
                <signaturesFile>forbidden/third-party-signatures.txt</signaturesFile>
              </signaturesFiles>
              <signatures>${forbidden.signatures}</signatures>
              <suppressAnnotations>
                <annotation>**.SuppressForbidden</annotation>
              </suppressAnnotations>
            </configuration>
            <phase>compile</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
          <execution>
            <id>check-forbidden-test-apis</id>
            <configuration>
              <targetVersion>${maven.compiler.target}</targetVersion>
              <!-- disallow undocumented classes like sun.misc.Unsafe: -->
              <internalRuntimeForbidden>true</internalRuntimeForbidden>
              <!-- if the used Java version is too new, don't fail, just 
                do nothing: -->
              <failOnUnsupportedJava>false</failOnUnsupportedJava>
              <bundledSignatures>
                <!-- This will automatically choose the right signatures 
                  based on 'targetVersion': -->
                <bundledSignature>jdk-unsafe</bundledSignature>
                <bundledSignature>jdk-deprecated</bundledSignature>
              </bundledSignatures>
              <signaturesFiles>
                <signaturesFile>forbidden/test-signatures.txt</signaturesFile>
                <signaturesFile>forbidden/all-signatures.txt</signaturesFile>
              </signaturesFiles>
              <signatures>${forbidden.test.signatures}</signatures>
              <suppressAnnotations>
                <annotation>**.SuppressForbidden</annotation>
              </suppressAnnotations>
            </configuration>
            <phase>test-compile</phase>
            <goals>
              <goal>testCheck</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
