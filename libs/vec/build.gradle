/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import org.elasticsearch.gradle.internal.precommit.CheckForbiddenApisTask

apply plugin: 'elasticsearch.publish'
apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.mrjar'

dependencies {
  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"

  testImplementation(project(":test:framework")) {
    exclude group: 'org.elasticsearch', module: 'elasticsearch-vec'
  }
}

tasks.withType(CheckForbiddenApisTask).configureEach {
  replaceSignatureFiles 'jdk-signatures'
}

tasks.named('forbiddenApisMain21').configure {
  enabled = false
}

tasks.named('checkstyleMain21').configure {
  // these are generated files, they do not conform to checkstyle
  excludes = [ "org/elasticsearch/vec/internal/gen/**"]
}

spotless {
  java {
    // these are generated files, they do not conform to spotless
    targetExclude "src/main21/java/org/elasticsearch/vec/internal/gen/**.java"
  }
}

tasks.withType(Test) {
  var os = org.gradle.internal.os.OperatingSystem.current()
  if (os.toString().contains("aarch64")) {
    var nativePrefix = os.getNativePrefix()
    if (nativePrefix == "darwin")
      nativePrefix = "darwin-aarch64"
    systemProperty "java.library.path", file("platform/${nativePrefix}")
  }
}

// TODO: --enable-native-access= both for test/ALL_UNNAMED, and in the es launcher

tasks.withType(Javadoc) {
  enabled = false
}

// This task is deliberately not depended upon. Run it manually if you
// change the interface between native and java, i.e. if you change a
// signature in vec.h.
//   ./gradlew :libs:elasticsearch-vec:generateExtractedHeaders
// TODO: lazy register
//tasks.register("generateExtractedHeaders", Exec).configure {
//  description "Regenerate extracted headers"
//
//  def jextractHome = System.getenv("JEXTRACT_HOME")
//  if (jextractHome == null || jextractHome.isEmpty())
//     throw new IllegalArgumentException("JEXTRACT_HOME not set")
//  def genIncludes = file("includes.txt")
//  def genHeader = file("native/src/vec/headers/vec.h")
//  def genOutput = file("src/main21/java/")
//
//  inputs.files genIncludes, genHeader
//  outputs.dir genOutput
//
//  executable = "${jextractHome}/bin/jextract"
//  args = [
//    "--output", "${genOutput}",
//    "--source", "@${genIncludes}",
//    "-t" , "org.elasticsearch.vec.internal.gen",
//    "${genHeader}"
//  ]
//}

configurations {
  darwinAarch64
  linuxAarch64
}

artifacts {
  darwinAarch64(new File(projectDir, "platform/darwin-aarch64"))
}

artifacts {
  linuxAarch64(new File(projectDir, "platform/linux-aarch64"))
}
