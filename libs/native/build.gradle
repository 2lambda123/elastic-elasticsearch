/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import org.elasticsearch.gradle.transform.UnzipTransform
import org.elasticsearch.gradle.internal.GenerateProviderManifest
import org.elasticsearch.gradle.internal.util.JavaUtil
import org.gradle.api.internal.artifacts.ArtifactAttributes

import java.util.stream.Collectors

apply plugin: 'elasticsearch.publish'
apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.mrjar'

def isImplAttr = Attribute.of("is.impl", Boolean)

configurations {
  jnaImpl {
    attributes.attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.DIRECTORY_TYPE)
    attributes.attribute(isImplAttr, true)
  }
}

dependencies {
  registerTransform(
    UnzipTransform.class, transformSpec -> {
    transformSpec.getFrom()
      .attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.JAR_TYPE)
      .attribute(isImplAttr, true)
    transformSpec.getTo()
      .attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.DIRECTORY_TYPE)
      .attribute(isImplAttr, true)
    transformSpec.parameters(parameters -> {
      parameters.includeArtifactName.set(true)
    })

  })

  api project(':libs:elasticsearch-core')
  api project(':libs:elasticsearch-logging')
  jnaImpl project(':libs:elasticsearch-native:jna')
  testImplementation(project(":test:framework"))
}

Directory generatedResourcesDir = layout.buildDirectory.dir('generated-resources').get()
def generateProviderManifest = tasks.register("generateJnaProviderManifest", GenerateProviderManifest.class) {
  manifestFile = generatedResourcesDir.file("LISTING.TXT")
  getProviderImplClasspath().from(configurations.jnaImpl)
}

def generateProviderImpl = tasks.register("generateProviderImpl", Sync) {
  destinationDir = generatedResourcesDir.dir("jna-impl").getAsFile()
  into("IMPL-JARS/native-access-jna") {
    from(configurations.jnaImpl)
    from(generateProviderManifest)
  }
}
sourceSets.main.output.dir(generateProviderImpl)

tasks.named('forbiddenApisMain').configure {
  // :libs:elasticsearch-logging does not depend on server
  replaceSignatureFiles 'jdk-signatures'
}

tasks.named('forbiddenApisMain22').configure {
  // TODO: figure out how to allow preview apis
  enabled = false
}


