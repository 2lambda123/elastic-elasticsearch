/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import java.util.stream.Collectors

apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.publish'

//configurations {
//  providerImpl
//  providerDir
//}

dependencies {
  api project(':libs:elasticsearch-core')

  //providerImpl project(':libs:x-content:impl')

  testImplementation(project(":test:framework")) {
    exclude group: 'org.elasticsearch', module: 'elasticsearch-x-content'
  }
}

tasks.named('forbiddenApisMain').configure {
  // x-content does not depend on server
  // TODO: Need to decide how we want to handle for forbidden signatures with the changes to core
  replaceSignatureFiles 'jdk-signatures'
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
          // from com.fasterxml.jackson.dataformat.yaml.YAMLMapper (jackson-dataformat-yaml)
          'com.fasterxml.jackson.databind.ObjectMapper',
          'com.fasterxml.jackson.databind.cfg.MapperBuilder'
  )
}

tasks.named("dependencyLicenses").configure {
  mapping from: /jackson-.*/, to: 'jackson'
}

tasks.named("jarHell").configure { enabled = false }

//tasks.named("jar").configure {
//  into('org/elasticsearch/xcontent/internal') {
//    from configurations.providerImpl
//  }
//}
//
//File providerDirPath = new File(buildDir, 'provider')
//def copyProviderJars = tasks.register("copyProviderJars", Copy) {
//  dependsOn configurations.providerImpl
//  inputs.property('jars', configurations.providerImpl)
//  outputs.dir(providerDirPath)
//  from configurations.providerImpl
//  into providerDirPath
//}
//
//artifacts {
//  providerDir(providerDirPath) {
//    builtBy copyProviderJars
//  }
//}
//
//def generateProviderJarsList = tasks.register("generateProviderJarsList") {
//  File jarsFile = new File(buildDir, 'generated-resources/org/elasticsearch/xcontent/internal/provider-jars.txt')
//  processResources.from(new File(buildDir, 'generated-resources'))
//  inputs.property('jars', configurations.providerImpl)
//  outputs.file(jarsFile)
//  doLast {
//    jarsFile.parentFile.mkdirs()
//    jarsFile.setText(configurations.providerImpl.files.stream()
//      .map(f -> "/" + f.name).collect(Collectors.joining('\n')), 'UTF-8')
//  }
//}
//
//tasks.named("processResources").configure {
//  dependsOn generateProviderJarsList
//}
