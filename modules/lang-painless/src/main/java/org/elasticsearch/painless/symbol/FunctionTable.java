/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

package org.elasticsearch.painless.symbol;

import org.elasticsearch.painless.lookup.PainlessLookupUtility;
import org.objectweb.asm.commons.Method;

import java.lang.invoke.MethodType;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * Stores information about functions directly invokable on the generated script class.
 * Functions marked as internal are generated by lambdas or method references, and are
 * not directly callable by a user.
 */
public class FunctionTable {

    public static class LocalFunction {

        protected final String functionName;
        protected final Class<?> returnType;
        protected final List<Class<?>> typeParameters;
        protected final boolean isInternal;
        protected final boolean isStatic;
        protected final String renamed;

        protected final MethodType methodType;
        protected final Method asmMethod;

        public LocalFunction(
                String functionName, Class<?> returnType, List<Class<?>> typeParameters, boolean isInternal, boolean isStatic) {
            this(functionName, returnType, typeParameters, isInternal, isStatic, null);
        }

        private LocalFunction(
                String functionName, Class<?> returnType, List<Class<?>> typeParameters, boolean isInternal, boolean isStatic,
                String renamed) {

            this.functionName = Objects.requireNonNull(functionName);
            this.returnType = Objects.requireNonNull(returnType);
            this.typeParameters = Collections.unmodifiableList(Objects.requireNonNull(typeParameters));
            this.isInternal = isInternal;
            this.isStatic = isStatic;
            this.renamed = renamed;

            Class<?> javaReturnType = PainlessLookupUtility.typeToJavaType(returnType);
            Class<?>[] javaTypeParameters = typeParameters.stream().map(PainlessLookupUtility::typeToJavaType).toArray(Class<?>[]::new);

            this.methodType = MethodType.methodType(javaReturnType, javaTypeParameters);
            this.asmMethod = new org.objectweb.asm.commons.Method(renamed != null ? renamed : functionName,
                    MethodType.methodType(javaReturnType, javaTypeParameters).toMethodDescriptorString());
        }

        public String getFunctionName() {
            // During dynamic resolution, use the updated name
            return renamed != null ? renamed : functionName;
        }

        public Class<?> getReturnType() {
            return returnType;
        }

        public List<Class<?>> getTypeParameters() {
            return typeParameters;
        }

        public boolean isInternal() {
            return isInternal;
        }

        public boolean isStatic() {
            return isStatic;
        }

        public MethodType getMethodType() {
            return methodType;
        }

        public Method getAsmMethod() {
            return asmMethod;
        }

        public LocalFunction rename(String rename) {
            if (renamed != null) {
                throw new IllegalStateException(
                    "Cannot rename [" + functionName + "/" + typeParameters.size() + "], to [" + rename + "]," +
                        "already renamed [" + renamed + "]");
            }
            return new LocalFunction(functionName, returnType, typeParameters, isInternal, isStatic, rename);
        }
    }

    /**
     * Generates a {@code LocalFunction} key.
     * @param functionName the name of the {@code LocalFunction}
     * @param functionArity the number of parameters for the {@code LocalFunction}
     * @return a {@code LocalFunction} key used for {@code LocalFunction} look up within the {@code FunctionTable}
     */
    public static String buildLocalFunctionKey(String functionName, int functionArity) {
        return functionName + "/" + functionArity;
    }

    protected Map<String, LocalFunction> localFunctions = new HashMap<>();

    public LocalFunction addFunction(
            String functionName, Class<?> returnType, List<Class<?>> typeParameters, boolean isInternal, boolean isStatic) {

        String functionKey = buildLocalFunctionKey(functionName, typeParameters.size());
        if (localFunctions.containsKey(functionKey)) {
            throw new IllegalStateException("Function [" + functionKey + "] already exists");
        }
        LocalFunction function = new LocalFunction(functionName, returnType, typeParameters, isInternal, isStatic);
        localFunctions.put(functionKey, function);
        return function;
    }

    public LocalFunction rename(LocalFunction localFunction, String name) {
        int arity = localFunction.getTypeParameters().size();
        String oldKey = buildLocalFunctionKey(localFunction.getFunctionName(), arity);
        String newKey = buildLocalFunctionKey(name, arity);
        LocalFunction old = localFunctions.remove(oldKey);
        if (old == null) {
            throw new IllegalStateException("Cannot rename [" + oldKey + "] to [" + newKey + "], function does not exist");
        }

        LocalFunction renamed = localFunction.rename(name);
        localFunctions.put(newKey, renamed);
        // Method references may not have been updated, so keep an entry for the old key
        localFunctions.put(oldKey, renamed);
        return renamed;
    }

    public LocalFunction addFunction(LocalFunction function) {
        String functionKey = buildLocalFunctionKey(function.getFunctionName(), function.getTypeParameters().size());
        localFunctions.put(functionKey, function);
        return function;
    }

    public LocalFunction getFunction(String functionName, int functionArity) {
        String functionKey = buildLocalFunctionKey(functionName, functionArity);
        return localFunctions.get(functionKey);
    }

    public LocalFunction getFunction(String functionKey) {
        return localFunctions.get(functionKey);
    }
}
