#
# Licensed to Elasticsearch under one or more contributor
# license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright
# ownership. Elasticsearch licenses this file to you under
# the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

#
# Painless definition file. This defines the hierarchy of classes,
# what methods and fields they have, etc.
#
#### Interfaces

class java.util.function.BiConsumer import {
  void accept(def,def)
  BiConsumer andThen(BiConsumer)
}

class java.util.function.BiFunction import {
  BiFunction andThen(Function)
  def apply(def,def)
}

class java.util.function.BinaryOperator import {
  BinaryOperator maxBy(Comparator)
  BinaryOperator minBy(Comparator)
}

class java.util.function.BiPredicate import {
  BiPredicate and(BiPredicate)
  BiPredicate negate()
  BiPredicate or(BiPredicate)
  boolean test(def,def)
}

class java.util.function.BooleanSupplier import {
  boolean getAsBoolean()
}

class java.util.function.Consumer import {
  void accept(def)
  Consumer andThen(Consumer)
}

class java.util.function.DoubleBinaryOperator import {
  double applyAsDouble(double,double)
}

class java.util.function.DoubleConsumer import {
  void accept(double)
  DoubleConsumer andThen(DoubleConsumer)
}

class java.util.function.DoubleFunction import {
  def apply(double)
}

class java.util.function.DoublePredicate import {
  DoublePredicate and(DoublePredicate)
  DoublePredicate negate()
  DoublePredicate or(DoublePredicate)
  boolean test(double)
}

class java.util.function.DoubleSupplier import {
  double getAsDouble()
}

class java.util.function.DoubleToIntFunction import {
  int applyAsInt(double)
}

class java.util.function.DoubleToLongFunction import {
  long applyAsLong(double)
}

class java.util.function.DoubleUnaryOperator import {
  DoubleUnaryOperator andThen(DoubleUnaryOperator)
  double applyAsDouble(double)
  DoubleUnaryOperator compose(DoubleUnaryOperator)
  DoubleUnaryOperator identity()
}

class java.util.function.Function import {
  Function andThen(Function)
  def apply(def)
  Function compose(Function)
  Function identity()
}

class java.util.function.IntBinaryOperator import {
  int applyAsInt(int,int)
}

class java.util.function.IntConsumer import {
  void accept(int)
  IntConsumer andThen(IntConsumer)
}

class java.util.function.IntFunction import {
  def apply(int)
}

class java.util.function.IntPredicate import {
  IntPredicate and(IntPredicate)
  IntPredicate negate()
  IntPredicate or(IntPredicate)
  boolean test(int)
}

class java.util.function.IntSupplier import {
  int getAsInt()
}

class java.util.function.IntToDoubleFunction import {
  double applyAsDouble(int)
}

class java.util.function.IntToLongFunction import {
  long applyAsLong(int)
}

class java.util.function.IntUnaryOperator import {
  IntUnaryOperator andThen(IntUnaryOperator)
  int applyAsInt(int)
  IntUnaryOperator compose(IntUnaryOperator)
  IntUnaryOperator identity()
}

class java.util.function.LongBinaryOperator import {
  long applyAsLong(long,long)
}

class java.util.function.LongConsumer import {
  void accept(long)
  LongConsumer andThen(LongConsumer)
}

class java.util.function.LongFunction import {
  def apply(long)
}

class java.util.function.LongPredicate import {
  LongPredicate and(LongPredicate)
  LongPredicate negate()
  LongPredicate or(LongPredicate)
  boolean test(long)
}

class java.util.function.LongSupplier import {
  long getAsLong()
}

class java.util.function.LongToDoubleFunction import {
  double applyAsDouble(long)
}

class java.util.function.LongToIntFunction import {
  int applyAsInt(long)
}

class java.util.function.LongUnaryOperator import {
  LongUnaryOperator andThen(LongUnaryOperator)
  long applyAsLong(long)
  LongUnaryOperator compose(LongUnaryOperator)
  LongUnaryOperator identity()
}

class java.util.function.ObjDoubleConsumer import {
  void accept(def,double)
}

class java.util.function.ObjIntConsumer import {
  void accept(def,int)
}

class java.util.function.ObjLongConsumer import {
  void accept(def,long)
}

class java.util.function.Predicate import {
  Predicate and(Predicate)
  Predicate isEqual(def)
  Predicate negate()
  Predicate or(Predicate)
  boolean test(def)
}

class java.util.function.Supplier import {
  def get()
}

class java.util.function.ToDoubleBiFunction import {
  double applyAsDouble(def,def)
}

class java.util.function.ToDoubleFunction import {
  double applyAsDouble(def)
}

class java.util.function.ToIntBiFunction import {
  int applyAsInt(def,def)
}

class java.util.function.ToIntFunction import {
  int applyAsInt(def)
}

class java.util.function.ToLongBiFunction import {
  long applyAsLong(def,def)
}

class java.util.function.ToLongFunction import {
  long applyAsLong(def)
}

class java.util.function.UnaryOperator import {
  UnaryOperator identity()
}
