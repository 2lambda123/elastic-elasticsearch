/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import org.apache.tools.ant.taskdefs.condition.Os
import org.elasticsearch.gradle.Architecture
import org.elasticsearch.gradle.OS
import org.elasticsearch.gradle.internal.info.BuildParams
import org.elasticsearch.gradle.internal.test.AntFixture

apply plugin: 'elasticsearch.test-with-dependencies'
apply plugin: 'elasticsearch.jdk-download'
apply plugin: 'elasticsearch.internal-yaml-rest-test'
apply plugin: 'elasticsearch.java-rest-test'
apply plugin: 'elasticsearch.yaml-rest-compat-test'
apply plugin: 'elasticsearch.internal-cluster-test'

esplugin {
  description 'Provides codecs for reading Lucene 5 formats'
  classname 'org.elasticsearch.oldcodecs.Lucene5Plugin'
}

project.afterEvaluate(p -> {
  project.getTasks().withType(JavaCompile.class).configureEach(compileTask -> {
    CompileOptions compileOptions = compileTask.getOptions()
    List<String> compilerArgs = compileOptions.getCompilerArgs()
    compilerArgs.remove("-Werror")
    compilerArgs.remove("-Xlint:all,-path,-serial,-options,-deprecation,-try")
    compilerArgs.remove("-Xdoclint:all")
    compilerArgs.remove("-Xdoclint:-missing")
  })
})



configurations {
  oldesFixture
  es2
  es1
}

dependencies {
  oldesFixture project(':test:fixtures:old-elasticsearch')
  es2 'org.elasticsearch.distribution.zip:elasticsearch:2.4.5@zip'
  es1 'org.elasticsearch:elasticsearch:1.7.6@zip'
}

jdks {
  legacy {
    vendor = 'adoptium'
    version = '8u302+b08'
    platform = OS.current().name().toLowerCase()
    architecture = Architecture.current().name().toLowerCase()
  }
}

String repoLocation = "${buildDir}/cluster/shared/repo"
testClusters.matching { it.name == "javaRestTest" }.configureEach {
  setting 'path.repo', repoLocation
}

if (Os.isFamily(Os.FAMILY_WINDOWS)) {
  logger.warn("Disabling reindex-from-old tests because we can't get the pid file on windows")
  tasks.named("javaRestTest").configure {
    systemProperty "tests.fromOld", "false"
  }
} else if (rootProject.rootDir.toString().contains(" ")) {
  logger.warn("Disabling reindex-from-old tests because Elasticsearch 1.7 won't start with spaces in the path")
  tasks.named("javaRestTest").configure {
    systemProperty "tests.fromOld", "false"
  }
} else {
  /* Set up tasks to unzip and run the old versions of ES before running the
   * integration tests. */
  def versions = ['2', '1']
  versions.each { version ->
    // TODO Rene: we should be able to replace these unzip tasks with gradle artifact transforms
    TaskProvider<Sync> unzip = tasks.register("unzipEs${version}", Sync) {
      Configuration oldEsDependency = configurations['es' + version]
      dependsOn oldEsDependency
      /* Use a closure here to delay resolution of the dependency until we need
       * it */
      from {
        oldEsDependency.collect { zipTree(it) }
      }
      into temporaryDir
    }

    TaskProvider<AntFixture> fixture = tasks.register("oldEs${version}Fixture", AntFixture) {
      dependsOn project.configurations.oldesFixture, jdks.legacy
      dependsOn unzip
      executable = "${BuildParams.runtimeJavaHome}/bin/java"
      env 'CLASSPATH', "${-> project.configurations.oldesFixture.asPath}"
      // old versions of Elasticsearch need JAVA_HOME
      env 'JAVA_HOME', jdks.legacy.javaHomePath
      // If we are running on certain arm systems we need to explicitly set the stack size to overcome JDK page size bug
      if (Architecture.current() == Architecture.AARCH64) {
        env 'ES_JAVA_OPTS', '-Xss512k'
      }
      args 'oldes.OldElasticsearch',
        baseDir,
        unzip.get().temporaryDir,
        version == '090',
        "path.repo: ${repoLocation}"
      waitCondition = { fixture, ant ->
        // the fixture writes the ports file when Elasticsearch's HTTP service
        // is ready, so we can just wait for the file to exist
        return fixture.portsFile.exists()
      }
    }

    tasks.named("javaRestTest").configure {
      dependsOn fixture
      systemProperty "tests.fromOld", "true"
      systemProperty "tests.repoLocation", repoLocation
      /* Use a closure on the string to delay evaluation until right before we
       * run the integration tests so that we can be sure that the file is
       * ready. */
      nonInputProperties.systemProperty "es${version}.port", "${-> fixture.get().addressAndPort}"
    }
  }
}

