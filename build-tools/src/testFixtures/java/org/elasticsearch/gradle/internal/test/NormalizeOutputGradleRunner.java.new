package org.elasticsearch.gradle.internal.test;

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.BuildTask;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.InvalidPluginMetadataException;
import org.gradle.testkit.runner.InvalidRunnerConfigurationException;
import org.gradle.testkit.runner.TaskOutcome;
import org.gradle.testkit.runner.UnexpectedBuildFailure;
import org.gradle.testkit.runner.UnexpectedBuildSuccess;
import org.jetbrains.annotations.Nullable;

import java.io.File;
import java.io.Writer;
import java.net.URI;
import java.util.List;
import java.util.Map;

import static org.elasticsearch.gradle.internal.test.TestUtils.normalizeString;

public class NormalizeOutputGradleRunner extends GradleRunner {

    public NormalizeOutputGradleRunner(GradleRunner delegate, File projectRootDir) {
        this.delegate = delegate;
        this.projectRootDir = projectRootDir;
    }

    @Override
    public GradleRunner withGradleVersion(String gradleVersion) {
        return delegate.withGradleVersion(gradleVersion);
    }

    @Override
    public GradleRunner withGradleInstallation(File file) {
        return delegate.withGradleInstallation(file);
    }

    @Override
    public GradleRunner withGradleDistribution(URI uri) {
        return delegate.withGradleDistribution(uri);
    }

    @Override
    public GradleRunner withTestKitDir(File file) {
        return delegate.withTestKitDir(file);
    }

    @Override
    public File getProjectDir() {
        return delegate.getProjectDir();
    }

    @Override
    public GradleRunner withProjectDir(File projectDir) {
        return delegate.withProjectDir(projectDir);
    }

    @Override
    public List<String> getArguments() {
        return delegate.getArguments();
    }

    @Override
    public GradleRunner withArguments(List<String> arguments) {
        return delegate.withArguments(arguments);
    }

    @Override
    public GradleRunner withArguments(String... arguments) {
        return withArguments(List.of(arguments));
    }

    @Override
    public List<? extends File> getPluginClasspath() {
        return delegate.getPluginClasspath();
    }

    @Override
    public GradleRunner withPluginClasspath() throws InvalidPluginMetadataException {
        return delegate.withPluginClasspath();
    }

    @Override
    public GradleRunner withPluginClasspath(Iterable<? extends File> iterable) {
        return delegate.withPluginClasspath(iterable);
    }

    @Override
    public boolean isDebug() {
        return delegate.isDebug();
    }

    @Override
    public GradleRunner withDebug(boolean b) {
        return delegate.withDebug(b);
    }

    @Override
    public Map<String, String> getEnvironment() {
        return delegate.getEnvironment();
    }

    @Override
    public GradleRunner withEnvironment(Map<String, String> map) {
        return delegate.withEnvironment(map);
    }

    @Override
    public GradleRunner forwardStdOutput(Writer writer) {
        return delegate.forwardStdOutput(writer);
    }

    @Override
    public GradleRunner forwardStdError(Writer writer) {
        return delegate.forwardStdOutput(writer);
    }

    @Override
    public GradleRunner forwardOutput() {
        return delegate.forwardOutput();
    }

    @Override
    public BuildResult build() throws InvalidRunnerConfigurationException, UnexpectedBuildFailure {
        return new NormalizedBuildResult(delegate.build());
    }

    @Override
    public BuildResult buildAndFail() throws InvalidRunnerConfigurationException, UnexpectedBuildSuccess {
        return delegate.buildAndFail();
    }

    private GradleRunner delegate;
    private File projectRootDir;

    private class NormalizedBuildResult implements BuildResult {
        private BuildResult delegate;
        private String normalizedString = null;

        NormalizedBuildResult(BuildResult delegate) {
            this.delegate = delegate;
        }

        @Override
        public String getOutput() {
            if(normalizedString == null) {
                normalizedString = normalizeString(delegate.getOutput(), projectRootDir);
            }
            return normalizedString;
        }

        @Override
        public List<BuildTask> getTasks() {
            return delegate.getTasks();
        }

        @Override
        public List<BuildTask> tasks(TaskOutcome taskOutcome) {
            return delegate.tasks(taskOutcome);
        }

        @Override
        public List<String> taskPaths(TaskOutcome taskOutcome) {
            return delegate.taskPaths(taskOutcome);
        }

        @Nullable
        @Override
        public BuildTask task(String s) {
            return delegate.task(s);
        }
    }
}
