import org.apache.tools.ant.taskdefs.condition.Os
import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.VersionProperties
import org.elasticsearch.gradle.internal.BwcVersions
import org.elasticsearch.gradle.internal.JarApiComparisonTask
import org.elasticsearch.gradle.internal.info.BuildParams

import static org.elasticsearch.gradle.internal.InternalDistributionBwcSetupPlugin.buildBwcTaskName

BuildParams.bwcVersions.withIndexCompatible({ it.onOrAfter(Version.fromString(ext.stableApiSince))
  && it != VersionProperties.elasticsearchVersion
}) { bwcVersion, baseName ->

  BwcVersions.UnreleasedVersionInfo unreleasedVersion = BuildParams.bwcVersions.unreleasedInfo(bwcVersion)
  Configuration stableApiConfiguration = configurations.create("stableApi${baseName}") {
    transitive = false
  }
  Object libDependency = null

  if (unreleasedVersion) {
    // For unreleased snapshot versions, build them from source
    libDependency = files(project(unreleasedVersion.gradleProjectPath).tasks.named(buildBwcTaskName(project.name)))
  } else {
    // For released versions, download it
    libDependency = "org.elasticsearch:" + project.name + ":${bwcVersion}"
  }

  dependencies {
    "stableApi${baseName}"(libDependency)
  }

  def jarApiComparisonTask = tasks.register(bwcTaskName(bwcVersion), JarApiComparisonTask) {
    // TODO: I know cross-project dependencies are bad, but I just wanted to get this working...
    dependsOn project(":libs:" + project.name).tasks.named("jar")
    oldJar = stableApiConfiguration
    newJar = files(project(":libs:" + project.name).tasks.named("jar")).getSingleFile()
  }

  jarApiComparisonTask.configure {
    onlyIf {
      !Os.isFamily(Os.FAMILY_WINDOWS)
    }
  }
}
