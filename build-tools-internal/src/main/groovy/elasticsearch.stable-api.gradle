import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.VersionProperties
import org.elasticsearch.gradle.internal.BwcVersions
import org.elasticsearch.gradle.internal.JarApiComparisonTask
import org.elasticsearch.gradle.internal.info.BuildParams

import static org.elasticsearch.gradle.internal.InternalDistributionBwcSetupPlugin.buildBwcTaskName

configurations {
  stableApi
}

BuildParams.bwcVersions.allIndexCompatible.findAll({ it.onOrAfter(Version.fromString(ext.stableApiSince)) && it != VersionProperties.
  elasticsearchVersion
}).
  each { bwcVersion ->
  def baseName = "v${bwcVersion}"

  BwcVersions.UnreleasedVersionInfo unreleasedVersion = BuildParams.bwcVersions.unreleasedInfo(bwcVersion)
  Configuration stableApiConfiguration = configurations.create("stableApi${baseName}")
  Object libDependency = null

  if (unreleasedVersion) {
    // For unreleased snapshot versions, build them from source
    libDependency = files(project(unreleasedVersion.gradleProjectPath).tasks.named(buildBwcTaskName(project.name)))
  } else {
    // For released versions, download it
    libDependency = "org.elasticsearch:" + project.name + ":${bwcVersion}"
  }

  dependencies {
    "stableApi${baseName}"(libDependency)
  }

  tasks.register(bwcTaskName(bwcVersion), JarApiComparisonTask) {
    dependsOn configurations."stableApi${baseName}"
    // TODO: "normalize" input with a classpath resolution strategy
    oldJar.fileProvider(project.provider(() -> configurations."stableApi${baseName}".singleFile))
    newJar = tasks.named("jar").flatMap(t -> t.archiveFile)
  }
}
