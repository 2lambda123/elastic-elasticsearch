/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import org.elasticsearch.gradle.testclusters.RunTask

boolean proxyMode = Boolean.valueOf(providers.systemProperty('proxyMode').getOrElse('true'))

def fulfillingCluster = testClusters.register('fulfilling-cluster') {
  testDistribution = providers.systemProperty('run.distribution').orElse('default').get()

  setting 'xpack.watcher.enabled', 'false'
  setting 'xpack.ml.enabled', 'false'
  setting 'xpack.license.self_generated.type', 'trial'
  setting 'xpack.security.enabled', 'true'
  setting 'xpack.security.transport.ssl.enabled',  'true'
  setting 'xpack.security.transport.ssl.client_authentication', 'required'
  extraConfigFile 'transport-tls-keystore.p12', new File(projectDir, "build-tools-internal/src/main/resources/run.ssl/private-cert2.p12")
  extraConfigFile 'public-ca.pem', new File(projectDir, "build-tools-internal/src/main/resources/run.ssl/public-ca.pem")
  setting 'xpack.security.transport.ssl.keystore.path', 'transport-tls-keystore.p12'
  setting 'xpack.security.transport.ssl.certificate_authorities', 'public-ca.pem'
  if (providers.systemProperty('https').isPresent()) {
    setting 'xpack.security.http.ssl.enabled',  'true'
    setting 'xpack.security.http.ssl.certificate_authorities', 'public-ca.pem'
    extraConfigFile 'http.p12', new File(projectDir, "build-tools-internal/src/main/resources/run.ssl/private-cert2.p12")
    setting 'xpack.security.http.ssl.keystore.path', 'http.p12'
  }
  user username: 'elastic-admin', password: 'elastic-password', role: '_es_test_root'
}

def queryingCluster = testClusters.register('querying-cluster') {
  testDistribution = providers.systemProperty('run.distribution').orElse('default').get()

  setting 'xpack.watcher.enabled', 'false'
  setting 'xpack.ml.enabled', 'false'
  setting 'xpack.license.self_generated.type', 'trial'
  setting 'cluster.remote.connections_per_cluster', "1"
  setting 'xpack.security.enabled', 'true'

  setting 'xpack.security.transport.ssl.enabled',  'true'
  setting 'xpack.security.transport.ssl.client_authentication', 'required'
  extraConfigFile 'transport-tls-keystore.p12', new File(projectDir, "build-tools-internal/src/main/resources/run.ssl/private-cert1.p12")
  extraConfigFile 'public-ca.pem', new File(projectDir, "build-tools-internal/src/main/resources/run.ssl/public-ca.pem")
  setting 'xpack.security.transport.ssl.keystore.path', 'transport-tls-keystore.p12'
  setting 'xpack.security.transport.ssl.certificate_authorities', 'public-ca.pem'
  if (providers.systemProperty('https').isPresent()) {
    setting 'xpack.security.http.ssl.enabled',  'true'
    setting 'xpack.security.http.ssl.certificate_authorities', 'public-ca.pem'
    extraConfigFile 'http.p12', new File(projectDir, "build-tools-internal/src/main/resources/run.ssl/private-cert1.p12")
    setting 'xpack.security.http.ssl.keystore.path', 'http.p12'
  }
  user username: 'elastic-admin', password: 'elastic-password', role: '_es_test_root'
}


tasks.register("run-ccs", RunTask) {
  useCluster fulfillingCluster
  useCluster queryingCluster
  doFirst {
    queryingCluster.get().getNodes().each { node ->
      if (proxyMode) {
        node.setting('cluster.remote.my_remote_cluster.mode', 'proxy')
        node.setting('cluster.remote.my_remote_cluster.proxy_address', "\"${fulfillingCluster.get().getAllTransportPortURI().get(0)}\"")
      } else {
        node.setting('cluster.remote.my_remote_cluster.seeds', fulfillingCluster.get().getAllTransportPortURI().collect { "\"$it\"" }.toString())
      }
    }
    queryingCluster.get().restart() //updates the on-disk config

    println "** Querying cluster HTTP endpoints are: ${-> queryingCluster.get().allHttpSocketURI.join(",")}"
    println "** Querying cluster transport endpoints are: ${-> queryingCluster.get().getAllTransportPortURI().join(",")}"
    println "** Fulfilling cluster HTTP endpoints are: ${-> fulfillingCluster.get().allHttpSocketURI.join(",")}"
    println "** Fulfilling cluster transport endpoints are: ${-> fulfillingCluster.get().getAllTransportPortURI().join(",")}"
  }
}
