import org.elasticsearch.gradle.internal.info.BuildParams
// Subprojects aren't published so do not assemble
subprojects { p ->
  p.tasks.matching { it.name.equals('assemble') }.configureEach {
    enabled = false
  }
  // Disable example project testing with FIPS JVM
  tasks.withType(Test) {
    onlyIf {
      BuildParams.inFipsJvm == false
    }
  }

  // configure project dependencies for yaml rest test plugin.
  // plugin defaults to external available artifacts
  p.getPluginManager().withPlugin("elasticsearch.yaml-rest-test", new Action<AppliedPlugin>() {
    @Override
    void execute(AppliedPlugin appliedPlugin) {
        p.dependencies.add("yamlRestTestImplementation", project(":test:framework"))
        p.dependencies.add("restTestSpecs", p.dependencies.project(path:':rest-api-spec', configuration:'basicRestSpecs'))
    }
  })
}

configure(project('painless-whitelist')) {
  configurations.all {
    resolutionStrategy.dependencySubstitution {
      substitute module('org.elasticsearch.plugin:elasticsearch-scripting-painless-spi') with project(':modules:lang-painless:spi')
      substitute module('org.elasticsearch.test:logger-usage') with project(':test:logger-usage')
    }
  }
}

configure(project('security-authorization-engine')) {
  configurations.all {
    resolutionStrategy.dependencySubstitution {
      substitute module('org.elasticsearch.plugin:x-pack-core') with project(':x-pack:plugin:core')
      substitute module('org.elasticsearch.client:x-pack-transport') with project(':x-pack:transport-client')
      substitute module('org.elasticsearch.test:logger-usage') with project(':test:logger-usage')
    }
  }
}
