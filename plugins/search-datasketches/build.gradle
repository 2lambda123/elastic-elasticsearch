apply plugin: 'elasticsearch.esplugin'

esplugin {
  description 'DataSketches aggregation support for elasticsearch.'
  classname 'org.elasticsearch.plugin.datasketches.DataSketchesPlugin'
}

dependencies {
    compile project(':server')
    compile group: 'org.apache.datasketches', name: 'datasketches-java', version: '1.3.0-incubating'
    compile group: 'org.apache.datasketches', name: 'datasketches-memory', version: '1.2.0-incubating'
    runtimeOnly 'com.google.guava:guava:20.0'
}

thirdPartyAudit {
  ignoreViolations(
    // uses internal java api: sun.misc.Unsafe
    'com.google.common.cache.Striped64',
    'com.google.common.cache.Striped64$1',
    'com.google.common.cache.Striped64$Cell',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3',
    'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator',
    'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1',
    'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper',
    'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1',
    'org.apache.datasketches.hash.MurmurHash3v2',
    'org.apache.datasketches.memory.AccessByteBuffer',
    'org.apache.datasketches.memory.AllocateDirect',
    'org.apache.datasketches.memory.AllocateDirectMap',
    'org.apache.datasketches.memory.AllocateDirect$Deallocator',
    'org.apache.datasketches.memory.BaseState',
    'org.apache.datasketches.memory.BaseWritableBufferImpl',
    'org.apache.datasketches.memory.BaseWritableMemoryImpl',
    'org.apache.datasketches.memory.CompareAndCopy',
    'org.apache.datasketches.memory.JDK7Compatible',
    'org.apache.datasketches.memory.NioBits',
    'org.apache.datasketches.memory.NonNativeWritableMemoryImpl',
    'org.apache.datasketches.memory.NonNativeWritableBufferImpl',
    'org.apache.datasketches.memory.UnsafeUtil',
    'org.apache.datasketches.memory.Utf8',
    'org.apache.datasketches.memory.WritableBufferImpl',
    'org.apache.datasketches.memory.WritableMemoryImpl',
    'org.apache.datasketches.memory.XxHash64',
  )

  ignoreMissingClasses (
    // commons-logging optional dependencies
    'org.slf4j.Logger',
    'org.slf4j.LoggerFactory',
  )
}

restResources {
  restApi {
    includeCore '_common', 'indices', 'index', 'search'
  }
}

test {
  systemProperty 'tests.security.manager', false
}

integTest {
  runner {
    systemProperty 'tests.security.manager', 'false'
  }
}
//
//def policyPath = file("${buildDir}/tmp")
//File policyFile = file("${buildDir}/tmp/java.policy")
//task writeJavaPolicy {
//  if (!policyPath.exists()) {
//    mkdir policyPath
//  }
//  policyFile.write(
//    [
//      "grant {",
//      "permission java.lang.RuntimePermission \"accessDeclaredMembers\";",
//      "permission java.lang.RuntimePermission \"accessClassInPackage.sun.misc\";",
//      "permission java.lang.RuntimePermission \"accessClassInPackage.sun.misc.*\";",
//      "permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";",
//      "};"
//    ].join("\n")
//  )
//}
//
//// The normal integration test runner will just test that the plugin loads
//integTest.runner {
//  systemProperty 'tests.security.manager', false
//  dependsOn 'writeJavaPolicy'
//  jvmArgs "-Djava.security.policy=${buildDir}/tmp/java.policy"
//  systemProperty 'java.security.policy', "file://${buildDir}/tmp/java.policy"
//  //systemProperty 'tests.rest.suite', 'search_datasketches/10_basic'
//}
//
//integTestRunner {
//  systemProperty 'tests.security.manager', false
//  jvmArgs "-Djava.security.policy=${buildDir}/tmp/java.policy"
//}
