import org.elasticsearch.gradle.test.RestIntegTestTask
import org.elasticsearch.gradle.test.rest.YamlRestTestPlugin

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'elasticsearch.yaml-rest-test'

esplugin {
  description 'DataSketches aggregation support for elasticsearch.'
  classname 'org.elasticsearch.plugin.datasketches.DataSketchesPlugin'
}

dependencies {
    compile project(':server')
    compile group: 'org.apache.datasketches', name: 'datasketches-java', version: '1.3.0-incubating'
    compile group: 'org.apache.datasketches', name: 'datasketches-memory', version: '1.2.0-incubating'
    runtimeOnly 'com.google.guava:guava:20.0'
}

thirdPartyAudit {
  ignoreViolations(
    // uses internal java api: sun.misc.Unsafe
    'com.google.common.cache.Striped64',
    'com.google.common.cache.Striped64$1',
    'com.google.common.cache.Striped64$Cell',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3',
    'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator',
    'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1',
    'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper',
    'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1',
    'org.apache.datasketches.hash.MurmurHash3v2',
    'org.apache.datasketches.memory.AccessByteBuffer',
    'org.apache.datasketches.memory.AllocateDirect',
    'org.apache.datasketches.memory.AllocateDirectMap',
    'org.apache.datasketches.memory.AllocateDirect$Deallocator',
    'org.apache.datasketches.memory.BaseState',
    'org.apache.datasketches.memory.BaseWritableBufferImpl',
    'org.apache.datasketches.memory.BaseWritableMemoryImpl',
    'org.apache.datasketches.memory.CompareAndCopy',
    'org.apache.datasketches.memory.JDK7Compatible',
    'org.apache.datasketches.memory.NioBits',
    'org.apache.datasketches.memory.NonNativeWritableMemoryImpl',
    'org.apache.datasketches.memory.NonNativeWritableBufferImpl',
    'org.apache.datasketches.memory.UnsafeUtil',
    'org.apache.datasketches.memory.Utf8',
    'org.apache.datasketches.memory.WritableBufferImpl',
    'org.apache.datasketches.memory.WritableMemoryImpl',
    'org.apache.datasketches.memory.XxHash64',
  )

  ignoreMissingClasses (
    // commons-logging optional dependencies
    'org.slf4j.impl.StaticLoggerBinder',
    'org.slf4j.impl.StaticMDCBinder',
    'org.slf4j.impl.StaticMarkerBinder'
  )
}

yamlRestTest {
  systemProperty 'tests.security.manager', false
}


