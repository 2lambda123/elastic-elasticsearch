/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

esplugin {
    description 'Discovery file plugin enables unicast discovery from hosts stored in a file.'
    classname 'org.elasticsearch.discovery.file.FileBasedDiscoveryPlugin'
}

bundlePlugin {
    from('config/discovery-file') {
        into 'config'
    }
}

integTest {
    cluster {
        distribution = 'zip'
        numNodes = 2
        clusterName = "discovery-file-test-cluster"
        // unicast hosts in elasticsearch.yaml shouldn't exist,
        // we are using the file-based hosts found in unicast_hosts.txt
        unicastTransportUri = { seedNode, node, ant -> null }
        // final setup task to write the unicast_hosts.txt file using just
        // the seed node's transport URI
        finalSetup = { node, seedNode, ant ->
            // for non seed nodes, set the seed node as the unicast host
            if (node != seedNode) {
                ant.waitfor(maxwait: '20', maxwaitunit: 'second', checkevery: '500', checkeveryunit: 'millisecond') {
                    ant.resourceexists {
                        ant.file(file: seedNode.transportPortsFile)
                    }
                }
                File unicastHostsFile = new File(node.confDir, 'discovery-file/unicast_hosts.txt')
                unicastHostsFile.setText(seedNode.transportUri(), 'UTF-8')
            }
        }
    }
}
