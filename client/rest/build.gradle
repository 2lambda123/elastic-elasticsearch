/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.elasticsearch.gradle.precommit.PrecommitTasks

plugins {
  id "com.github.johnrengelman.shadow" version "2.0.1"
}

apply plugin: 'elasticsearch.build'
apply plugin: 'ru.vyarus.animalsniffer'
apply plugin: 'nebula.maven-base-publish'
apply plugin: 'nebula.maven-scm'

targetCompatibility = JavaVersion.VERSION_1_7
sourceCompatibility = JavaVersion.VERSION_1_7

group = 'org.elasticsearch.client'
archivesBaseName = 'elasticsearch-rest-client'

publishing {
  publications {
    nebula {
      artifactId = archivesBaseName
    }
  }
}

configurations {
  shade {
    transitive = false
  }
}

// Useful for build time dependencies, as it is generated before compilation of the source in the rest client.
// This cannot be used as the final shaded jar, as it will contain the compiled source and dependencies
File shadedDir = file("${buildDir}/shaded")
File shadedSrcDir = file("${buildDir}/generated-dummy-shaded")
task shadeDeps(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  destinationDir = shadedDir
  configurations = [project.configurations.shade]
  classifier = 'deps'
  relocate 'org.apache', 'internal.org.apache'

  doLast {
    shadedSrcDir.mkdir()
  }
}

// Actual task for
shadowJar {
  configurations = [project.configurations.shade]
  classifier = null
  relocate 'org.apache', 'internal.org.apache'
}

jar {
  // rename the default jar because we are removing the classifier from the shadowJar, which is a null classifier
  classifier = 'nodeps'
}

project.tasks.jar.dependsOn project.tasks.shadowJar

dependencies {
  shade "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  shade "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  shade "org.apache.httpcomponents:httpasyncclient:${versions.httpasyncclient}"
  shade "org.apache.httpcomponents:httpcore-nio:${versions.httpcore}"
  shade "commons-codec:commons-codec:${versions.commonscodec}"
  shade "commons-logging:commons-logging:${versions.commonslogging}"

  compile shadeDeps.outputs.files

  testCompile "org.elasticsearch.client:test:${version}"
  testCompile "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testCompile "junit:junit:${versions.junit}"
  testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}"
  testCompile "org.elasticsearch:securemock:${versions.securemock}"
  testCompile "org.elasticsearch:mocksocket:${versions.mocksocket}"
  testCompile "org.codehaus.mojo:animal-sniffer-annotations:1.15"
  signature "org.codehaus.mojo.signature:java17:1.0@signature"
}

sourceSets.main.output.dir(shadedSrcDir, builtBy: 'shadeDeps')

dependencyLicenses.dependencies = project.configurations.shade

forbiddenApisMain {
  //client does not depend on core, so only jdk and http signatures should be checked
  signaturesURLs = [PrecommitTasks.getResource('/forbidden/jdk-signatures.txt'),
                    PrecommitTasks.getResource('/forbidden/http-signatures.txt')]
}

forbiddenApisTest {
  //we are using jdk-internal instead of jdk-non-portable to allow for com.sun.net.httpserver.* usage
  bundledSignatures -= 'jdk-non-portable'
  bundledSignatures += 'jdk-internal'
  //client does not depend on core, so only jdk signatures should be checked
  signaturesURLs = [PrecommitTasks.getResource('/forbidden/jdk-signatures.txt'),
                    PrecommitTasks.getResource('/forbidden/http-signatures.txt')]
}

//JarHell is part of es core, which we don't want to pull in
jarHell.enabled = false

namingConventions {
  testClass = 'org.elasticsearch.client.RestClientTestCase'
  //we don't have integration tests
  skipIntegTestInDisguise = true
}

thirdPartyAudit.excludes = [
  //commons-logging optional dependencies
  'internal.org.apache.avalon.framework.logger.Logger',
  'internal.org.apache.log.Hierarchy',
  'internal.org.apache.log.Logger',
  'internal.org.apache.log4j.Category',
  'internal.org.apache.log4j.Level',
  'internal.org.apache.log4j.Logger',
  'internal.org.apache.log4j.Priority',
  //commons-logging provided dependencies
  'javax.servlet.ServletContextEvent',
  'javax.servlet.ServletContextListener'
]
