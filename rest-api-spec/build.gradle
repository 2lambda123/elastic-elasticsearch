import org.elasticsearch.gradle.OS

apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.publish'
apply plugin: 'elasticsearch.rest-resources'
apply plugin: 'elasticsearch.validate-rest-spec'
apply plugin: 'elasticsearch.yaml-rest-test'
apply plugin: 'elasticsearch.yaml-rest-compat-test'

restResources {
  restTests {
    includeCore '*'
  }
}

// REST API specifications are published under the Apache 2.0 License
ext.projectLicenses = ['The Apache Software License, Version 2.0': 'http://www.apache.org/licenses/LICENSE-2.0']
ext.licenseFile = rootProject.file('licenses/APACHE-LICENSE-2.0.txt')

artifacts {
  restSpecs(new File(projectDir, "src/main/resources/rest-api-spec/api"))
  restTests(new File(projectDir, "src/yamlRestTest/resources/rest-api-spec/test"))
}

testClusters.all {
  module ':modules:mapper-extras'
}

tasks.named("test").configure { enabled = false }
tasks.named("jarHell").configure { enabled = false }

tasks.named("yamlRestCompatTest").configure {
  onlyIf {
    // Skip these tests on Windows since the blacklist exceeds Windows CLI limits
    OS.current() != OS.WINDOWS
  }

  systemProperty 'tests.rest.blacklist', [
  ].join(',')
}

tasks.named("transformV7RestTests").configure({ task ->
  task.replaceMatch("_type", "_doc")
  task.addAllowedWarningRegex("\\[types removal\\].*")
  task.replaceMatch("nodes.\$node_id.roles.8", "ml", "node_info role test")
  task.replaceMatch("nodes.\$node_id.roles.9", "remote_cluster_client", "node_info role test")
  task.removeMatch("nodes.\$node_id.roles.10", "node_info role test")
  task.replaceIsTrue("test_index.mappings.type_1", "test_index.mappings._doc")
  task.replaceIsFalse("test_index.mappings.type_1", "test_index.mappings._doc")
  task.replaceIsFalse("test-1.mappings.my_type", "test-1.mappings._doc")
  // overrides for indices.get_field_mapping
  task.replaceKeyInLength("test_index.mappings.test_type.text.mapping.text.type",
    "test_index.mappings._doc.text.mapping.text.type"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.text.mapping.text.analyzer",
    "test_index.mappings._doc.text.mapping.text.analyzer"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.t1.full_name",
    "test_index.mappings._doc.t1.full_name"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.t2.full_name",
    "test_index.mappings._doc.t2.full_name"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.obj\\.t1.full_name",
    "test_index.mappings._doc.obj\\.t1.full_name"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.obj\\.i_t1.full_name",
    "test_index.mappings._doc.obj\\.i_t1.full_name"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.obj\\.i_t3.full_name",
    "test_index.mappings._doc.obj\\.i_t3.full_name"
  )
  task.replaceKeyInLength("test_index.mappings.test_type",
    "test_index.mappings._doc"
  )
  task.replaceKeyInMatch("test_index_2.mappings.test_type_2.t1.full_name",
    "test_index.mappings._doc.t1.full_name"
  )
  task.replaceKeyInMatch("test_index_2.mappings.test_type_2.t2.full_name",
    "test_index.mappings._doc.t2.full_name"
  )
  task.replaceKeyInLength("test_index_2.mappings.test_type_2",
    "test_index.mappings._doc"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.text.mapping.text.type",
    "test_index.mappings._doc.text.mapping.text.type"
  )
  // overrides for indices.put_mapping/11_basic_with_types
  task.replaceKeyInMatch("test_index.mappings.test_type.properties.text1.type",
    "test_index.mappings._doc.properties.text1.type"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.properties.text1.analyzer",
    "test_index.mappings._doc.properties.text1.analyzer"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.properties.text2.type",
    "test_index.mappings._doc.properties.text2.type"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.properties.text2.analyzer",
    "test_index.mappings._doc.properties.text2.analyzer"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.properties.subfield.properties.text3.type",
    "test_index.mappings._doc.properties.subfield.properties.text3.type"
  )
  task.replaceKeyInMatch("test_index.mappings.test_type.properties.text1.fields.text_raw.type",
    "test_index.mappings._doc.properties.text1.fields.text_raw.type"
  )
  // overrides for indices.put_mapping/all_path_options_with_types
  task.replaceKeyInMatch("test_index1.mappings.test_type.properties.text.type",
    "test_index1.mappings._doc.properties.text.type"
  )
  task.replaceKeyInMatch("test_index1.mappings.test_type.properties.text.analyzer",
    "test_index1.mappings._doc.properties.text.analyzer"
  )
  task.replaceKeyInMatch("test_index2.mappings.test_type.properties.text.type",
    "test_index2.mappings._doc.properties.text.type"
  )
  task.replaceKeyInMatch("test_index2.mappings.test_type.properties.text.analyzer",
    "test_index2.mappings._doc.properties.text.analyzer"
  )
  task.replaceKeyInMatch("foo.mappings.test_type.properties.text.type",
    "foo.mappings._doc.properties.text.type"
  )
  task.replaceKeyInMatch("foo.mappings.test_type.properties.text.analyzer",
    "foo.mappings._doc.properties.text.analyzer"
  )
  // overrides for indices.get_mapping
  task.replaceIsTrue("test_1.mappings.doc", "test_1.mappings._doc")
  task.replaceIsTrue("test_2.mappings.doc", "test_2.mappings._doc")
})

tasks.register('enforceYamlTestConvention').configure {
  doLast {
    if (fileTree('src/main/resources/rest-api-spec/test').files) {
      throw new GradleException("There are YAML tests in src/main source set. These should be moved to src/yamlRestTest.")
    }
  }
}

tasks.named("precommit").configure {
  dependsOn 'enforceYamlTestConvention'
}
