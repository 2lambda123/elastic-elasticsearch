
simpleFilter#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where first_name =~ "mary" | keep emp_no, first_name, last_name;

emp_no:integer | first_name:keyword | last_name:keyword
10011          | Mary               | Sluis
;


simpleFilterUpper#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where first_name =~ "MARY" | keep emp_no, first_name, last_name;

emp_no:integer | first_name:keyword | last_name:keyword
10011          | Mary               | Sluis
;

simpleFilterPartial#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where first_name =~ "mar" | keep emp_no, first_name, last_name;

emp_no:integer | first_name:keyword | last_name:keyword
;

mixedConditionsAnd#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where first_name =~ "mary" AND emp_no == 10011 | keep emp_no, first_name, last_name;

emp_no:integer | first_name:keyword | last_name:keyword
10011          | Mary               | Sluis
;


mixedConditionsOr#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where first_name =~ "mary" OR emp_no == 10001 | keep emp_no, first_name, last_name |sort emp_no;

emp_no:integer | first_name:keyword | last_name:keyword
10001          | Georgi             | Facello
10011          | Mary               | Sluis
;


evalEquals#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where emp_no == 10001 
| eval a = first_name =~ "georgi", b = first_name == "georgi", c = first_name =~ "GEORGI", d = first_name =~ "Geor", e = first_name =~ "GeoRgI" 
| keep emp_no, first_name, a, b, c, d, e;

emp_no:integer | first_name:keyword | a:boolean | b:boolean | c:boolean | d:boolean | e:boolean
10001          | Georgi             | true      | false     | true      | false     | true
;


constantsAndFolding#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
row name = "foobar" | where "FoObAr" =~ name;

name:keyword
foobar
;

wildcardSimple#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
row name = "foobar" | where name =~ "FoOb*";

name:keyword
foobar
;

wildcardNoMatchSimple#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
row name = "foobar" | where name =~ "FoOb";

name:keyword
;


wildcard#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where first_name =~ "georg*" | sort emp_no | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10001          | Georgi
10055          | Georgy
;

wildcardSuffix#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where first_name =~ "*eOrGi" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10001          | Georgi
;

wildcardPrefixSuffix#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where first_name =~ "*eOrG*" | sort emp_no | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10001          | Georgi
10055          | Georgy
;


wildcardMixedConditionsOr#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where first_name =~ "mar*" OR emp_no == 10001 | keep emp_no, first_name, last_name |sort emp_no;

emp_no:integer | first_name:keyword | last_name:keyword
10001          | Georgi             | Facello
10011          | Mary               | Sluis
10069          | Margareta          | Bierman
;


wildcardMixedConditionsAnd#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where first_name =~ "mar*" AND emp_no == 10011 | keep emp_no, first_name, last_name |sort emp_no;

emp_no:integer | first_name:keyword | last_name:keyword
10011          | Mary               | Sluis
;

wildcardPrefixSuffixNot#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where not (first_name =~ "*eOrG*") | sort emp_no | keep emp_no, first_name | limit 1;

emp_no:integer | first_name:keyword
10002          | Bezalel
;


wildcardPrefixSuffixNotNot#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where not (not (first_name =~ "*eOrG*")) | sort emp_no | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10001          | Georgi
10055          | Georgy
;


wildcardQuoted#[skip:-8.12.99, reason:case insensitive operators implemented in v 8.13]
from employees | where first_name =~ "georg\\*" | sort emp_no | keep emp_no, first_name;

emp_no:integer | first_name:keyword
;
