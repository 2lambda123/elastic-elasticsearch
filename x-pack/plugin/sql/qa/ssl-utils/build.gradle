/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import org.gradle.internal.jvm.Jvm
import org.elasticsearch.gradle.LoggedExec
import org.elasticsearch.gradle.info.BuildParams

apply plugin:'base'
configurations {
  nodeKeyStores {
    canBeConsumed = true
    canBeResolved = false
  }
  clientKeyStores {
    canBeConsumed = true
    canBeResolved = false
  }
}

// needed to be consistent with ssl host checking
String san = "san=dns:localhost,dns:localhost.localdomain,dns:localhost4,dns:localhost4.localdomain4,dns:localhost6," +
  "dns:localhost6.localdomain6,ip:127.0.0.1,ip:0:0:0:0:0:0:0:1"
String host = "Elasticsearch Build Test Infrastructure"

// location of generated keystores and certificates
File keystoreDir = new File(project.buildDir, 'keystore')

// Generate the node's keystore
File nodeKeystore = file("$keystoreDir/test-node.jks")

tasks.register("createNodeKeyStore", LoggedExec) {
  doFirst {
    if (nodeKeystore.parentFile.exists() == false) {
      nodeKeystore.parentFile.mkdirs()
    }
    if (nodeKeystore.exists()) {
      delete nodeKeystore
    }
  }
  executable = "${Jvm.current().javaHome}/bin/keytool"
  standardInput = new ByteArrayInputStream('FirstName LastName\nUnit\nOrganization\nCity\nState\nNL\nyes\n\n'.getBytes('UTF-8'))
  args '-genkey',
    '-alias', 'test-node',
    '-keystore', nodeKeystore,
    '-keyalg', 'RSA',
    '-keysize', '2048',
    '-validity', '712',
    '-dname', 'CN=' + host,
    '-keypass', 'keypass',
    '-storepass', 'keypass',
    '-ext', san
}

// Generate the client's keystore
File clientKeyStore = file("$keystoreDir/test-client.jks")
tasks.register("createClientKeyStore", LoggedExec) {
  doFirst {
    if (clientKeyStore.parentFile.exists() == false) {
      clientKeyStore.parentFile.mkdirs()
    }
    if (clientKeyStore.exists()) {
      delete clientKeyStore
    }
  }
  executable = "${BuildParams.runtimeJavaHome}/bin/keytool"
  standardInput = new ByteArrayInputStream('FirstName LastName\nUnit\nOrganization\nCity\nState\nNL\nyes\n\n'.getBytes('UTF-8'))
  args '-genkey',
    '-alias', 'test-client',
    '-keystore', clientKeyStore,
    '-keyalg', 'RSA',
    '-keysize', '2048',
    '-validity', '712',
    '-dname', 'CN=' + host,
    '-keypass', 'keypass',
    '-storepass', 'keypass',
    '-ext', san
}

// Export the node's certificate
File nodeCertificate = file("$keystoreDir/test-node.cert")
tasks.register("exportNodeCertificate", LoggedExec) {
  dependsOn "createNodeKeyStore"
  doFirst {
    if (nodeCertificate.parentFile.exists() == false) {
      nodeCertificate.parentFile.mkdirs()
    }
    if (nodeCertificate.exists()) {
      delete nodeCertificate
    }
  }
  executable = "${BuildParams.runtimeJavaHome}/bin/keytool"
  args '-export',
    '-alias', 'test-node',
    '-keystore', nodeKeystore,
    '-storepass', 'keypass',
    '-file', nodeCertificate
}

// Import the node certificate in the client's keystore
tasks.register("importNodeCertificateInClientKeyStore", LoggedExec) {
  dependsOn "createClientKeyStore", "exportNodeCertificate"
  executable = "${BuildParams.runtimeJavaHome}/bin/keytool"
  args '-import',
    '-alias', 'test-node',
    '-keystore', clientKeyStore,
    '-storepass', 'keypass',
    '-file', nodeCertificate,
    '-noprompt'
}

// Export the client's certificate
File clientCertificate = file("$keystoreDir/test-client.cert")
tasks.register("exportClientCertificate", LoggedExec) {
  dependsOn "createClientKeyStore"
  doFirst {
    if (clientCertificate.parentFile.exists() == false) {
      clientCertificate.parentFile.mkdirs()
    }
    if (clientCertificate.exists()) {
      delete clientCertificate
    }
  }
  executable = "${BuildParams.runtimeJavaHome}/bin/keytool"
  args '-export',
    '-alias', 'test-client',
    '-keystore', clientKeyStore,
    '-storepass', 'keypass',
    '-file', clientCertificate
}

// Import the client certificate in the node's keystore
tasks.register("importClientCertificateInNodeKeyStore", LoggedExec) {
  dependsOn "createNodeKeyStore", "exportClientCertificate"
  executable = "${BuildParams.runtimeJavaHome}/bin/keytool"
  args '-import',
    '-alias', 'test-client',
    '-keystore', nodeKeystore,
    '-storepass', 'keypass',
    '-file', clientCertificate,
    '-noprompt'
}

artifacts {
//  certificateJars(certificateJar)
  clientKeyStores(clientKeyStore) {
    builtBy("importNodeCertificateInClientKeyStore")
  }
  nodeKeyStores(nodeKeystore){
    builtBy("importClientCertificateInNodeKeyStore")
  }
}
