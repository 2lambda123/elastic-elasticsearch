apply plugin: 'elasticsearch.internal-es-plugin'
apply plugin: 'elasticsearch.internal-cluster-test'

import org.elasticsearch.gradle.internal.info.BuildParams

esplugin {
  name 'x-pack-sql'
  description 'The Elasticsearch plugin that powers SQL for Elasticsearch'
  classname 'org.elasticsearch.xpack.sql.plugin.SqlPlugin'
  extendedPlugins = ['x-pack-ql', 'lang-painless']
}

ext {
  // SQL dependency versions
  jlineVersion = "3.21.0"

  // SQL test dependency versions
  csvjdbcVersion = "1.0.34"
  h2Version = "1.4.197"
  h2gisVersion = "1.5.0"
}

configurations {
  // Bundles the sql-cli.jar into the distribution
  bin
}

archivesBaseName = 'x-pack-sql'

dependencies {
  compileOnly project(path: xpackModule('core'))
  compileOnly(project(':modules:lang-painless:spi'))
  api project('sql-action')
  api project(':modules:aggregations')
  compileOnly project(path: xpackModule('ql'))
  testImplementation project(':test:framework')
  testImplementation(testArtifact(project(xpackModule('core'))))
  testImplementation(testArtifact(project(xpackModule('security'))))
  testImplementation(testArtifact(project(xpackModule('ql'))))
  testImplementation project(path: ':modules:reindex')
  testImplementation project(path: ':modules:parent-join')
  testImplementation project(path: ':modules:analysis-common')
  bin(project(path: xpackModule('sql:sql-cli'), configuration: 'shadow'))
}

/* Bundle the sql-cli into the binary files. It should end up
 * in $ES_HOME/bin/x-pack/. This is useful because it is an
 * executable jar that can be moved wherever it is needed.
 */
esplugin.bundleSpec.from({configurations.bin}) {
    into 'bin'
}

addQaCheckDependencies(project)

/**********************************************
 *          SQL Parser regeneration           *
 **********************************************/

configurations {
  regenerate
}

dependencies {
  regenerate "org.antlr:antlr4:${versions.antlr4}"
}

String grammarPath = 'src/main/antlr'
String outputPath = 'src/main/java/org/elasticsearch/xpack/sql/parser'

pluginManager.withPlugin('com.diffplug.spotless') {
  spotless {
    java {
      targetExclude "${outputPath}/*.java"
    }
  }
}

tasks.register("cleanGenerated", Delete) {
  delete fileTree(grammarPath) {
    include '*.tokens'
  }
  delete fileTree(outputPath) {
    include 'SqlBase*.java'
  }
}

tasks.register("regenParser", JavaExec) {
  dependsOn "cleanGenerated"
  mainClass = 'org.antlr.v4.Tool'
  classpath = configurations.regenerate
  systemProperty 'file.encoding', 'UTF-8'
  systemProperty 'user.language', 'en'
  systemProperty 'user.country', 'US'
  systemProperty 'user.variant', ''
  args '-Werror',
    '-package', 'org.elasticsearch.xpack.sql.parser',
    '-listener',
    '-visitor',
    '-o', outputPath,
    "${file(grammarPath)}/SqlBase.g4"
}

tasks.register("regen") {
  dependsOn "regenParser"
  doLast {
    // moves token files to grammar directory for use with IDE's
    ant.move(file: "${outputPath}/SqlBase.tokens", toDir: grammarPath)
    ant.move(file: "${outputPath}/SqlBaseLexer.tokens", toDir: grammarPath)
    // make the generated classes package private
    ant.replaceregexp(match: 'public ((interface|class) \\QSqlBase\\E\\w+)',
      replace: '\\1',
      encoding: 'UTF-8') {
      fileset(dir: outputPath, includes: 'SqlBase*.java')
    }
    // nuke timestamps/filenames in generated files
    ant.replaceregexp(match: '\\Q// Generated from \\E.*',
      replace: '\\/\\/ ANTLR GENERATED CODE: DO NOT EDIT',
      encoding: 'UTF-8') {
      fileset(dir: outputPath, includes: 'SqlBase*.java')
    }
    // remove tabs in antlr generated files
    ant.replaceregexp(match: '\t', flags: 'g', replace: '  ', encoding: 'UTF-8') {
      fileset(dir: outputPath, includes: 'SqlBase*.java')
    }
    // fix line endings
    ant.fixcrlf(srcdir: outputPath, eol: 'lf') {
      patternset(includes: 'SqlBase*.java')
    }
  }
}

allprojects {
  tasks.register("checkNoBwc") {
    dependsOn tasks.withType(Test).matching { it.name.contains('bwc') == false }
  }
}

if (BuildParams.inFipsJvm){
  // Test clusters run with security disabled
  tasks.named("internalClusterTest").configure{enabled = false }
}

tasks.named("transportTestExistCheck").configure { task ->
  task.skipTest("org/elasticsearch/xpack/sql/analysis/analyzer/VerificationException","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/execution/search/extractor/FieldHitExtractor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/execution/search/CompositeAggCursor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/predicate/conditional/NullIfProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/planner/FoldingException","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/predicate/operator/arithmetic/SqlBinaryArithmeticOperation","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/execution/search/extractor/TopHitsAggExtractor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTruncProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/parser/ParsingException","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/datetime/TimeProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/math/BinaryOptionalMathProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/literal/interval/IntervalYearMonth","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/plugin/SqlStatsResponse$NodeStatsResponse","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/string/LocateFunctionProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/execution/search/SearchHitCursor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/string/ReplaceFunctionProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/type/SqlDataTypeConverter$SqlConverter","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/string/ConcatFunctionProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/predicate/conditional/ConditionalProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateDiffProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/execution/search/PivotCursor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/string/StringProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/execution/search/extractor/ScoreExtractor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/execution/search/extractor/MetricAggExtractor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/math/MathProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/planner/PlanningException","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/geo/StWkttosqlProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/literal/interval/IntervalDayTime","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/datetime/NamedDateTimeProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/plugin/SqlStatsResponse","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/execution/search/extractor/CompositeKeyExtractor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/SqlIllegalArgumentException","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/string/InsertFunctionProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DatePartProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/predicate/conditional/CaseProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/datetime/QuarterProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/literal/geo/GeoShape","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/execution/search/extractor/PivotExtractor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/plugin/SqlStatsRequest","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/string/SubstringFunctionProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateAddProcessor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/session/ListCursor","missing test")
  task.skipTest("org/elasticsearch/xpack/sql/expression/function/scalar/datetime/NonIsoDateTimeProcessor","missing test")
}
