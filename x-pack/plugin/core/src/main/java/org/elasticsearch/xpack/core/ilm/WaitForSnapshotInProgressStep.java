/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
package org.elasticsearch.xpack.core.ilm;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.SnapshotsInProgress;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.common.ParseField;
import org.elasticsearch.common.Strings;
import org.elasticsearch.common.xcontent.ToXContentObject;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.index.Index;
import org.elasticsearch.snapshots.SnapshotInfo;
import org.elasticsearch.snapshots.SnapshotsService;

import java.io.IOException;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * After we triggered a snapshot we'll wait until the snapshot is not executing anymore (ie. the SnapshotInProgress meta data doesn't
 * contain an entry for the snapshot we've triggered)
 */
public class WaitForSnapshotInProgressStep extends ClusterStateWaitStep {

    public static final String NAME = "wait-for-snapshot";
    private static final Logger logger = LogManager.getLogger(WaitForSnapshotInProgressStep.class);

    private final String snapshotRepository;

    WaitForSnapshotInProgressStep(StepKey key, StepKey nextStepKey, String snapshotRepository) {
        super(key, nextStepKey);
        this.snapshotRepository = snapshotRepository;
    }

    @Override
    public boolean isRetryable() {
        return true;
    }

    public String getSnapshotRepository() {
        return snapshotRepository;
    }

    @Override
    public Result isConditionMet(Index index, ClusterState clusterState) {
        IndexMetaData indexMetaData = clusterState.metaData().index(index);
        String indexName = index.getName();

        if (indexMetaData == null) {
            String errorMessage = String.format(Locale.ROOT, "[%s] lifecycle action for index [%s] executed but index no longer exists",
                getKey().getAction(), indexName);
            // Index must have been since deleted
            logger.debug(errorMessage);
            return new Result(false, new Info(errorMessage));
        }

        String policyName = indexMetaData.getSettings().get(LifecycleSettings.LIFECYCLE_NAME);
        LifecycleExecutionState executionState = LifecycleExecutionState.fromIndexMetadata(indexMetaData);
        String snapshotName = executionState.getSnapshotName();
        if (Strings.hasText(snapshotName) == false) {
            String errorMessage = String.format(Locale.ROOT, "snapshot name was not generated for policy [%s] and index [%s]",
                policyName, indexName);
            return new Result(false, new Info(errorMessage));
        }
        final SnapshotsInProgress snapshotsInProgress = clusterState.custom(SnapshotsInProgress.TYPE);
        List<SnapshotInfo> repositorySnapshots = SnapshotsService.currentSnapshots(snapshotsInProgress, snapshotRepository);
        List<SnapshotInfo> configuredSnapshotInProgress =
            repositorySnapshots.stream().filter(si -> si.snapshotId().getName().equals(snapshotName)).collect(Collectors.toList());

        if (configuredSnapshotInProgress.isEmpty()) {
            return new Result(true, null);
        } else {
            return new Result(false, new Info(String.format(Locale.ROOT,
                "snapshot [%s] generated by policy [%s] for index [%s] is still in progress", snapshotName, policyName, indexName)));
        }
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), snapshotRepository);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        WaitForSnapshotInProgressStep other = (WaitForSnapshotInProgressStep) obj;
        return super.equals(obj) &&
            Objects.equals(snapshotRepository, other.snapshotRepository);
    }

    static final class Info implements ToXContentObject {

        private final String message;

        static final ParseField MESSAGE = new ParseField("message");

        Info(String message) {
            this.message = message;
        }

        @Override
        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {
            builder.startObject();
            builder.field(MESSAGE.getPreferredName(), message);
            builder.endObject();
            return builder;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            Info info = (Info) o;
            return Objects.equals(message, info.message);
        }

        @Override
        public int hashCode() {
            return Objects.hash(message);
        }
    }
}
