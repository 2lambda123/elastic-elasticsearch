import com.carrotsearch.gradle.junit4.RandomizedTestingTask
import org.elasticsearch.gradle.BuildPlugin

evaluationDependsOn(xpackModule('core'))

apply plugin: 'elasticsearch.esplugin'

esplugin {
    name 'x-pack-index-lifecycle'
    description 'Elasticsearch Expanded Pack Plugin - Index Lifecycle'
    classname 'org.elasticsearch.xpack.indexlifecycle.IndexLifecycle'
    extendedPlugins = ['x-pack-core']
    hasNativeController false
    requiresKeystore true
}
archivesBaseName = 'x-pack-index-lifecycle'

dependencies {
    compileOnly "org.elasticsearch.plugin:x-pack-core:${version}"
    testCompile project(path: xpackModule('core'), configuration: 'testArtifacts')
}

// xpack modules are installed in real clusters as the meta plugin, so
// installing them as individual plugins for integ tests doesn't make sense,
// so we disable integ tests
integTest.enabled = false

// Instead we create a separate task to run the
// tests based on ESIntegTestCase
task internalClusterTest(type: RandomizedTestingTask,
        group: JavaBasePlugin.VERIFICATION_GROUP,
        description: 'Multi-node tests',
        dependsOn: test.dependsOn) {
    configure(BuildPlugin.commonTestConfig(project))
    classpath = project.test.classpath
    testClassesDir = project.test.testClassesDir
    include '**/*IT.class'
    systemProperty 'es.set.netty.runtime.available.processors', 'false'
}
check.dependsOn internalClusterTest
internalClusterTest.mustRunAfter test

integTestCluster {
    numNodes = 2
    clusterName = 'index-lifecycle'
    setting 'xpack.security.enabled', 'false'
    setting 'xpack.watcher.enabled', 'false'
    setting 'xpack.monitoring.enabled', 'false'
    setting 'xpack.ml.enabled', 'false'
    setting 'xpack.index_lifecycle.enabled', 'true'
    setting 'indices.lifecycle.poll_interval', '500ms'
}

run {
    plugin xpackModule('core')
}
