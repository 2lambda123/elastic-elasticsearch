---
"Test get given missing trained model":

  - do:
      catch: missing
      ml.get_trained_models:
        model_id: "missing-trained-model"
---
"Test get given expression without matches and allow_no_match is false":

  - do:
      catch: missing
      ml.get_trained_models:
        model_id: "missing-trained-model*"
        allow_no_match: false

---
"Test get given expression without matches and allow_no_match is true":

  - do:
      ml.get_trained_models:
        model_id: "missing-trained-model*"
        allow_no_match: true
  - match: { count: 0 }
  - match: { trained_model_configs: [] }
---
"Test get models":
  - do:
      ml.put_trained_model:
        model_id: regression-model-0
        body: >
          {
            "description": "empty model for tests",
            "input": {"field_names": ["field1", "field2"]},
            "definition": {
               "preprocessors": [],
               "trained_model": {
                  "tree": {
                     "feature_names": ["field1", "field2"],
                     "tree_structure": [
                        {"node_index": 0, "leaf_value": 1}
                     ],
                     "target_type": "regression"
                  }
               }
            }
          }
  - match: { model_id: "regression-model-0" }

  - do:
      ml.put_trained_model:
        model_id: regression-model-1
        body: >
          {
            "description": "empty model for tests",
            "input": {"field_names": ["field1", "field2"]},
            "definition": {
               "preprocessors": [],
               "trained_model": {
                  "tree": {
                     "feature_names": ["field1", "field2"],
                     "tree_structure": [
                        {"node_index": 0, "leaf_value": 1}
                     ],
                     "target_type": "regression"
                  }
               }
            }
          }
  - match: { model_id: "regression-model-1" }

  - do:
      ml.put_trained_model:
        model_id: classification-model
        body: >
          {
            "description": "empty model for tests",
            "input": {"field_names": ["field1", "field2"]},
            "definition": {
               "preprocessors": [],
               "trained_model": {
                  "tree": {
                     "feature_names": ["field1", "field2"],
                     "tree_structure": [
                        {"node_index": 0, "leaf_value": 1}
                     ],
                     "target_type": "classification",
                     "classification_labels": ["no", "yes"]
                  }
               }
            }
          }
  - match: { model_id: "classification-model" }

  - do:
      ml.get_trained_models:
        model_id: "*"
  - match: { count: 3 }
  - match: { trained_model_configs.0.model_id: "classification-model" }
  - match: { trained_model_configs.1.model_id: "regression-model-0" }
  - match: { trained_model_configs.2.model_id: "regression-model-1" }

  - do:
      ml.get_trained_models:
        model_id: "regression*"
  - match: { count: 2 }
  - match: { trained_model_configs.0.model_id: "regression-model-0" }
  - match: { trained_model_configs.1.model_id: "regression-model-1" }

  - do:
      ml.get_trained_models:
        model_id: "*"
        from: 0
        size: 2
  - match: { count: 3 }
  - match: { trained_model_configs.0.model_id: "classification-model" }
  - match: { trained_model_configs.1.model_id: "regression-model-0" }

  - do:
      ml.get_trained_models:
        model_id: "*"
        from: 1
        size: 1
  - match: { count: 3 }
  - match: { trained_model_configs.0.model_id: "regression-model-0" }
---
"Test delete given unused trained model":
  - do:
      ml.put_trained_model:
        model_id: unused-regression-model
        body: >
          {
            "model_id": "unused-regression-model",
            "input": {"field_names": ["field1", "field2"]},
            "description": "empty model for tests",
            "definition": {
               "preprocessors": [],
               "trained_model": {
                  "tree": {
                     "feature_names": ["field1", "field2"],
                     "tree_structure": [
                        {"node_index": 0, "leaf_value": 1}
                     ],
                     "target_type": "regression"
                  }
               }
            }
          }

  - match: { model_id: "unused-regression-model" }
  - do:
      ml.delete_trained_model:
        model_id: "unused-regression-model"
  - match: { acknowledged: true }

---
"Test delete with missing model":
  - do:
      catch: missing
      ml.delete_trained_model:
        model_id: "missing-trained-model"

---
"Test delete given used trained model":
  - do:
      ml.put_trained_model:
        model_id: used-regression-model
        body: >
          {
            "model_id": "used-regression-model",
            "input": {"field_names": ["field1", "field2"]},
            "description": "empty model for tests",
            "definition": {
               "preprocessors": [],
               "trained_model": {
                  "tree": {
                     "feature_names": ["field1", "field2"],
                     "tree_structure": [
                        {"node_index": 0, "leaf_value": 1}
                     ],
                     "target_type": "regression"
                  }
               }
            }
          }

  - match: { model_id: "used-regression-model" }
  - do:
      ingest.put_pipeline:
        id: "regression-model-pipeline"
        body:  >
          {
            "processors": [
              {
                "inference" : {
                  "model_id" : "used-regression-model",
                  "inference_config": {"regression": {}},
                  "target_field": "regression_field",
                  "field_mappings": {}
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      catch: conflict
      ml.delete_trained_model:
        model_id: "used-regression-model"
---
"Test get pre-packaged trained models":
  - do:
      ml.get_trained_models:
        model_id: "_all"
        allow_no_match: false
  - match: { count: 1 }
  - match: { trained_model_configs.0.model_id: "lang_ident_model_1" }
