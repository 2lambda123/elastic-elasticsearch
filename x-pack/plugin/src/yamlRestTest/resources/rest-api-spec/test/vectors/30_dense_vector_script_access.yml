---
"Access to values of dense_vector in script":
  - skip:
      features: headers
      version: " - 7.12.99"
      reason: "Access to values of dense_vector in script was added in 7.13"
  - do:
      indices.create:
        index: test-index
        body:
          mappings:
            properties:
              v:
                type: dense_vector
                dims: 3

  - do:
      bulk:
        index: test-index
        refresh: true
        body:
          - '{"index": {"_id": "1"}}'
          - '{"v": [1, 1, 1]}'
          - '{"index": {"_id": "2"}}'
          - '{"v": [1, 1, 2]}'
          - '{"index": {"_id": "3"}}'
          - '{"v": [1, 1, 3]}'
          - '{"index": {"_id": "missing_vector"}}'
          - '{}'

  # check getVectorValue() API
  - do:
      search:
        body:
          query:
            script_score:
              query: { "exists" : { "field" : "v" } }
              script:
                source: |
                  float s = 0;
                  for (def el : doc['v'].getVectorValue()) {
                    s += el;
                  }
                  s;

  - match: { hits.hits.0._id: "3" }
  - match: { hits.hits.0._score: 5 }
  - match: { hits.hits.1._id: "2" }
  - match: { hits.hits.1._score: 4 }
  - match: { hits.hits.2._id: "1" }
  - match: { hits.hits.2._score: 3 }


  # check getVectorMagnitude() API
  - do:
      headers:
        Content-Type: application/json
      search:
        body:
          query:
            script_score:
              query: { "exists" : { "field" : "v" } }
              script:
                source: "doc['v'].getVectorMagnitude()"

  - match: { hits.hits.0._id: "3" }
  - gte: {hits.hits.0._score: 3.3166}
  - lte: {hits.hits.0._score: 3.3167}
  - match: { hits.hits.1._id: "2" }
  - gte: {hits.hits.1._score: 2.4494}
  - lte: {hits.hits.1._score: 2.4495}
  - match: { hits.hits.2._id: "1" }
  - gte: {hits.hits.2._score: 1.7320}
  - lte: {hits.hits.2._score: 1.7321}

  # check failed request on missing values
  - do:
      catch: bad_request
      search:
        body:
          query:
            script_score:
              query: { match_all: { } }
              script:
                source: "doc['v'].getVectorValue()[0]"

  - match: { status: 400 }
  - match: { error.root_cause.0.type: "script_exception" }

  # check failed request on missing values
  - do:
      catch: bad_request
      search:
        body:
          query:
            script_score:
              query: { match_all: { } }
              script:
                source: "doc['v'].getVectorMagnitude()"

  - match: { status: 400 }
  - match: { error.root_cause.0.type: "script_exception" }


  # vector functions in loop â€“ return the index of the closest parameter vector based on cosine similarity
  - do:
      headers:
        Content-Type: application/json
      search:
        body:
          query:
            script_score:
              query: { "exists": { "field": "v" } }
              script:
                source: |
                  float[] v = doc['v'].getVectorValue();
                  float vm = doc['v'].getVectorMagnitude();

                  int closestPv = 0;
                  float maxCosSim = -1;
                  for (int i = 0; i < params.pvs.length; i++) {
                    float dotProduct = 0;
                    for (int j = 0; j < v.length; j++) {
                      dotProduct += v[j] * params.pvs[i][j];
                    }
                    float cosSim = dotProduct / (vm * (float) params.pvs_lengths[i]);
                    if (maxCosSim < cosSim) {
                      maxCosSim = cosSim;
                      closestPv = i;
                    }
                  }
                  closestPv;
                params:
                  pvs: [ [ 1, 1, 1 ], [ 1, 1, 2 ], [ 1, 1, 3 ] ]
                  pvs_lengths: [1.7320, 2.4495, 3.3166]

  - match: { hits.hits.0._id: "3" }
  - match: { hits.hits.0._score: 2 }
  - match: { hits.hits.1._id: "2" }
  - match: { hits.hits.1._score: 1 }
  - match: { hits.hits.2._id: "1" }
  - match: { hits.hits.2._score: 0 }
