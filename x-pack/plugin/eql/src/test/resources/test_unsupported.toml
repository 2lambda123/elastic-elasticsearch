[string_case_insensitive_match_comparison]
case_insensitive = true

    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"Foo" == "Bar"'
    expected = false

    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"Foo" != "Bar"'
    expected = true

    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"Foo" == "foo"'
    expected = true

    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"Foo" != "foo"'
    expected = false

    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"Foo" < "foo"'
    expected = false

    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"Foo" <= "foo"'
    expected = true

    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"Foo" >= "foo"'
    expected = true

    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"Foo" > "foo"'
    expected = false

    # now flip the order and check
    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"foo" < "Foo"'
    expected = false

    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"foo" <= "Foo"'
    expected = true

    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"foo" >= "Foo"'
    expected = true

    [[string_case_insensitive_match_comparison.fold.tests]]
    expression = '"foo" > "Foo"'
    expected = false


[wildcard_case_insensitive]
case_insensitive = true

    [[wildcard_case_insensitive.fold.tests]]
    expression = 'wildcard("FOO", "f*o*o*")'
    expected = true

    [[wildcard_case_insensitive.fold.tests]]
    expression = 'wildcard("bar", "f*o*o*")'
    expected = false


[complex]

    [[complex.fold.tests]]
    expression = '(100 * 10) - ("hello":length())'
    expected = 995

    [[complex.fold.tests]]
    expression = 'concat((100 * 10) - ("hello":length()) == 995, "...")'
    expected = "true..."



[null_comparison]

    [[null_comparison.fold.tests]]
    expression = "null == null"
    expected = true

    [[null_comparison.fold.tests]]
    expression = "null != null"
    expected = false


[startswith_case_insensitive]

    [[startswith_case_insensitive.fold.tests]]
    expression = "startsWith('FooBar', 'FOO')"
    expected = true

    [[startswith_case_insensitive.fold.tests]]
    expression = "startsWith('FooBar', 'foo')"
    expected = true

[substring]

    [[substring.fold.tests]]
    expression = "substring('hello world', null, 5)"
    expected = "hello"
