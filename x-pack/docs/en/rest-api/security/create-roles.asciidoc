[role="xpack"]
[[security-api-put-role]]
=== Create or update roles API
++++
<titleabbrev>Create or update roles</titleabbrev>
++++

Adds and updates roles in the native realm.

[[security-api-put-role-request]]
==== {api-request-title}

`POST /_security/role/<name>` +

`PUT /_security/role/<name>`


[[security-api-put-role-prereqs]]
==== {api-prereq-title}

* To use this API, you must have at least the `manage_security` cluster
privilege.

[[security-api-put-role-desc]]
==== {api-description-title}

The role management APIs are generally the preferred way to manage roles, rather than using
<<roles-management-file,file-based role management>>. The create
or update roles API cannot update roles that are defined in roles files.

[[security-api-put-role-path-params]]
==== {api-path-parms-title}

`name`::
  (string) The name of the role.


[[security-api-put-role-request-body]]
==== {api-request-body-title}

The following parameters can be specified in the body of a PUT or POST request
and pertain to adding a role:

:role-owners:       owners of the role
:role-restriction!:
include::common-role-descriptor-def.asciidoc[]

For more information, see <<defining-roles>>.

[[security-api-put-role-example]]
==== {api-examples-title}

The following example adds a role called `my_admin_role`:

[source,console]
--------------------------------------------------
POST /_security/role/my_admin_role
{
  "cluster": ["all"],
  "indices": [
    {
      "names": [ "index1", "index2" ],
      "privileges": ["all"],
      "field_security" : { // optional
        "grant" : [ "title", "body" ]
      },
      "query": "{\"match\": {\"title\": \"foo\"}}" // optional
    }
  ],
  "applications": [
    {
      "application": "myapp",
      "privileges": [ "admin", "read" ],
      "resources": [ "*" ]
    }
  ],
  "run_as": [ "other_user" ], // optional
  "metadata" : { // optional
    "version" : 1
  }
}
--------------------------------------------------

A successful call returns a JSON structure that shows whether the role has been
created or updated.

[source,console-result]
--------------------------------------------------
{
  "role": {
    "created": true <1>
  }
}
--------------------------------------------------

<1> When an existing role is updated, `created` is set to false.

The following example configures a role that can run SQL in JDBC:

// tag::sql-queries-permission[]
[source,console]
--------------------------------------------------
POST /_security/role/cli_or_drivers_minimal
{
  "cluster": ["cluster:monitor/main"],
  "indices": [
    {
      "names": ["test"],
      "privileges": ["read", "indices:admin/get"]
    }
  ]
}
--------------------------------------------------
// end::sql-queries-permission[]
