[role="xpack"]
[[security-api-update-api-key]]
=== Update API key API

++++
<titleabbrev>Update API key</titleabbrev>
++++

[[security-api-update-api-key-request]]
==== {api-request-title}

`PUT /_security/api_key/<id>`

[[security-api-update-api-key-prereqs]]
==== {api-prereq-title}

* To use this API, you must have at least the `manage_own_api_key` cluster privilege.

IMPORTANT: Only the user who created an API key can update it.
It's not possible to use an API key as the authentication credential for this API.
To update an API key, basic or token credentials are required.

[[security-api-update-api-key-desc]]
==== {api-description-title}

The API keys created by <<security-api-create-api-key,create API Key>> or <<security-api-grant-api-key,grant API Key>> can be updated using this API.

It's not possible to update expired API keys, or API keys that have been invalidated by <<security-api-invalidate-api-key,invalidate API Key>>

[[security-api-update-api-key-path-params]]
==== {api-path-parms-title}

`id`::
(Required, string) The ID of the API key to be updated.

[[security-api-update-api-key-request-body]]
==== {api-request-body-title}

// TODO body optional

IMPORTANT: An API key's permissions are always limited by the permissions of the authenticated user creating or updating the API key.
Any call to the update API, **regardless** of whether parameters are supplied or not, will automatically apply the authenticated user's current permissions to the API key.
This may result in changes in the API key's access scope, even when <<security-api-update-api-key-api-key-role-descriptors,`role_descriptors`>> is not specified in the update request.

The following parameters can be specified in the body of a PUT request:

[[security-api-update-api-key-api-key-role-descriptors]]
`role_descriptors`::
(Optional, array-of-role-descriptor) An array of new role descriptors for this API key.
This parameter is optional.
When the parameter is supplied but empty, the API key's new permissions will be the current _point in time snapshot of permissions of the authenticated user_.
If you supply role descriptors, the API key's permissions will be the intersection of the supplied permissions and the authenticated user's current permissions, thereby limiting the API key's access scope.
If you do not supply this parameter, the permissions will be the user's current permissions, limited by permissions previously assigned to the API key, if any.
The structure of the role descriptor is the same as the request for the create role API.
For more details, see <<security-api-put-role, create or update roles API>>.

`metadata`::
(Optional, object) Arbitrary metadata that you want to associate with the API key.
It supports nested data structure.
Within the `metadata` object, keys beginning with `_` are reserved for system usage.
When specified, this fully replaces metadata previously associated with the API key.

[[security-api-update-api-key-response-body]]
==== {api-response-body-title}

`updated`::
(boolean) `true` if the API key was updated, `false` if the API key did not change.

[[security-api-create-api-key-example]]
==== {api-examples-title}

If you create an API key as follows:

[source,console]
------------------------------------------------------------
POST /_security/api_key
{
  "name": "my-api-key",
  "role_descriptors": {
    "role-a": {
      "cluster": ["all"],
      "index": [
        {
          "names": ["index-a*"],
          "privileges": ["read"]
        }
      ]
    }
  },
  "metadata": {
    "application": "my-application",
    "environment": {
       "level": 1,
       "trusted": true,
       "tags": ["dev", "staging"]
    }
  }
}
------------------------------------------------------------

A successful call returns a JSON structure that provides API key information.
For example:

[source,console-result]
--------------------------------------------------
{
  "id": "VuaCfGcBCdbkQm-e5aOx",
  "name": "my-api-key",
  "api_key": "ui2lp2axTNmsyakw9tvNnw",
  "encoded": "VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw=="
}
--------------------------------------------------
// TESTRESPONSE[s/VuaCfGcBCdbkQm-e5aOx/$body.id/]
// TESTRESPONSE[s/ui2lp2axTNmsyakw9tvNnw/$body.api_key/]
// TESTRESPONSE[s/VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==/$body.encoded/]

For the examples below, assume that the authenticated user's permissions are:

[[security-api-update-api-key-examples-user-permissions]]
[source,console-result]
--------------------------------------------------
{
  "cluster": ["all"],
  "index": [
    {
      "names": ["*"],
      "privileges": ["all"]
    }
  ]
}
--------------------------------------------------

The following example updates the API key, assigning it new role descriptors and metadata:

[source,console]
----
PUT /_security/api_key/VuaCfGcBCdbkQm-e5aOx
{
  "role_descriptors": {
    "role-a": {
      "index": [
        {
          "names": ["*"],
          "privileges": ["write"]
        }
      ]
    }
  },
  "metadata": {
    "environment": {
       "level": 2,
       "trusted": true,
       "tags": ["production"]
    }
  }
}
----

A successful call returns a JSON structure indicating that the API key was updated:

[source,console-result]
----
{
  "updated": true
}
----

The API key's effective permissions after the update will be the intersection of the supplied role descriptors and the <<security-api-update-api-key-examples-user-permissions, authenticated user's permissions>>:

[source,console-result]
--------------------------------------------------
{
  "index": [
    {
      "names": ["*"],
      "privileges": ["write"]
    }
  ]
}
--------------------------------------------------

The following example re-applies the <<security-api-update-api-key-examples-user-permissions, authenticated user's permissions>> to the API key:

[source,console]
----
PUT /_security/api_key/VuaCfGcBCdbkQm-e5aOx
----

Which returns the response:

[source,console-result]
----
{
  "updated": false
}
----

Assuming the user's permissions have not changed since the previous update of the API key, this request does _not_ result in a change, and the API key's effective permissions remain:

[source,console-result]
--------------------------------------------------
{
  "index": [
    {
      "names": ["*"],
      "privileges": ["write"]
    }
  ]
}
--------------------------------------------------

The following example updates the API key, replacing the API key's assigned permissions with the <<security-api-update-api-key-examples-user-permissions, authenticated user's>>:

[source,console]
----
PUT /_security/api_key/VuaCfGcBCdbkQm-e5aOx
{
  "role_descriptors": {}
}
----

Which returns the response:

[source,console-result]
----
{
  "updated": true
}
----

The API key's effective permissions after the update will be:

[source,console-result]
--------------------------------------------------
{
  "cluster": ["all"],
  "index": [
    {
      "names": ["*"],
      "privileges": ["all"]
    }
  ]
}
--------------------------------------------------
