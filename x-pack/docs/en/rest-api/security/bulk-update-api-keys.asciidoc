[role="xpack"]
[[security-api-bulk-update-api-keys]]
=== Bulk update API keys API

++++
<titleabbrev>Bulk update API keys</titleabbrev>
++++

[[security-api-bulk-update-api-keys-request]]
==== {api-request-title}

`POST /_security/api_key/_bulk_update`

[[security-api-bulk-update-api-keys-prereqs]]
==== {api-prereq-title}

* To use this API, you must have at least the `manage_own_api_key` cluster privilege.
Users can only update API keys that they created or that were granted to them.
To update another user's API key, use the <<run-as-privilege,`run_as` feature>>
to submit a request on behalf of another user.

IMPORTANT: It's not possible to use an API key as the authentication credential for this API.
To update API keys, the owner user's credentials are required.

[[security-api-bulk-update-api-keys-desc]]
==== {api-description-title}

This API is similar to the <<security-api-update-api-key,update single API Key>> API but allows you to apply the same update to multiple API keys in one API call.
This can greatly increase throughput over making individual updates.

It's not possible to update expired API keys, or API keys that have been invalidated by <<security-api-invalidate-api-key,invalidate API Key>>.

This API supports updates to API key access scope and metadata.
The access scope of each API key is derived from the <<security-api-bulk-update-api-keys-api-key-role-descriptors,`role_descriptors`>> you specify in the request, and a snapshot of the owner user's permissions at the time of the request.
The snapshot of the owner's permissions is updated automatically on every call.

[IMPORTANT]
====
If you don't specify <<security-api-bulk-update-api-keys-api-key-role-descriptors,`role_descriptors`>> in the request, a call to this API might still change an API key's access scope.
This change can occur if the owner user's permissions have changed since the API key was created or last modified.
====

[[security-api-bulk-update-api-keys-request-body]]
==== {api-request-body-title}

You can specify the following parameters in the request body.

`ids`:: (Required, list) The IDs of the API keys to update.

[[security-api-bulk-update-api-keys-api-key-role-descriptors]]
`role_descriptors`::
(Optional, object) The role descriptors to assign to all requested API keys.
An API key's effective permissions are an intersection of its assigned privileges and the point in time snapshot of permissions of the owner user.
If no privileges are assigned, the API key inherits the owner user's full permissions.
You can assign new privileges to all requested API keys by specifying them in this parameter.
To remove assigned privileges, you can supply an empty `role_descriptors` parameter.
The snapshot of the owner's permissions is always updated, whether you supply the `role_descriptors` parameter or not.
The structure of a role descriptor is the same as the request for the <<security-api-put-role, create or update roles API>>.

`metadata`::
(Optional, object) Arbitrary metadata that you want to associate with all requested API keys.
It supports nested data structure.
Within the `metadata` object, top-level keys beginning with `_` are reserved for system usage.
When specified, this fully replaces metadata previously associated with the API key.

[[security-api-bulk-update-api-keys-response-body]]
==== {api-response-body-title}

A successful request returns a JSON structure that contains the IDs of all updated API keys, the IDs of API keys that already had the requested changes and did not require an update, and <<security-api-bulk-update-api-keys-examples-errors, error details>> for any failed update.
The API responds with a `200` status code, even in the presence of errors.

[[security-api-bulk-update-api-keys-example]]
==== {api-examples-title}

If you create an API key as follows:

[source,console]
------------------------------------------------------------
POST /_security/api_key
{
  "name": "my-api-key",
  "role_descriptors": {
    "role-a": {
      "cluster": ["all"],
      "index": [
        {
          "names": ["index-a*"],
          "privileges": ["read"]
        }
      ]
    }
  },
  "metadata": {
    "application": "my-application",
    "environment": {
       "level": 1,
       "trusted": true,
       "tags": ["dev", "staging"]
    }
  }
}
------------------------------------------------------------

A successful call returns a JSON structure that provides API key information.
For example:

[source,console-result]
--------------------------------------------------
{
  "id": "VuaCfGcBCdbkQm-e5aOx",
  "name": "my-api-key",
  "api_key": "ui2lp2axTNmsyakw9tvNnw",
  "encoded": "VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw=="
}
--------------------------------------------------
// TESTRESPONSE[s/VuaCfGcBCdbkQm-e5aOx/$body.id/]
// TESTRESPONSE[s/ui2lp2axTNmsyakw9tvNnw/$body.api_key/]
// TESTRESPONSE[s/VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==/$body.encoded/]

For the examples below, assume that the owner user's permissions are:

[[security-api-bulk-update-api-keys-examples-user-permissions]]
[source,js]
--------------------------------------------------
{
  "cluster": ["all"],
  "index": [
    {
      "names": ["*"],
      "privileges": ["all"]
    }
  ]
}
--------------------------------------------------
// NOTCONSOLE

The following example updates the API key created above, assigning it new role descriptors and metadata:

[source,console]
----
POST /_security/api_key/_bulk_update
{
  "ids": ["VuaCfGcBCdbkQm-e5aOx"]
  "role_descriptors": {
    "role-a": {
      "index": [
        {
          "names": ["*"],
          "privileges": ["write"]
        }
      ]
    }
  },
  "metadata": {
    "environment": {
       "level": 2,
       "trusted": true,
       "tags": ["production"]
    }
  }
}
----
// TEST[s/VuaCfGcBCdbkQm-e5aOx/\${body.id}/]
// TEST[continued]

A successful call returns a JSON structure indicating that the API key was updated:

[source,console-result]
----
{
  "updated": ["VuaCfGcBCdbkQm-e5aOx"],
  "noops": []
}
----

The API key's effective permissions after the update will be the intersection of the supplied role descriptors and the <<security-api-bulk-update-api-keys-examples-user-permissions, owner user's permissions>>:

[source,js]
--------------------------------------------------
{
  "index": [
    {
      "names": ["*"],
      "privileges": ["write"]
    }
  ]
}
--------------------------------------------------
// NOTCONSOLE

If any API keys failed to update, error details are included in the `errors` field:

[[security-api-bulk-update-api-keys-examples-errors]]
[source,js]
--------------------------------------------------
{
  "updated": ["VuaCfGcBCdbkQm-e5aOx"],
  "noops": [],
  "errors": { <1>
    "count": 3,
    "details": {
       "g_PqP4IBcBaEQdwM5-WI": { <2>
         "type": "resource_not_found_exception",
         "reason": "no API key owned by requesting user found for ID [g_PqP4IBcBaEQdwM5-WI]"
       },
       "OM4cg4IBGgpHBfLerY4B": {
         "type": "illegal_argument_exception",
         "reason": "cannot update invalidated API key [OM4cg4IBGgpHBfLerY4B]"
       },
       "Os4gg4IBGgpHBfLe2I7j": {
         "type": "exception",
         "reason": "error occurred while updating API key",
         "caused_by": { <3>
           "type": "illegal_argument_exception",
           "reason": "security index failure"
         }
       }
    }
  }
}
--------------------------------------------------
// NOTCONSOLE

<1> Details about any errors encountered.
This field is not present in the response when `count` is 0.
<2> The ID of the API key for which the error occurred.
<3> The error details may also include a `caused_by` field.
