[role="xpack"]
[[security-api-app-privileges]]
=== Application Privileges APIs

The Application Privileges API enables you to add, remove, and retrieve
{xpack-ref}/defining-roles.html#roles-application-priv[Application Privileges].

==== Request

`GET /_xpack/security/privilege` +

`GET /_xpack/security/privilege/<application>` +

`GET /_xpack/security/privilege/<application>/<privilege>` +

`DELETE /_xpack/security/privilege/<application>/<privilege>` +

`POST /_xpack/security/privilege/` +

`POST /_xpack/security/privilege/<application>/<privilege>` +

`PUT /_xpack/security/privilege/<application>/<privilege>`


==== Description

Application privileges allow Elasticsearch to act as an _oracle_ for security
decisions that need to take place outside of Elasticsearch. These privileges
do not have any affect on the internal security model for Elasticsearch, they
exist so that applications that run externally to Elasticsearch are able to
make use of, and build their own access controls on top of the Elasticsearch
security infrastructure (Rest API, realms) and security model (users, roles).

The Application Privileges API enables you to create, modify, delete or retrieve
{xpack-ref}/defining-roles.html#roles-application-priv[Application Privileges]
in a cluster.

A user's application privileges may be checked by using the
<<security-api-has-privileges, Has Privileges API>>.


==== Path Parameters

`application`::
  (string) The name of the application. Application Privileges are always
  associated with exactly one application.
  The validation rules for application names are described below.
  If you do not specify this parameter, then the Get Application Privileges API
  returns information about all privileges for all applications.
  This parameter is mandatory for the Delete and Put Application Privileges APIs

`privilege`::
  (string) The name of the privilege.
  The validation rules for privilege names are described below.
  If you do not specify this parameter, then the Get Application Privileges API
  returns information about all privileges for the requested application.
  This parameter is mandatory for the Delete and Put Application Privileges APIs


==== Request Body

The GET and DELETE requests do not accept a body.

For PUT and POST requests where the application name and privilege name are
included as path parameters, the body of the request is a JSON object that
includes the following fields:

`application`:: (string) The name of the application to which this privilege
belongs. This field is optional, but if it exists it must match the application
name in the path parameter.

`name`:: (string) The name of the privilege to store. This field is optional,
but if it exists it must match the privilege name in the path parameter.

`actions`:: (array-of-string) A list of action names that are granted by this
privilege. This field must exist, and may not be an empty array.

`metadata`:: (object) Optional meta-data. Within the `metadata` object, keys
that begin with `_` are reserved for system usage.

For POST request that do not include the application and privilege names as
path parameters, the body of the request may define multiple privileges.
The body is a JSON object where the names of the fields are the application
names, and the value of each field is an object. The fields in this inner
object are the names of the privileges, and each value is a JSON object that
follows the same structure as per the PUT request described above.
This endpoint will create or update privileges. It will not remove any
privileges that have been previously defined.

[[security-api-app-privileges-validation]]
==== Validation

Application Names::
    Application names are formed from a _prefix_, with an optional _suffix_ that
    conform the the following rules:
    * The prefix must begin with a lowercase ASCII letter
    * The prefix may only contain ASCII letter or digits
    * The prefix must be at least 3 characters long
    * If the suffix exists, it must begin with either `-` or `_`
    * The suffix may not contain any of the following characters:
      `\\`, `/`, `*`, `?`, `"`, `<`, `>`, `|`, `,`, `*`
    * No part of the name may contain whitespace.

Privilege Names::
    Privilege names must begin with a lowercase ASCII letter, and may only contain
    ASCII letter and digits along with the characters `_`, `-` and `.`

Action Names::
    Action names may contain any number of printable ASCII character, and must contain
    at least one of the following characters: `/` `*`, `:`

==== Authorization

To use this API, you must have either:

- the `manage_security` cluster privilege (or a greater privilege such as `all`); _or_
- the _"Manage Application Privileges"_ global privilege for the application being referenced
  in the request

==== Examples

[[security-api-put-privilege]]
To add a single privilege, submit a PUT or POST request to the
`/_xpack/security/privilege/<application>/<privilege>` endpoint:

[source,js]
--------------------------------------------------
PUT /_xpack/security/privilege/myapp/read
{
  "application": "myapp", <1>
  "name": "read", <2>
  "actions": [
      "action:login", <3>
      "data:read/*" <4>
  ],
  "metadata" : { <5>
    "description" : "Read access to myapp"
  }
}
--------------------------------------------------
// CONSOLE
<1> This field is optional, it is implied by the path parameter
<2> This field is optional, it is implied by the path parameter
<3> This string has significance within the "myapp" application,
    Elasticsearch does not assign any meaning to it.
<4> The use of a wildcard here (`*`) means that this privilege grants
    access to all actions that start with `data:read/`.  Elasticsearch
    does not assign any meaning to these actions, however the
    <<security-api-has-privileges, Has Privileges API>> will respect
    the use of a wildcard and return `true` if the request includes an
    application privilege such as `data:read/users` or `data:read/settings`.
<5> The metadata object is optional.

A successful call returns a JSON structure that shows whether the privilege has
been created or updated.

[source,js]
--------------------------------------------------
{
  "myapp": {
    "read": {
      "created": true <1>
    }
  }
}
--------------------------------------------------
// TESTRESPONSE
<1> When an existing privilege is updated, `created` is set to false.

[[security-api-put-privileges]]
To add multiple privileges, submit a POST request to the
`/_xpack/security/privilege/` endpoint:

[source,js]
--------------------------------------------------
PUT /_xpack/security/privilege/
{
  "app01": {
    "read": {
      "actions": [ "action:login", "data:read/*" ]
    },
    "write": {
      "actions": [ "action:login", "data:write/*" ]
    }
  },
  "app02": {
    "all": {
      "actions": [ "*" ]
    }
  }
}
--------------------------------------------------
// CONSOLE

A successful call returns a JSON structure that shows whether the privileg has been
created or updated.

[source,js]
--------------------------------------------------
{
  "app01": {
    "read" : { "created": true },
    "write": { "created": true }
  },
  "app02": {
    "all": { "created": true }
  }
}
--------------------------------------------------
// TESTRESPONSE

[[security-api-get-privilege]]
To retrieve a privilege, issue a GET request to the
`/_xpack/security/privilege/<application>/<privilege>` endpoint:

[source,js]
--------------------------------------------------
GET /_xpack/security/privilege/app01/read
--------------------------------------------------
// CONSOLE
// TEST[continued]

A successful call returns an object keyed by application name and privilege
name. If the privilege is not defined, the request responds with a 404 status.

[source,js]
--------------------------------------------------
{
  "app01": {
    "read": {
      "application": "app01",
      "name": "read",
      "actions": [ "action:login", "data:read/*" ],
      "metadata": { }
    }
  }
}
--------------------------------------------------
// TESTRESPONSE

To retrieve all privileges for an application, omit the privilege name.

[source,js]
--------------------------------------------------
GET /_xpack/security/privilege/app01/
--------------------------------------------------
// CONSOLE
// TEST[continued]

To retrieve every privileges, omit both the application and privilege names.

[source,js]
--------------------------------------------------
GET /_xpack/security/privilege/
--------------------------------------------------
// CONSOLE
// TEST[continued]


[[security-api-delete-privielge]]
To delete a privilege, submit a DELETE request to the
`/_xpack/security/privilege/<application>/<privilege>` endpoint:

[source,js]
--------------------------------------------------
DELETE /_xpack/security/privilege/app01/write
--------------------------------------------------
// CONSOLE
// TEST[continued]

If the role is successfully deleted, the request returns `{"found": true}`.
Otherwise, `found` is set to false.

[source,js]
--------------------------------------------------
{
  "app01": {
    "write": {
      "found" : true
    }
  }
}
--------------------------------------------------
// TESTRESPONSE

