[[configuring-stack-security]]
== Configure security for the Elastic Stack
++++
<titleabbrev>Configuring security</titleabbrev>
++++

When you start {es} for the first time, security features are automatically
enabled by default. {es} handles the configuration to create a secured cluster
out of the box without requiring you to explicitly configure anything.

The startup process also generates an enrollment token that you can use to
enroll {kib} and connect it with your secured {es} cluster. You enter
this enrollment token the first time that you start {kib} to establish a secure
connection and ensure that traffic between {kib} and {es} is encrypted.

Use the `elasticsearch-create-enrollment-token` tool to generate enrollment
tokens for enrolling additional nodes and configuring additional {kib}
instances to connect with your secured {es} cluster. Without any manual
configuration, you'll have Transport Layer Security (TLS) enabled between
nodes, which prevents unauthorized nodes from joining your {es} cluster. 

You can then configure {beats}, {ls}, and other clients to communicate with
{es} using TLS so that all communications are encrypted. This level of security
is strong, and ensures that any communications in and out of your cluster are
secure.

.Understanding transport contexts
****
Transport Layer Security (TLS) is the name of an industry standard protocol for
applying security controls (such as encryption) to network communications. TLS
is the modern name for what used to be called Secure Sockets Layer (SSL). The
{es} documentation uses the terms TLS and SSL interchangeably.

Transport Protocol is the name of the protocol that {es} nodes use to
communicate with one another. This name is specific to {es} and distinguishes
the transport port (default `9300`) from the HTTP port (default `9200`). Nodes
communicate with one another using the transport port, and REST clients
communicate with {es} using the HTTP port.

Although the word _transport_ appears in both contexts, they mean different
things. It's possible to apply TLS to both the {es} transport port and the HTTP
port. We know that these overlapping terms can be confusing, so to clarify, in
this scenario we're applying TLS to the {es} transport port. In
<<security-basic-setup-https,the next scenario>>, we'll apply TLS to the {es}
HTTP port.
****

include::securing-communications/configuring-tls-docker.asciidoc[]
include::securing-communications/enabling-cipher-suites.asciidoc[]
include::securing-communications/tls-versions-jdk.asciidoc[]
include::reference/files.asciidoc[]
include::fips-140-compliance.asciidoc[]
