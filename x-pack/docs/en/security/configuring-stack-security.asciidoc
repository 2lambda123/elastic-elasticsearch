[[configuring-stack-security]]
== Configure security for the Elastic Stack
++++
<titleabbrev>Configuring security</titleabbrev>
++++

When you start {es} for the first time, security features are automatically
enabled by default. {es} automatically generates a password for the built-in
`elastic` user, creates keystores for the HTTP and transport layers, and
persists the updated security configuration to your cluster's
`elasticsearch.yml` file. You'll have a secured cluster right out of the box
without having to explicitly configure anything.

Additionally, the startup process generates an enrollment token that you can use to enroll {kib} and connect it with your secured {es} cluster. You enter
this enrollment token the first time that you start {kib}. The
initialization process verifies the token, sets the password for the built-in
`kibana_system` user, generates the necessary security certificate, and persists
the configuration to the `kibana.yml` file.

Use the `elasticsearch-create-enrollment-token` tool to generate enrollment
tokens that you can use to enroll additional nodes in your cluster. You
can also use this tool to generate enrollment tokens for configuring
additional {kib} instances to connect with your secured {es} cluster.

Without any manual configuration, you'll have Transport Layer Security (TLS)
enabled between nodes, which prevents unauthorized nodes from joining your {es}
cluster. Enrolling {kib} provides a secure connection to your cluster and
ensures that traffic between {kib} and {es} is encrypted.

image::images/elastic-security-overview.png[Elastic Security layers]


[discrete]
[[security-basic-https-overview]]
=== Basic security plus secured HTTPS traffic (Elastic Stack)

This scenario builds on the one for basic security and secures all HTTP
traffic with TLS. In addition to configuring TLS on the transport interface of
your {es} cluster, you configure TLS on the HTTP interface for both
{es} and {kib}.

NOTE: If you need mutual (bidirectional) TLS on the HTTP layer, then you'll
need to configure mutual authenticated encryption.

You then configure {kib} and Beats to communicate with
{es} using TLS so that all communications are encrypted. This level
of security is strong, and ensures that any communications in and out of your
cluster are secure.

<<security-basic-setup-https,Set up basic security plus HTTPS traffic>>

include::securing-communications/security-minimal-setup.asciidoc[]
include::securing-communications/security-basic-setup.asciidoc[]
include::securing-communications/security-basic-setup-https.asciidoc[]
include::securing-communications/configuring-tls-docker.asciidoc[]
include::securing-communications/enabling-cipher-suites.asciidoc[]
include::securing-communications/tls-versions-jdk.asciidoc[]
include::reference/files.asciidoc[]
include::fips-140-compliance.asciidoc[]
