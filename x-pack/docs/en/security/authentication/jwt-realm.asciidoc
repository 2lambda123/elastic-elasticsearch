[role="xpack"]
[[jwt-realm]]
=== JWT Authentication

JWT realms allow reuse of certain `identification tokens` for {es} authentication and authorization.
JWT realms are only intended to use with JWTs from existing, external workflows.
The format of those JWTs must be similar to Open ID Connect (OIDC) ID Tokens.
See <<external-workflow-requirements>>.

TIP: If the external workflow does not exist, use `api` tokens instead.

TIP: If the external workflow is Open ID Connect, and {es} is the OIDC RP, use `oidc` realm instead.

[[external-workflow-requirements]]
==== External Workflow Requirements

Consider workflows that are completely separate from {es}.
They can be Open ID Connect, bespoke, or other, as long as they use JWS JWTs for an `identification token`.
In those workflows, end-users interact with a third-party application, and authenticate via a third-party authentication application.

Different tokens are created within those workflows for authentication, authorization, and identification.
Reusing the authentication or authorization tokens outside of those workflows may not be desirable.
However, reusing the `identification token` is possible.

JWT realm allows reusing the `identification token` for {es} authentication and authorization.
JWT format is similar to Open ID Connect (OIDC) ID Tokens, with some differences. See <<jwt-validation>>.

[[jwt-authentication-requirements]]
==== JWT Authentication Requirements

Two credentials are required by JWT realms, a client credential and an end-user identity token.
Both must be validated separately, because the external client and end-user are separate entities.

See <<client-authentication>> and <<jwt-validation>>.

[[client-authentication]]
==== Client authentication

Client authentication is one of two credentials required by JWT realms.
See <<jwt-validation>> for the other credential.

JWT realms support two client authentication settings: `shared_secret` and `none`.

IMPORTANT: Client authentication is enabled by default in JWT realms.

If client authentication type is `shared_secret`, JWT realm requires a request header `ES-Client-Authentication`.
The value must be a case-insensitive match to the realm's secure string setting `client_authentication.shared_secret`.
See <<ref-jwt-settings>>.

If client authentication type is `none`, the request header `ES-Client-Authentication` is ignored.

WARNING: Client authentication can be disabled, but it is not recommended.

[[jwt-validation]]
==== JWT validation

JWT validation is one of two credentials required by JWT realms.
See <<client-authentication>> for the other credential.

The supported JWT encoding is JSON Web Signature (JWS).
See <<jws-header-validation>> and <<jws-signature-validation>>.

The supported JWT payload is an OIDC ID Token claims set. See <<jwt-claims-set-validation>>.

[[jws-header-validation]]
==== JWS header validation

Values `alg` and `typ` are validated using OIDC ID Token validation rules.

TIP: `alg` is required. `alg` must be allowed in JWT realm settings.

See `allowed_signature_algorithms` in <<ref-jwt-settings>>.

[[jwt-claims-set-validation]]
==== JWT claims set validation

OIDC ID Token claims `iss`, `aud`, `sub`, `iat`, `exp`, `nbf`, and `auth_time` are validated using OIDC ID Token validation rules.

TIP: `iss`, `aud`, `iat`, and `exp` are required. `iss` and `aud` must be allowed in JWT realm settings.

IMPORTANT: `nonce` claim is ignored; it is only applicable inside an OIDC workflow, not application to JWT realm.

Elasticsearch claims `principal`, `groups`, `name`, `mail`, and `dn` are validated using {es} validation rules.
Regular expression settings may be used.

See <<ref-jwt-settings>>.

[[jws-signature-validation]]
==== JWS signature validation

Signatures are validated using JWS (JSON Web Signature) validation rules.

[[jwt-authorization]]
==== JWT Realm Authorization

JWT realm authorization supports role mapping API or delegated authorization realms.

WARNING: JWT realm does not support using the role_mapping.yml file.

==== JWT Realm Authorization via Role Mapping API

.If JWT realm role mapping is used for authorization, these claims are available for role mapping.
* `principal` claim: JWT claim in the form of a string is used as the {es} user's principal value.
* `dn` claim: JWT claim in the form of a Distinguished Name string is used as the {es} user's DN value.
* `groups` claim: JWT claim in the form of a comma separate list is used as the {es} user's groups value.
* `metadata` claims: JWTs claims in the form of strings, numbers, booleans, and collections are used as the {es} user's metadata, formatted as `jwt_claim_<key>` = `<value>`

See <<ref-jwt-settings>>.

===== Example JWT Realm Role Mapping Rule

Example JWT realm role mapping rule.

[source,text]
--------------------------------------------------
PUT /_security/role_mapping/jwt1_users
{
  "roles" : [ "user" ],
  "rules" : { "all" : [
      { "field": { "realm.name": "jwt1" } },
      { "field": { "username": "principalname1" } }
      { "field": { "dn": "CN=Principal Name 1,DC=example.com" } }
      { "field": { "groups": "group1" } }
      { "field": { "metadata.jwt_claim_other": "other1" } }
  ] },
  "enabled": true
}
--------------------------------------------------

==== JWT Realm Authorization via Delegated Authorization

.If Delegated Realms are used for authorization, this claim is available for roles lookup.
* `principal` claim: JWT claim in the form of a string is used as the {es} user's principal value.

See <<ref-jwt-settings>>.

===== Example JWT Realm Delegated Authorization:

Example JWT realm delegated authorization setting.

[source,text]
--------------------------------------------------
xpack.security.authc.realms.jwt.jwt2.authorization_realms: file1,native1,ldap1,ad1
--------------------------------------------------

Example Native realm role mapping rule.

[source,text]
--------------------------------------------------
PUT /_security/role_mapping/native1_users
{
  "roles" : [ "user" ],
  "rules" : { "all" : [
      { "field": { "realm.name": "jwt1" } },
      { "field": { "username": "principalname1" } }
  ] },
  "enabled": true
}
--------------------------------------------------

[[hmac-oidc-example]]
==== JWT Realm Example with OIDC HMAC Key

These settings are for a JWT issuer, Elasticsearch, and a client of Elasticsearch.
The example HMAC key is in OIDC HMAC compatible format; key bytes are UTF-8 encoded UNICODE characters.

WARNING: HMAC UTF-8 keys need to be longer than HMAC random byte keys to achieve same key strength.

[[hmac-oidc-example-jwt-issuer]]
===== JWT issuer

These values are for a bespoke authentication service; external to {es}.

[source,text]
--------------------------------------------------
Issuer:     iss8
Audiences:  aud8
Algorithms: HS256
HMAC OIDC:  hmac-oidc-key-string-for-hs256-algorithm
--------------------------------------------------

[[hmac-oidc-example-jwt-realm]]
===== JWT realm elasticsearch.yml settings

These settings are for {es}.

[source,yml]
--------------------------------------------------
xpack.security.authc.realms.jwt.jwt8.order: 8
xpack.security.authc.realms.jwt.jwt8.allowed_issuer: iss8
xpack.security.authc.realms.jwt.jwt8.allowed_audiences: [aud8]
xpack.security.authc.realms.jwt.jwt8.allowed_signature_algorithms: [HS256]
xpack.security.authc.realms.jwt.jwt8.claims.principal: sub
xpack.security.authc.realms.jwt.jwt8.client_authentication.type: SHARED_SECRET
--------------------------------------------------

===== JWT realm elasticsearch-keystore secure settings

These settings are for {es}.

[source,yml]
--------------------------------------------------
xpack.security.authc.realms.jwt.jwt8.hmac_key: hmac-oidc-key-string-for-hs256-algorithm
xpack.security.authc.realms.jwt.jwt8.client_authentication.shared_secret: client-shared-secret-string
--------------------------------------------------

===== JWT realm role mapping rule

These settings are for {es}.

[source,text]
--------------------------------------------------
PUT /_security/role_mapping/native1_users
{
  "roles" : [ "user" ],
  "rules" : { "all" : [
      { "field": { "realm.name": "jwt8" } },
      { "field": { "username": "principalname1" } }
  ] },
  "enabled": true
}
--------------------------------------------------

[[hmac-oidc-example-request-headers]]
===== Request Headers

These settings are for an {es} client.

[source,text]
--------------------------------------------------
X-Client-Authentication: client-shared-secret-string
Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJpc3M4IiwiYXVkIjoiYXVkOCIsInN1YiI6InNlY3VyaXR5X3Rlc3RfdXNlciIsImV4cCI6NDA3MDkwODgwMCwiaWF0Ijo5NDY2ODQ4MDB9.UnnFmsoFKfNmKMsVoDQmKI_3-j95PCaKdgqqau3jPMY
--------------------------------------------------

[[hmac-oidc-example-jwt-decoded]]
===== Decoded JWT

This is a partial decoding of the JWT. It is for information only.

[source,text]
--------------------------------------------------
Header: {"typ":"JWT","alg":"HS256"}
Claims: {"aud":"aud8","sub":"security_test_user","iss":"iss8","exp":4070908800,"iat":946684800}
Signature: UnnFmsoFKfNmKMsVoDQmKI_3-j95PCaKdgqqau3jPMY
--------------------------------------------------

TIP: The validity period in this example is from 2000 to 2099, inclusive. JWTs typically have a shorter validity period than 100 years.

TIP: The signature in this example is deterministic because the header, claims, and HMAC key are fixed.
     {es} does not validate `nonce` claims, but adding it could inject entropy to vary the signature.
