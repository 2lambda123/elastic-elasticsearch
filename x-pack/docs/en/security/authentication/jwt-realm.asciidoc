[role="xpack"]
[[jwt-realm]]
=== JWT Authentication

JWT realms allow reuse of certain `identification tokens` for {es} authentication and authorization.
JWT realms are only intended to use with JWTs from existing, external workflows.
The format of those JWTs must be similar to Open ID Connect (OIDC) ID Tokens.
See <<jwt-realm,external-workflow-requirements>>.

TIP: If the external workflow does not exist, use `api` tokens instead.

TIP: If the workflow is Open ID Connect, but {es} is the OIDC RP, use `oidc` realm instead of 'jwt' realm.
     Only use `jwt` realm if {es} is external to the OIDC workflow.

[[external-workflow-requirements]]
==== External Workflow Requirements

Consider the scenario of a workflow that is completely separate from {es}.
In that workflow, end-users authenticate to a third-party application via a third-party authentication service.

The end-user authenticates to the authentication service, and various tokens are issued.
One of the tokens is an `identification token`, and it is issued to the third-party application or end-user.
The third-party application performs actions on behalf of the end-user, and the `identification token` identifies the end-user.

IMPORTANT: Separate tokens are used in external workflow for authentication and authorization.
           The `identification token` is only used for identifying the end-user.

[[jwt-authentication-requirements]]
==== JWT Authentication Requirements

Two credentials are required by JWT realms, a client credential and an end-user credential.
The client and end-user are separate entities, so both must be authenticated.

JWT realms allow repurposing an identification token for {es} authentication and authorization.
The external workflow can be Open ID Connect or bespoke.
JWT format and validation are similar to Open ID Connect (OIDC) ID Tokens, with some differences.
See <<jwt-realm,jwt-validation>>.

The client is separate from the end-user. JWT realms require the external client to authenticate as well.
See <<jwt-realm,client-authentication>>.

[[client-authentication]]
=== Client authentication

Client authentication is one of two credentials required by JWT realms.
See <<jwt-realm,jwt-validation>> for the other credential.

JWT realms support two client authentication settings: `shared_secret` and `none`.

IMPORTANT: Client authentication is enabled by default in JWT realms.

If client authentication type is `shared_secret`, JWT realm requires a request header `ES-Client-Authentication`.
The value must be a case-insensitive match to the realm's secure string setting `client_authentication.shared_secret`.
See <<security-settings,ref-jwt-settings>>.

If client authentication type is `none`, the request header `ES-Client-Authentication` is ignored.

WARNING: Client authentication can be disabled, but it is not recommended.

[[jwt-validation]]
=== JWT validation

JWT validation is one of two credentials required by JWT realms.
See <<jwt-realm,client-authentication>> for the other credential.

The supported JWT encoding is JSON Web Signature (JWS).
See <<jwt-realm,jws-header-validation>> and <<jwt-realm,jws-signature-validation>>.

The supported JWT payload is an OIDC ID Token claims set. See <<jwt-realm,jwt-claims-set-validation>>.

[[jws-header-validation]]
==== JWS header validation

Values `alg` and `typ` are validated using OIDC ID Token validation rules.

TIP: `alg` is required. `alg` must be allowed in JWT realm settings.

See `allowed_signature_algorithms` in <<security-settings,ref-jwt-settings>>.

[[jwt-claims-set-validation]]
==== JWT claims set validation

OIDC ID Token claims `iss`, `aud`, `sub`, `iat`, `exp`, `nbf`, and `auth_time` are validated using OIDC ID Token validation rules.

TIP: `iss`, `aud`, `iat`, and `exp` are required. `iss` and `aud` must be allowed in JWT realm settings.

IMPORTANT: `nonce` claim is ignored; it is only applicable inside an OIDC workflow, not application to JWT realm.

Elasticsearch claims `principal`, `groups`, `name`, `mail`, and `dn` are validated using {es} validation rules.
Regular expressions may be used with some or none of these claims.

See <<security-settings,ref-jwt-settings>>.

[[jws-signature-validation]]
==== JWS signature validation

Signatures are validated using JWS (JSON Web Signature) validation rules.

[[jwt-authorization]]
==== JWT Realm Authorization

JWT realm authorization supports role mapping API or delegated authorization realms.

WARNING: JWT realm does not support using the role_mapping.yml file.

==== JWT Realm Authorization via Role Mapping API

If JWT realm role mapping is used for authorization, these claims are available for role mapping.
* `principal` claim: JWT claim in the form of a string is used as the {es} user's principal value.
* `dn` claim: JWT claim in the form of a Distinguished Name string is used as the {es} user's DN value.
* `groups` claim: JWT claim in the form of a comma separate list is used as the {es} user's groups value.
* `metadata` claims: JWTs claims in the form of strings, numbers, booleans, and collections are used as the {es} user's metadata, formatted as `jwt_claim_<key>` = `<value>`

See <<security-settings,ref-jwt-settings>>.

===== Example JWT Realm Role Mapping Rule

Example JWT realm role mapping rule.

[source,text]
--------------------------------------------------
{ "all": [
    { "field": { "realm.name": "jwt1" } },
    { "field": { "username": "principalname1" } }
    { "field": { "dn": "CN=Principal Name 1,DC=example.com" } }
    { "field": { "groups": "group1" } }
    { "field": { "metadata.jwt_claim_other1": "value1" } }
    { "field": { "metadata.jwt_claim_other2": "value2" } }
] }
--------------------------------------------------

==== JWT Realm Authorization via Delegated Authorization

If Delegated Realms are used for authorization, this claim is available for roles lookup.
* `principal` claim: JWT claim in the form of a string is used as the {es} user's principal value.

See <<security-settings,ref-jwt-settings>>.

===== Example JWT Realm Delegated Authorization:

Example JWT realm delegated authorization setting.

[source,text]
--------------------------------------------------
xpack.security.authc.realms.jwt.jwt2.authorization_realms: file1,native1,ldap1,ad1
--------------------------------------------------

Example Native realm role mapping rule.

[source,text]
--------------------------------------------------
{ "all": [
    { "field": { "realm.name": "native1" } },
    { "field": { "username": "principalname1" } }
    { "field": { "dn": "CN=Principal Name 1,DC=example.com" } }
    { "field": { "groups": "group1" } }
    { "field": { "metadata.jwt_claim_other": "other1" } }
] }
--------------------------------------------------

[[hmac-oidc-example]]
==== JWT Realm Example with OIDC HMAC Key

This is a complete example of a JWT issuer, realm, and {es} request headers.
It uses a static HMAC signing key in OIDC compatible format using UTF-8 restricted alphabet encoding.

[[hmac-oidc-example-jwt-issuer]]
===== JWT issuer

These values are external to {es}. An example is an external authentication service.

[source,text]
--------------------------------------------------
Issuer:     iss8
Audiences:  aud8
Algorithms: HS256
HMAC OIDC:  hmac-oidc-key-string-for-hs256-algorithm
--------------------------------------------------

[[hmac-oidc-example-jwt-realm]]
===== JWT realm elasticsearch.yml settings
[source,yml]
--------------------------------------------------
xpack.security.authc.realms.jwt.jwt8.allowed_audiences: [aud8]
xpack.security.authc.realms.jwt.jwt8.allowed_signature_algorithms: [HS256]
xpack.security.authc.realms.jwt.jwt8.order: 8
xpack.security.authc.realms.jwt.jwt8.claims.principal: sub
xpack.security.authc.realms.jwt.jwt8.allowed_issuer: iss8
xpack.security.authc.realms.jwt.jwt8.client_authentication.type: SHARED_SECRET
--------------------------------------------------

===== JWT realm elasticsearch-keystore secure settings
[source,yml]
--------------------------------------------------
xpack.security.authc.realms.jwt.jwt8.hmac_key: hmac-oidc-key-string-for-hs256-algorithm
xpack.security.authc.realms.jwt.jwt8.client_authentication.shared_secret: client-shared-secret-string
--------------------------------------------------

[[hmac-oidc-example-request-headers]]
===== Request Headers

[source,text]
--------------------------------------------------
X-Client-Authentication: client-shared-secret-string
Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJpc3M4IiwiYXVkIjoiYXVkOCIsInN1YiI6InNlY3VyaXR5X3Rlc3RfdXNlciIsImV4cCI6NDA3MDkwODgwMCwiaWF0Ijo5NDY2ODQ4MDB9.UnnFmsoFKfNmKMsVoDQmKI_3-j95PCaKdgqqau3jPMY
--------------------------------------------------

[[hmac-oidc-example-jwt-decoded]]
===== Decoded JWT

[source,text]
--------------------------------------------------
Header: {"typ":"JWT","alg":"HS256"}
Claims: {"aud":"aud8","sub":"security_test_user","iss":"iss8","exp":4070908800,"iat":946684800}
Signature: UnnFmsoFKfNmKMsVoDQmKI_3-j95PCaKdgqqau3jPMY
--------------------------------------------------

IMPORTANT: The validity period in this example is 2000 to 2099.

TIP: The signature in this example is deterministic.
Reusing the JWS header, claims set, HMAC algorithm, and HMAC key, produces the same signature.
Use a different HMAC key and re-sign the JWT to make this example secure.
