[role="xpack"]
[[jwt-realm]]
=== JWT authentication

beta::[]

{es} can be configured to trust JSON Web Tokens (JWTs) that are issued as an 
authentication credential from an external service.

When a JWT realm is used to authenticate with {es}, a distinction is made
between the _client_ that is connecting to {es}, and the _user_ on whose behalf
the request should run. The JWT identifies the user, and a separate credential
is used to authenticate the client.

A common scenario that uses JWTs is when an existing front-end application uses 
OpenID Connect (OIDC) as an authentication method, and then accesses {es}
on behalf of the authenticated user.

TIP: If the front-end application does not exist, you can use the
<<token-authentication-services>> instead.

[[jwt-realm-oidc]]
==== JWT uses OIDC workflows
JWT authentication in {es} is derived from OIDC workflows, where different
tokens can be issued by an OIDC Provider (OP). One possible token is an
_ID token_, which uses the JWT format. If the ID token is presented to a JWT
realm, {es} can use it to authenticate, identify, and authorize an individual
user.

NOTE: Because JWTs are external to {es}, you can define a custom workflow
instead of using the OIDC workflow. However, the JWT format must still be JSON
Web Signature (JWS). The JWS header and JWS signature are validated using OIDC
ID token validation rules.

{es} supports a separate <<oidc-realm,OpenID Connect realm>>, which provides
stronger security guarantees than the JWT realm and is preferred for any
use case where {es} can act as an OIDC RP. The OIDC realm is the only supported
way to enable OIDC authentication in {kib}.

[[jwt-realm-configuration]]
==== Configure {es} to use a JWT realm

To use JWT authentication, you create the realm in the `elasticsearch.yml` file
to configure it within the {es} authentication chain.

The JWT realm has a few mandatory settings, plus optional settings that are
described in <<ref-jwt-settings,JWT realm settings>>. The following example
includes the most common settings. After defining settings, use the
{ref}/elasticsearch-keystore.html[`elasticsearch-keystore`] tool to store
values in the {es} keystore.

NOTE: The example values are not intended for every use case, and are included
only to highlight some common settings for this realm.

Client authentication is enabled by default for the JWT realms. Disabling client 
authentication is possible, but strongly discouraged.

. Add your JWT realm to the `elasticsearch.yml` file:
+
--
[source, yaml]
----
xpack.security.authc.realms.jwt.jwt1:
  order: 3
  client_authentication.type: shared_secret
  allowed_issuer: "https://issuer.example.com/jwt/"
  allowed_audiences: [ "8fb85eba-979c-496c-8ae2-a57fde3f12d0" ]
  allowed_signature_algorithms: [RS256,HS256]
  pkc_jwkset_path: jwt/jwkset.json
  claims.principal: sub
----

`order`::
Specifies a realm `order` of `3`, which indicates the order in which the
configured realm is checked when authenticating a user. Realms are consulted in
ascending order, where the realm with the lowest order value is consulted first. 

`client_authentication.type`::
Specifies the client authentication type as `shared_secret`, which means that
the client is authenticated using an HTTP request header that must match a
pre-configured secret value. The client must provide this shared secret with
every request in the `ES-Client-Authentication` header. The value must be a
case-insensitive match to the realm's `client_authentication.shared_secret`.

`allowed_issuer`::
Sets a verifiable identifier for your JWT issuer. This value is typically a
case-sensitive URL that uses the HTTPS scheme, which contains a scheme and host.

`allowed_audiences`::
Specifies a list of allowed JWT audiences that {es} should verify.

`allowed_signature_algorithms`::
Indicates that {es} should use the `RS256` and `HS256` signature algorithms to
verify the signature of the JWT from the JWT issuer.

`pkc_jwkset_path`::
The file pathto a JSON Web Key (JWK) set containing the key material that the
JWT issuer uses to sign tokens and claim responses. 

`claims.principal`::
The name of the JWT claim that contains the user's principal (username).

--

. Store the `shared-secret` value for `client_authentication.type`:
+
[source,shell]
----
bin/elasticsearch-keystore add xpack.security.authc.realms.jwt.jwt1.client_authentication.shared_secret
----

. Store the HMAC keys for `allowed_signature_algorithms`, which use the HMAC
SHA-256 algorithm `HS256` in the example:
+
[source,shell]
----
bin/elasticsearch-keystore add-file xpack.security.authc.realms.jwt.jwt1.hmac_jwkset <path> <1>
----
<1> Path to a JWK, which is a resource for a set of JSON-encoded public keys.
+
[NOTE]
====
Using the JWK is preferred. However, you can add an HMAC key in string format
using the following command. This format is compatible with OIDC HMAC keys, but
only supports a single key with no attributes. You can only use on HMAC format
simultaneously.

[source,shell]
----
bin/elasticsearch-keystore add xpack.security.authc.realms.jwt.jwt1.hmac_key
----
====

[[jwt-validation]]
==== JWT encoding and validation
JWTs can be parsed into three pieces:

* Header - Provides information about how to validate the token.
* Claims - Contains data about the calling user or application.
* Signature - The raw data that's used to validate the token.

[source,text]
----
Header: {"typ":"JWT","alg":"HS256"}
Claims: {"aud":"aud8","sub":"security_test_user","iss":"iss8","exp":4070908800,"iat":946684800}
Signature: UnnFmsoFKfNmKMsVoDQmKI_3-j95PCaKdgqqau3jPMY
----

This example illustrates a partial decoding of a JWT. The validity period is
from 2000 to 2099, inclusive. JWTs typically have a validity period shorter than
100 years. The signature in this example is deterministic because the header,
claims, and HMAC key are fixed. 

The supported JWT encoding is JSON Web Signature (JWS). The JWS header and JWS
are validated using OpenID Connect ID Token validation rules. Some validation is 
customizable through <<ref-jwt-settings,JWT realm settings>>.

[[jwt-validation-header]]
===== Header claims
The header claims indicate the token type and how the token was signed.

`alg`::
(Required, String) Indicates the algorithm that was used to sign the token, such
as `HS256`.

`typ`::
(Optional, String) Indicates the token type, which must be `JWT`.

[[jwt-validation-oidc]]
===== Payload claims validated by OIDC
OIDC ID tokens contain several claims, which provide information about the user
who is issuing the token, and the token itself. The following claims are
validated using OIDC ID token rules.

NOTE: You can relax validation of any of the time-based claims by setting 
`allowed_clock_skew`. This value sets the maximum allowed clock skew before
validating JWTs with respect to their creation (`iat`), not before (`nbf`), and
expiration times (`exp`).

`aud`::
(Required, String) Indicates the audience that the ID token is for, expressed as a 
comma-separated value (CSV). One of the values must be an exact, case-sensitive
match to any of the CSV values in the `allowed_audiences` setting.

`exp`::
(Required, integer) Expiration time for the ID token, expressed in UTC
milliseconds since epoch.

`iat`::
(Required, integer) Time that the ID token was issued, expressed in UTC
milliseconds since epoch.

`iss`::
(Required, String) Denotes the issuer that created the ID token. The value must
be an exact, case-sensitive match to the value in the `allowed_issuer` setting.

`nbf`::
(Optional, integer) Indicates the time before which the JWT must not be accepted,
expressed as UTC milliseconds since epoch.

`auth_time`::
(Optional, integer) Time when the user authenticated using the ID token,
expressed as UTC milliseconds since epoch.

[[jwt-validation-es]]
===== Payload claims validated by {es}
{es} validates the following OIDC ID token claims.

NOTE: {es} doesn't validate `nonce` claims, but a custom JWT issuer can add a
random `nonce` claim to introduce entropy into the signature.

* The _principal_ claim from the JWT is required, and defaults to `sub`. It is configurable via the realm setting `claims.principal`.
An optional regular expression can be configured via the realm setting `claims.principal_pattern` to extract a substring.

* The _groups_ claim from the JWT is optional. It is configurable via the realm setting `claims.groups`.
An optional regular expression can be configured via the realm setting `claims.groups_pattern` to extract a substring value.

* The _name_ claim from the JWT is optional. It is configurable via the realm setting `claims.name`.
An optional regular expression can be configured via the realm setting `claims.name_pattern` to extract a substring value.

* The _mail_ claim from the JWT is optional. It is configurable via the realm setting `claims.mail`.
An optional regular expression can be configured via the realm setting `claims.mail_pattern` to extract a substring value.

* The _dn_ claim from the JWT is optional. It is configurable via the realm setting `claims.dn`.
An optional regular expression can be configured via the realm setting `claims.dn_pattern` to extract a substring value.

[[jwt-authorization]]
==== JWT realm authorization

JWT realm authorization supports role mapping API or delegated authorization realms.

WARNING: JWT realm does not support using the `role_mapping.yml` file.

===== JWT realm authorization via Role Mapping API

.If JWT realm role mapping is used for authorization, these claims are available for role mapping.
* `principal` claim: JWT claim in the form of a string is used as the {es} user's principal string value.
* `dn` claim: JWT claim in the form of a Distinguished Name string is used as the {es} user's DN string value.
* `groups` claim: JWT claim in the form of a comma separate list is used as the {es} user's groups list value.
* `metadata` claims: JWTs claims in the form of strings, numbers, booleans, and collections are used as the {es} user's metadata, formatted as `metadata.jwt_claim_<key>` = `<value>` pairs.

See <<ref-jwt-settings>>.

===== Example JWT Realm Role Mapping Rule

Example JWT realm role mapping rule.

[source,console]
----
PUT /_security/role_mapping/jwt1_users
{
  "roles" : [ "user" ],
  "rules" : { "all" : [
      { "field": { "realm.name": "jwt1" } },
      { "field": { "username": "principalname1" } }
      { "field": { "dn": "CN=Principal Name 1,DC=example.com" } }
      { "field": { "groups": "group1" } }
      { "field": { "metadata.jwt_claim_other": "other1" } }
  ] },
  "enabled": true
}
----

===== JWT realm authorization via authorization delegation

.If Delegated Realms are used for authorization, this claim is available for roles lookup.
* `principal` claim: JWT claim in the form of a string is used as the {es} user's principal value.

See <<ref-jwt-settings>>.

WARNING: When Delegated Authorization is enabled in JWT realm, claims for `groups`, `dn`, and `metadata` not used for the {es} user's values.
         Only the JWT `principal` claim is passed through to Delegated Authorization realms.
         The Delegated Authorization realms become responsible for populating all of the {es} user's values, not the JWT realm.

====== Example JWT realm delegated authorization:

Example JWT realm using Delegated Authorization to multiple other realms.

[source,yaml]
----
xpack.security.authc.realms.jwt.jwt2.authorization_realms: file1,native1,ldap1,ad1
----

Example role mapping in realm `native1` for principal `principalname1`.

[source,console]
----
PUT /_security/role_mapping/native1_users
{
  "roles" : [ "user" ],
  "rules" : { "all" : [
      { "field": { "realm.name": "native1" } },
      { "field": { "username": "principalname1" } }
  ] },
  "enabled": true
}
----

If realm `jwt2` successfully authenticates a client, and a JWT for principal `principalname1`, and Delegates Authorization to realm `native1`,
then realm `native1` can lookup that {es} user's values, including using this role mapping rule linked to realm `native1`.

[[hmac-oidc-example]]
==== JWT Realm Example with OIDC HMAC Key

These settings are for a JWT issuer, Elasticsearch, and a client of Elasticsearch.
The example HMAC key is in OIDC HMAC compatible format; key bytes are UTF-8 encoded UNICODE characters.

WARNING: HMAC UTF-8 keys need to be longer than HMAC random byte keys to achieve same key strength.

[[hmac-oidc-example-jwt-issuer]]
===== JWT issuer

These values are for a bespoke authentication service which issues JWTs; external to {es}.

[source,text]
----
Issuer:     iss8
Audiences:  aud8
Algorithms: HS256
HMAC OIDC:  hmac-oidc-key-string-for-hs256-algorithm
----

[[hmac-oidc-example-jwt-realm]]
===== JWT realm clear settings

These settings are for elasticsearch.yml.

[source,yml]
----
xpack.security.authc.realms.jwt.jwt8.order: 8
xpack.security.authc.realms.jwt.jwt8.allowed_issuer: iss8
xpack.security.authc.realms.jwt.jwt8.allowed_audiences: [aud8]
xpack.security.authc.realms.jwt.jwt8.allowed_signature_algorithms: [HS256]
xpack.security.authc.realms.jwt.jwt8.claims.principal: sub
xpack.security.authc.realms.jwt.jwt8.client_authentication.type: shared_secret
----

===== JWT realm secure settings

These settings are for elasticsearch-keystore.

[source,yml]
----
xpack.security.authc.realms.jwt.jwt8.hmac_key: hmac-oidc-key-string-for-hs256-algorithm
xpack.security.authc.realms.jwt.jwt8.client_authentication.shared_secret: client-shared-secret-string
----

===== JWT realm role mapping rule

These settings are for {es} role mapping rules for realm `jwt8` user `principalname``.

[source,console]
----
PUT /_security/role_mapping/jwt8_users
{
  "roles" : [ "user" ],
  "rules" : { "all" : [
      { "field": { "realm.name": "jwt8" } },
      { "field": { "username": "principalname1" } }
  ] },
  "enabled": true
}
----

[[hmac-oidc-example-request-headers]]
===== Request Headers

These settings are for an {es} client.

[source,text]
----
ES-Client-Authentication: SharedSecret client-shared-secret-string
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJpc3M4IiwiYXVkIjoiYXVkOCIsInN1YiI6InNlY3VyaXR5X3Rlc3RfdXNlciIsImV4cCI6NDA3MDkwODgwMCwiaWF0Ijo5NDY2ODQ4MDB9.UnnFmsoFKfNmKMsVoDQmKI_3-j95PCaKdgqqau3jPMY
----
