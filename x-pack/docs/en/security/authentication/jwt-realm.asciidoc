[role="xpack"]
[[jwt-realm]]
=== JWT authentication

beta::[]

{es} can be configured to support user authentication using externally issued _JSON Web Tokens_ (JWTs).

The JWT realm is intended for uses cases where an external service generates
JSON Web Tokens, and {es} should trust these JWTs as an authentication credential.

A common scenario is when an existing front-end application uses
OpenID Connect (OIDC) as an authentication method, and then accesses {es} on
behalf of the logged in user.

NOTE: {es} provides a <<oidc-realm,OpenID Connect realm>> as well as the JWT realm. The `oidc` realm
provides stronger security guarantees and should be preferred for any use case where {es} is able to act
as an OIDC _Relying Party_ (RP). In particular the `oidc` realm is the only supported way to enable OpenID
Connect authentication in Kibana.

TIP: If the front-end application does not exist, the <<token-authentication-services>> can be used instead.

[[jwt-realm-configuration]]
==== Configuring a JWT realm

A simple JWT realm configuration is as follows:

[source, yaml]
------------------------------------------------------------
xpack.security.authc.realms.jwt.jwt1:
  order: 3 <1>
  client_authentication.type: shared_secret <2>
  allowed_issuer: "https://issuer.example.com/jwt/" <3>
  allowed_audiences: [ "8fb85eba-979c-496c-8ae2-a57fde3f12d0" ]
  allowed_signature_algorithms: [RS256,HS256] <4>
  pkc_jwkset_path: jwt/jwkset.json
  claims.principal: sub <5>
------------------------------------------------------------
<1> The realm `order` controls the order in which the configured realms are checked
    when authenticating a user.
<2> The `client_authentication.type` setting is described below in <<jwt-client-authentication>>
<3> The `allowed_issuer` and `allowed_audiences` settings are described below in
    <<jwt-validation>>
<4> The `allowed_signature_algorithms` and `pkc_jwkset_path` settings are
    described below in <<jwt-validation>>
<5> The `claims.principal` setting is described below in <<jwt-authorization>>

Use this command to store the shared secret value corresponding to `client_authentication.type: shared_secret` in the example.

[source, test]
------------------------------------------------------------
bin/elasticsearch-keystore add xpack.security.authc.realms.jwt.jwt1.client_authentication.shared_secret
------------------------------------------------------------

Use one of these commands to store the HMAC keys/key corresponding to `HS256` in the example.

TIP: Only one HMAC format is allowed at a time, not both.

[source, test]
------------------------------------------------------------
bin/elasticsearch-keystore add-file xpack.security.authc.realms.jwt.jwt1.hmac_jwkset <path>
bin/elasticsearch-keystore add xpack.security.authc.realms.jwt.jwt1.hmac_key
------------------------------------------------------------

[[external-workflow-requirements]]
==== External Workflow Requirements

JWT realm functionality is derived from OpenID Connect (OIDC) workflows. A high-level understanding of OIDC Tokens helps with JWT realm.

In OIDC workflows, end-users initiates contact with an OIDC Relying Party (RP), and are redirected to authenticate to an OIDC Provider (OP).
Separate tokens are issued at different steps to represent authentication, authorization, and identification.

.OIDC Tokens
* Grant Token: End-users authenticate to the OIDC OP, receive an OIDC Grant Token, and present it to the OIDC RP as proof of authentication.
* ID Token: OIDC RPs ask the OIDC OP to verify the OIDC Grant Token, and exchange it for two tokens. One is an OpenID Connect ID Token.
* Access Token: OIDC RPs ask the OIDC OP to verify the OIDC Grant Token, and exchange it for two tokens. One is an OIDC Access Token.

IMPORTANT: The ID Token is a JWT, so the encoding is transparent. The other tokens are opaque.

If the ID Token is presented to a JWT realm, {es} can use it to authenticate, identify, and authorize the end-user.

NOTE: Since JWTs are acquired external to {es}, a bespoke workflow can be used instead of OIDC workflow.
      However, the JWT format must still be similar to OpenID Connect ID Tokens. See <<jwt-validation>>.

[[jwt-authentication-requirements]]
==== JWT Authentication Requirements

When a JWT realm is used for authentication into {es}, a distinction is made between the
_client_ that is connecting to {es}, and the _end-user_ on whose behalf the request should execute.
The JWT identifies the user, and a separate credential should be used to authenticate the client itself.

[[jwt-client-authentication]]
==== Client authentication

There are two client authentication settings: `shared_secret` and `none`.

IMPORTANT: Client authentication is enabled by default in JWT realms.

If client authentication type is `shared_secret`, the client is authenticated
using a HTTP request header that must match a pre-configured secret value.
The client must provide this shared secret with every request in the `ES-Client-Authentication` header.
The value must be a case-insensitive match to the realm's <<secure-settings,secure setting>> `client_authentication.shared_secret`.
See <<ref-jwt-settings>>.

If client authentication type is `none`, the request header `ES-Client-Authentication` is ignored.

WARNING: Disabling client authentication is possible, but strongly discouraged.

[[jwt-validation]]
==== JWT validation

The supported JWT encoding is JSON Web Signature (JWS). The JWS header and JWS signature are validated using OpenID Connect ID Token validation rules.
Some validation is customizable via <<ref-jwt-settings>>.

JWS header `alg` is required, and must be in the realm's allow list. JWS header `typ` is optional.

JWT claims `iss`, `aud`, `sub`, `exp`, `iat`, `nbf`, and `auth_time` are validated using OpenID Connect ID Token validation rules.
JWT Claims `principal`, `groups`, `name`, `mail`, and `dn` are validated using {es} validation rules.

IMPORTANT: `nonce` claim is ignored; it is only applicable inside an OIDC workflow, not application to JWT realm.

NOTE: Validation of the JWT time-based claims `exp`, `iat`, `nbf`, and `auth_time` can be relaxed via the realm setting `allowed_clock_skew`.

* The `iss` claim from the JWT is required. It must be an exact, case-sensitive match to the realm setting `allowed_issuer`.

* The `aud` claim from the JWT is required. It is a comma separated value (CSV). One of the values must be an exact,
case-sensitive match to any of the CSV values in the realm setting `allowed_audiences`.

* The `exp` claim from the JWT is required. It is UTC milliseconds since epoch, and must be after wall clock.

* The `iat` claim from the JWT is required. It is UTC milliseconds since epoch, and must be before wall clock.

* The `nbf` claim from the JWT is optional. If present, it is UTC milliseconds since epoch, and must be before wall clock.

* The `auth_time` claim from the JWT is optional. If present, it is UTC milliseconds since epoch, and must be before wall clock.

* The _principal_ claim from the JWT is required, and defaults to `sub`. It is configurable via the realm setting `claims.principal`.
An optional regular expression can be configured via the realm setting `claims.principal_pattern` to extract a substring.

* The _groups_ claim from the JWT is optional. It is configurable via the realm setting `claims.groups`.
An optional regular expression can be configured via the realm setting `claims.groups_pattern` to extract a substring value.

* The _name_ claim from the JWT is optional. It is configurable via the realm setting `claims.name`.
An optional regular expression can be configured via the realm setting `claims.name_pattern` to extract a substring value.

* The _mail_ claim from the JWT is optional. It is configurable via the realm setting `claims.mail`.
An optional regular expression can be configured via the realm setting `claims.mail_pattern` to extract a substring value.

* The _dn_ claim from the JWT is optional. It is configurable via the realm setting `claims.dn`.
An optional regular expression can be configured via the realm setting `claims.dn_pattern` to extract a substring value.

[[jwt-authorization]]
==== JWT Realm Authorization

JWT realm authorization supports role mapping API or delegated authorization realms.

WARNING: JWT realm does not support using the role_mapping.yml file.

==== JWT Realm Authorization via Role Mapping API

.If JWT realm role mapping is used for authorization, these claims are available for role mapping.
* `principal` claim: JWT claim in the form of a string is used as the {es} user's principal string value.
* `dn` claim: JWT claim in the form of a Distinguished Name string is used as the {es} user's DN string value.
* `groups` claim: JWT claim in the form of a comma separate list is used as the {es} user's groups list value.
* `metadata` claims: JWTs claims in the form of strings, numbers, booleans, and collections are used as the {es} user's metadata, formatted as `metadata.jwt_claim_<key>` = `<value>` pairs.

See <<ref-jwt-settings>>.

===== Example JWT Realm Role Mapping Rule

Example JWT realm role mapping rule.

[source,text]
--------------------------------------------------
PUT /_security/role_mapping/jwt1_users
{
  "roles" : [ "user" ],
  "rules" : { "all" : [
      { "field": { "realm.name": "jwt1" } },
      { "field": { "username": "principalname1" } }
      { "field": { "dn": "CN=Principal Name 1,DC=example.com" } }
      { "field": { "groups": "group1" } }
      { "field": { "metadata.jwt_claim_other": "other1" } }
  ] },
  "enabled": true
}
--------------------------------------------------

==== JWT Realm Authorization via Delegated Authorization

.If Delegated Realms are used for authorization, this claim is available for roles lookup.
* `principal` claim: JWT claim in the form of a string is used as the {es} user's principal value.

See <<ref-jwt-settings>>.

WARNING: When Delegated Authorization is enabled in JWT realm, claims for `groups`, `dn`, and `metadata` not used for the {es} user's values.
         Only the JWT `principal` claim is passed through to Delegated Authorization realms.
         The Delegated Authorization realms become responsible for populating all of the {es} user's values, not the JWT realm.

===== Example JWT Realm Delegated Authorization:

Example JWT realm using Delegated Authorization to multiple other realms.

[source,text]
--------------------------------------------------
xpack.security.authc.realms.jwt.jwt2.authorization_realms: file1,native1,ldap1,ad1
--------------------------------------------------

Example role mapping in realm `native1` for principal `principalname1`.

[source,text]
--------------------------------------------------
PUT /_security/role_mapping/native1_users
{
  "roles" : [ "user" ],
  "rules" : { "all" : [
      { "field": { "realm.name": "native1" } },
      { "field": { "username": "principalname1" } }
  ] },
  "enabled": true
}
--------------------------------------------------

If realm `jwt2` successfully authenticates a client, and a JWT for principal `principalname1`, and Delegates Authorization to realm `native1`,
then realm `native1` can lookup that {es} user's values, including using this role mapping rule linked to realm `native1`.

[[hmac-oidc-example]]
==== JWT Realm Example with OIDC HMAC Key

These settings are for a JWT issuer, Elasticsearch, and a client of Elasticsearch.
The example HMAC key is in OIDC HMAC compatible format; key bytes are UTF-8 encoded UNICODE characters.

WARNING: HMAC UTF-8 keys need to be longer than HMAC random byte keys to achieve same key strength.

[[hmac-oidc-example-jwt-issuer]]
===== JWT issuer

These values are for a bespoke authentication service which issues JWTs; external to {es}.

[source,text]
--------------------------------------------------
Issuer:     iss8
Audiences:  aud8
Algorithms: HS256
HMAC OIDC:  hmac-oidc-key-string-for-hs256-algorithm
--------------------------------------------------

[[hmac-oidc-example-jwt-realm]]
===== JWT realm clear settings

These settings are for elasticsearch.yml.

[source,yml]
--------------------------------------------------
xpack.security.authc.realms.jwt.jwt8.order: 8
xpack.security.authc.realms.jwt.jwt8.allowed_issuer: iss8
xpack.security.authc.realms.jwt.jwt8.allowed_audiences: [aud8]
xpack.security.authc.realms.jwt.jwt8.allowed_signature_algorithms: [HS256]
xpack.security.authc.realms.jwt.jwt8.claims.principal: sub
xpack.security.authc.realms.jwt.jwt8.client_authentication.type: SHARED_SECRET
--------------------------------------------------

===== JWT realm secure settings

These settings are for elasticsearch-keystore.

[source,yml]
--------------------------------------------------
xpack.security.authc.realms.jwt.jwt8.hmac_key: hmac-oidc-key-string-for-hs256-algorithm
xpack.security.authc.realms.jwt.jwt8.client_authentication.shared_secret: client-shared-secret-string
--------------------------------------------------

===== JWT realm role mapping rule

These settings are for {es} role mapping rules for realm `jwt8` user `principalname``.

[source,text]
--------------------------------------------------
PUT /_security/role_mapping/jwt8_users
{
  "roles" : [ "user" ],
  "rules" : { "all" : [
      { "field": { "realm.name": "jwt8" } },
      { "field": { "username": "principalname1" } }
  ] },
  "enabled": true
}
--------------------------------------------------

[[hmac-oidc-example-request-headers]]
===== Request Headers

These settings are for an {es} client.

[source,text]
--------------------------------------------------
ES-Client-Authentication: SharedSecret client-shared-secret-string
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJpc3M4IiwiYXVkIjoiYXVkOCIsInN1YiI6InNlY3VyaXR5X3Rlc3RfdXNlciIsImV4cCI6NDA3MDkwODgwMCwiaWF0Ijo5NDY2ODQ4MDB9.UnnFmsoFKfNmKMsVoDQmKI_3-j95PCaKdgqqau3jPMY
--------------------------------------------------

[[hmac-oidc-example-jwt-decoded]]
===== Decoded JWT

This is a partial decoding of the example JWT. It is for information only.

[source,text]
--------------------------------------------------
Header: {"typ":"JWT","alg":"HS256"}
Claims: {"aud":"aud8","sub":"security_test_user","iss":"iss8","exp":4070908800,"iat":946684800}
Signature: UnnFmsoFKfNmKMsVoDQmKI_3-j95PCaKdgqqau3jPMY
--------------------------------------------------

TIP: The validity period in this example is from 2000 to 2099, inclusive. JWTs typically have a shorter validity period than 100 years.

TIP: The signature in this example is deterministic because the header, claims, and HMAC key are fixed.
     {es} does not validate `nonce` claims, but the bespoke JWT issuer should add a random `nonce` claim
     to introduce entropy into the signature.
