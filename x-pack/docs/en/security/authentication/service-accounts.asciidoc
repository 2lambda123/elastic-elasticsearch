[role="xpack"]
[[service-accounts]]
=== Service accounts

beta::[]

The {stack-security-features} provide service accounts for better integration
with external services. A service account has a fixed set of privileges
and cannot be authenticated until a service account token is created for it.
A service account token can be either <<service-tokens-command,defined in file>>
or created using the <<security-api-create-service-account-token>>.

A service account has a unique principal that takes the format of `{namespace}/{service}`,
where the `namespace` a top level grouping of service accounts and `service` is the
name of the service. Currently, service accounts are predefined in code and there is
only one service account:

`elastic/fleet-server`:: The service account used by {fleet} server to connect {es}.

TIP: The predefined service accounts serve specific purposes and are not intended
for general use.

[discrete]
[[service-accounts-explanation]]
==== How service accounts work
Service accounts are an evolution of the {es} <<built-in-users>>. While a built-in user
works almost identically to a user-defined user, a service account has the following
differences:

* Its credentials (service tokens) can be <<service-tokens-command,defined in file>>.
* It does not rely on the <<native-realm>> and not always rely on the `.security` index either.
* It is always enabled.
* It is not included in the response of <<security-api-get-user>>. A separate <<security-api-get-service-accounts>> must be used for this purpose.
* It does not have roles but instead a role descriptor named after the service account principal.
* It supports multiple credentials out of the box via service account tokens.
* It does not support basic authentication (this may change in the future).

Service accounts are pre-defined in code. To authenticate using a service account,
you must first create a service token for it. Service tokens can be backed by either
the `service_tokens` file or the `.security` index. Service tokens do not expire.
If no longer needed, they can be deleted with the <<security-api-delete-service-account-tokens>>.
Multiple service tokens can be created for a single service account. This enables
multiple instances of the same service to run with different credentials.

When you are running in production mode, the service accounts feature requires TLS on the HTTP interface.
See <<encrypt-http-communication>>. A runtime check prevents you from invoking any service account
related APIs or authenticating with a service account token unless TLS is enabled on the HTTP interface.

[discrete]
[[create-service-account-tokens]]
==== Creating service account tokens

You must first create a service token to use a service account.
The token name must be at least 1 and no more than 256 characters. It can contain
alphanumeric characters (`a-z`, `A-Z`, `0-9`), dash (`-`) and underscore (`_`).
It cannot begin with an underscore. The token name must also be unique in context
of the associated service account. The token name prefixed with the service account
principal, called fully qualified token name, e.g. `elastic/fleet-server/token1`,
must be globally unique.

A service account token can be created with either:

1. The <<service-tokens-command,elasticsearch-service-tokens>> CLI tool - it saves the new
service token in the `$ES_HOME/config/service_tokens` file and prints the bearer token
on the terminal.

2. The <<security-api-create-service-account-token>> - it saves the new service token
in the `.security` index and returns the bearer token in the HTTP response.

[discrete]
[[authenticate-with-service-account-token]]
==== Authenticating with service account token

The service account token is a HTTP bearer token and can be used as the follows:

[source,shell]
--------------------------------------------------
curl -H "Authorization: Bearer AAEAAWVsYXN0aWMvZmxlZXQtc2VydmVyL3Rva2VuMTo3TFdaSDZWbVMxT0pOeXJXd3N3ZzBR" http://localhost:9200/_security/_authenticate
--------------------------------------------------
// NOTCONSOLE


The authenticate response has a `token` field which contains a `name` for the name of the service token:

[source,js]
--------------------------------------------------
{
  "username": "elastic/fleet-server",
  "roles": [],
  "full_name": "Service account - elastic/fleet-server",
  "email": null,
  "token": {
    "name": "token1" <1>
  },
  "metadata": {
    "_elastic_service_account": true
  },
  "enabled": true,
  "authentication_realm": {
    "name": "service_account",
    "type": "service_account"
  },
  "lookup_realm": {
    "name": "service_account",
    "type": "service_account"
  },
  "authentication_type": "token"
}
--------------------------------------------------
// NOTCONSOLE
<1> The name of the service account token
