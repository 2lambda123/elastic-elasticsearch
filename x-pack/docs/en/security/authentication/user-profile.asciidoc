[role="xpack"]
[[user-profile]]
=== User profiles

beta::[]

User profiles provide persistent and stable representations of end-users.
Persistent means that a profile exists without the need for the user to be online.
Stable means it has an unique identifier that does not change through
the lifetime of a deployment and can be used to refer to the associated
user.
Being able to uniquely refer to users regardless whether they are actively
online is a critical function that underpins important features like
personalisation and collaboration in {kib}.

==== How user profile works

In the {stack}, a user is required to authenticate each request. Each user is
stored in memory with its identity and privileges.
This user-object is ephemeral especially for users authenticating from a realm
backed by external identity providers, e.g. <<saml-realm,SAML>>.
There is simply no way to refer to a user without that user being online
at the moment.

User profiles solve the problem by creating profile documents for
authenticated users and persisting these documents in the profile
<<system-indices,system index>>. Each profile document is assigned a unique ID
which can be used to refer to the associated user.
The user profile essentially becomes the representation of the user,
even when it's not actively online.

When a user logs in to {kib}, {kib} creates a new profile or associates an
existing one for the user.
By using the unique ID of the user profile, {kib} can store user preferences
separately for each user, which is key to fine-grained level of customisation.
This unique ID also offers a way to uniquely refer to a user so that
{kib} can route messages and notifications to the appropriate user,
regardless of whether they're logged in.

===== Distinction between a profile ID and a `username`

Elasticsearch does not require that a `username` is unique across multiple realms.
It is possible for two different realms to authenticate users with the same `username`
with different roles.
Elasticsearch does not assume that these are the same person, and will default
to treating them as separate individuals with distinct user profiles. 

NOTE: For use cases where one individual can authenticate against
multiple realms, the <<security-domain,security domain>> feature may be
used so that these distinct _users_ are considered to be the same identity
and share a single _user profile_.

==== Create and manage user profiles

To create a new user profile or update an existing one, use the
<<security-api-activate-user-profile,activate user profile API>>. When you
submit a request, {es} attempts to locate an existing profile document for the
specified user. If one doesn't exist, {es} creates a new profile document.

In either case, the profile document captures the user's `full_name`, `email`,
`roles`, and `realms`, and also includes the profile unique ID, timestamp of
the operation, and version control numbers. You can retrieve a user profile with
the <<security-api-get-user-profile,get user profile API>> by including the
profile's unique ID (`uid`).

In addition to the user's basic information, you can add data to a profile document
with the <<security-api-update-user-profile-data,update user profile API>>. For
example, you can add user-specific preferences as part of the profile data.

The <<security-api-search-user-profile,search user profile API>> can be used to search profiles
that match given criteria. This search API is designed to support user-suggestions, 
in collaboration features such as those found in {kib}.
It is not intended to provide a general-purpose search API.

==== Limitations

* Creating a new user profile requires a user's authentication details
(`username` and `password` or its
<<token-authentication-services,OAuth2 access token>>).
This means that a user must authenticate at least one time to create a
profile document. Users who have never authenticated to {kib}
(or another profile aware application) will not have a user profile
and will not be returned by the 
<<security-api-search-user-profile,search user profile API>> 

* User profiles are meant for interactive users, such as a human user who
interacts with {kib}. Therefore, user profiles don't support API keys or
<<service-accounts,service accounts>>.
+
NOTE: <<token-authentication-services,OAuth2 tokens>> that represent an
interactive end-user are supported.
