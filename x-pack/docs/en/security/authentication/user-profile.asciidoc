[role="xpack"]
[[user-profile]]
=== User profiles

beta::[]

In the {stack}, a user is required to authenticate each request. Each user is 
represented as an object that encapsulates its identity and privileges. This
object has limitations, especially for users that authenticate with multiple
realms. 

User profiles overcome these limitations by providing a way of uniquely
referring to a user that is more stable, flexible, and extensible than a
`username` alone. A separate profile document is created for each authenticated
user and assigned a unique ID, which is persisted in the profile
<<system-indices,system index>>. The user profile becomes the representation of
the user, even when it's not active. 

The unique ID of each user profile remains relatively unchanged during the
lifetime of a deployment, ensuring that preferences can be customized and 
persisted separately for each user. When a user logs in to {kib}, their
`username` is associated with their user profile. Even when a user logs out,
their user profile persists across sessions and can still be referenced. By
using the unique ID of the user profile, {kib} can route messages and
notifications to the appropriate user, regardless of whether they're logged in.

When checking for an existing user profile, {es} compares a user's `username`
and the realm they're authenticating from to locate the matching profile
document. If a user needs to authenticate with different realms but wants to
use a single profile document, you can configure a
<<security-domain,security domain>> to allow resource sharing across realms.
By using the unique ID of the user profile, {es} can associate a user across
realms.

==== Create and manage a user profile

To create a new user profile or update an existing one, use the 
<<security-api-activate-user-profile,activate user profile API>>. When you
submit a request, {es} attempts to locate an existing profile document for the
specified user. If one doesn't exist, {es} creates a new profile document.

In either case, the profile document captures the user's `full_name`, `email`,
`roles`, and `realms`, and also includes the profile unique ID, timestamp for
the operation, and version control numbers. You can retrieve a user profile with
the <<security-api-get-user-profile,get user profile API>> by including the
profile's unique ID (`uid`).

Other than the user's basic information, you can add data to a profile document
with the <<security-api-update-user-profile-data,update user profile API>>. For
example, you can add user-specific preferences as part of the profile data.

// TODO: search not yet implemented
Because they are standalone documents, you can search for user profiles in
search requests.

==== Limitations

* Creating a new user profile requires a user's authentication details
(`username` and `password`). This means that a user must authenticate at least
one time to create a profile document. If a user hasn't authenticated
into the system, then it's not possible for a user profile to refer to that user.

* User profiles are meant for interactive users, such as a human user who
interacts with {kib}. Therefore, user profiles don't support API keys or 
<<service-accounts,service accounts>>.
+
NOTE: <<token-authentication-services,OAuth2 tokens>> that represent an
interactive end-user are supported.

* If a user changes their `username`, you must create a new user profile with
the <<security-api-activiate-user-profile,activate user profile API>>. Otherwise, 
you must manually update the existing profile to include the new `username`.






