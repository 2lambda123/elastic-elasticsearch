[role="xpack"]
[[fips-140-compliance]]
== FIPS 140-2

The Federal Information Processing Standard (FIPS) Publication 140-2, (FIPS PUB
140-2), titled "Security Requirements for Cryptographic Modules" is a U.S.
government computer  security standard used to approve cryptographic modules.
{es} is FIPS-140 compliant and as such can run in a FIPS-140 enabled JVM. In
order to set {es} in fips mode, you must set the
`xpack.security.fips_mode.enabled` to `true` in `elasticsearch.yml`

For {es}, FIPS 140-2 compliance is ensured by

- Using FIPS approved / NIST recommended cryptographic algorithms.
- Delegating the implementation of these cryptographic algorithms to a NIST
  validated cryptographic module (available via the Java Security Provider
  in use in the JVM).
- Allowing the configuration of {es} in a FIPS 140-2 compliant manner, as
  documented below.

=== Configuring {es} for FIPS 140-2

Apart from setting `xpack.security.fips_mode.enabled`, a number of security
related settings need to be configured accordingly in order to be able to
run {es} successfully in a FIPS 140-2 enabled JVM.


==== TLS

SSLv2 and SSLv3 are not allowed by FIPS 140-2, so `SSLv2Hello` and `SSLv3` cannot
be used for <<ssl-tls-settings, xpack.ssl.supported_protocols>>

NOTE: The use of TLS ciphers is mainly governed by the relevant crypto module
(the FIPS Approved Security Provider that your JVM uses). All the ciphers that
are configured by default in {es} are FIPS-140 compliant and as such can be
used in a FIPS-140 JVM. (see <<ssl-tls-settings, xpack.ssl.cipher_suites>>)


==== TLS Keystores and keys

Keystores can be used in a number of <<ssl-tls-settings>> in order to
conveniently store key and trust material. Neither `JKS`, nor `PKCS#12` keystores
can be used in a FIPS 140-2 enabled JVM however, so you must refrain from using
keystores in your configuration, and use `PEM` encoded files instead. For key
material, you can use the relevant `*.key` and `*.certificate` configuration
options, and for trust material you can use `*.certificate_authorities`.

FIPS 140-2 compliance dictates that the length of the public keys used for TLS
must correspond to the strength of the symmetric key algorithm in use in TLS.
Depending on the value of <<ssl-tls-settings, xpack.ssl.cipher_suites>> that
you select to use, the TLS keys must have corresponding length according to
the following table:

[[comparable-key-strength]]
.Comparable key strengths
|=======================
| Symmetric Key Algorithm | RSA key Length | ECC key length
| `3DES`                  | 2048           | 224-255
| `AES-128`               | 3072           | 256-383
| `AES-256`               | 15630          | 512+
|=======================


==== Password Hashing

{es} offers a number of algorithms for securely hashing credentials in memory and
on disk. However, only the `PBKDF2` family of algorithms is compliant with FIPS
140-2 for password hashing. You must set the the `cache.hash_algo` realm settings
and the `xpack.security.authc.password_hashing.algorithm` setting to one of the
available `pbkdf2` values. See <<hashing-settings>>.

=== Limitations

Due to the limitations that FIPS 140-2 compliance enforces, a small number of
features is not available while running in fips mode. The list is as follows:

* Azure Classic Discovery Plugin
* Ingest Attachment Plugin
* The {ref}/certutil.html[`elasticsearch-certutil`] tool. However,
 `elasticsearch-certutil` can very well be used in a non FIPS 140-2
  enabled JVM (pointing `JAVA_HOME` environment variable to a different java
  installation) in order to generate the keys and certificates that
  can be later used in the FIPS 140-2 enabled JVM.
* The `elasticsearch-plugin` tool. Accordingly, `elasticseach-plugin` can be
  used with a different (non FIPS 140-2 enabled) Java installation if
  available.