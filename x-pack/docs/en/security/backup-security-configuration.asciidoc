[role="xpack"]
[[backup-restore-security-configuration]]
=== Backup and Restore Security Configuration

The {es} {security-features} are configured by files and by various API
endpoints. All these settings are namespaced under `xpack.security.*`. These
are ordinarily included in regular backups but the backup is not complete until
a special index, which holds most of the non-setting configuration, is also
included.

[float]
==== Security Configuration Explained

The configuration files reside on every node and are usually identical across
nodes. They are formatted as YAML text files. Also on every node, there is a
secure store file, named `elasticsearch.keystore`, which is binary formatted,
and it is used only for sensitive settings such as service passwords. Some setting
values may be paths pointing to other files, such as the keys and certificates to
configure TLS. Reassuringly, all these files are stored inside the
`$ES_PATH_CONF` directory, so backing-up the whole directory is sure to capture
all of the file based configuration of {security-features}.

The API calls act on configuration that is stored in the global cluster
metadata as well as inside a dedicated {es} index. This index is named
`.security-6` in the 6.x versions and `.security-7` in the 7.x releases, and it
is always pointed to by the `.security` alias. This contains the data which is
*not* part of an ordinary configuration backup. This data describes:

* definition of users in the native realm (including hashed passwords)
* role definitions
* role mappings
* application privileges
* API keys

Be advised that the index format is only compatible over a single major version.

The `elasticsearch.yml` and `elasticsearch.keystore` files in `$ES_PATH_CONF`,
as well as the global cluster metadata contain settings for all the cluster's
features, not only the {security-features}. It is easier to backup and restore
all these configurations as a whole. Cherry-picking only {security-features}
configurations complicates the procedure a bit, without many benefits because
, after all, every configuration requires a backup! All the other <<security-files, configuration
files>>  and the `.security` index contain exclusively {security-features}
configuration data.

[float]
==== Backup of File Configuration

The simplest way to backup file based configuration is a trivial copy of the
`$ES_PATH_CONF` directory.  Overall, this is the identical procedure as for a
complete backup.  Also, remember that in a typical {es} deployment all files
are identical on every node.

Because changes to the configuration files usually require a node restart for
the changes to take effect, this configuration method is reserved for settings
that change rarely (or are required for cluster formation, or require file
system privileges for modifications). In a typical deployment, once a desired
configuration is attained, subsequent changes will be infrequent.

Given this, it is recommended to backup after every modification. For the YAML
text files you also have the option of storing diffs against a baseline, or
checking them into `git`, therefore making the changes more easi to review by
the {es} administrator. The binary and encoded files, such as the private keys
or the secure store file are extra sensitive; they require restricted read
access.

[float]
==== Backup of API Based Configuration

The backup of API based configuration uses the <<modules-snapshots, regular
snapshot functionality>>. The snapshot API saves the settings, the type
mapping and the contents of any index, to a location of a cloud storage service
or on a shared network file system. The snapshot operation can also optionally
capture the persistent settings from the global cluster metadata.

 . To use the snapshot API to backup `.security` first create a repository.
Creating it requires the elevated `manage` cluster privilege, yet it's a
relatively infrequent operation. The elevated privileges are required to prevent
regular users from exfiltrating data to locations of their choosing.
 . Afterwards, all snapshots can be created inside that repository by a user with
the limited `snapshot_user` role. This role grants privileges to create
snapshots in any existing repositories. It also grants privileges to list and
read settings for all indices (but no data).
+
--
The following example creates a new user `snapshot_user` in the native realm:

[source,js]
--------------------------------------------------
POST /_security/user/snapshot_user
{
  "password" : "secret",
  "roles" : [ "snapshot_user" ]
}
--------------------------------------------------

And the next one exemplifies the create snapshot operation, inside the
`my_backup` repository:

[source,js]
--------------------------------------------------
PUT /_snapshot/my_backup/snapshot_1
{
  "indices": ".security",
  "include_global_state": true <1>
}
--------------------------------------------------

<1> A few {security-features} settings are stored in the global cluster metadata as
persistent settings. These are included in the snapshot by, but for facilitating
change reviews as well as restore convenience, we can pull them out to stand in
their own file.

[source,shell]
--------------------------------------------------
curl -X GET -u elastic "localhost:9200/_cluster/settings?pretty&flat_settings" | jq '.persistent | with_entries(select(.key|startswith("xpack.security")))'
--------------------------------------------------
// NOTCONSOLE

You can store the output of this together with the other configuration files.

NOTE: Transient settings are not considered for backup.
--

[float]
==== Backup Repository Access

Simply exposing the contents of the `.security` index, by having a third party
read the snapshot, does not equate to a compromised cluster security. This is
because an attacker still needs to brute force cryptographic hashes before it
can impersonate users or use API keys. But every document in the security index
is sensitive to changes, meaning that any modification has the potential to
compromise the integrity of all the data in the cluster. Therefore it is
recommended to:

* snapshot `.security` in a dedicated repository, to which read and write
access is strictly restricted and audited
* if there are indications that the snapshot has been read, proceed to changing
the passwords of the users in the native realm as well as revoking API keys
* never restore a snapshot for which there are indications that it has been
tampered with; there is currently no option for the restore process to detect
malicious tampering

The same recommendations are available for the storing of backups for
configuration files. However, special caution must be employed when storing
the `elasticsearch.keystore` and private key file backups, because currently
the secure store is *not* password protected and any read access can compromise
passwords of external systems and private keys.

[float]
==== Restore Security Configuration

The first part of restoring a Security configuration backup is restoring the
`.security` index. You can restore a snapshot of the `.security` index only if
it has been created in the same major release version. The last minor version of
every major release can convert and read both versions of the index.
Log in to one of the node hosts, navigate to {es} installation directory, and
follow these steps:

 . make sure the repository holding the `.security` snapshot is installed
 +
--
[source,shell]
--------------------------------------------------
GET /_snapshot/my_backup
--------------------------------------------------
--
 . add a new user with the `superuser` role to the file based realm
+
--
[source,shell]
--------------------------------------------------
 bin/elasticsearch-users useradd jacknich -p password -r superuser
--------------------------------------------------
--
 . using the previously create user, delete the existing `.security-6` or
`.security-7` index
+
--
[source,shell]
--------------------------------------------------
  curl -u jacknich-X DELETE "localhost:9200/.security-7"
--------------------------------------------------
  +
  NOTE: after this step authentication will not work so all API calls will fail
--
 * using the same user, restore the `.security` index from the snapshot
+
--
[source,shell]
--------------------------------------------------
 curl -u jacknich -X POST "localhost:9200/_snapshot/my_backup/snapshot_1/_restore" -H 'Content-Type: application/json' -d'
 {
    "indices": ".security-7",
    "include_global_state": true
 }
 '
--------------------------------------------------
 +
 NOTE: restoring the global state is optional, but it will help make sure the

The next part is really common to every other backup restore; copy the backed-up
configuration overwritting the contents of `$ES_PATH_CONF` and restart the node.

You can now cherry-pick and apply the persistent secure settings:
curl -X PUT _settings
