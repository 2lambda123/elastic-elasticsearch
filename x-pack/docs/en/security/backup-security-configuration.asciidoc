[role="xpack"]
[[backup-restore-security-configuration]]
=== Backing up and restoring security configuration

The {es} {security-features} are configured by files and by various API
endpoints. The security settings, which are prefixed with `xpack.security`, are
ordinarily included in regular file-system backups. However, the backup is not complete
until a special index, which holds most of the non-setting configuration, is
also included. Hence, the backup and restore of the security configuration
requires a combination of file-based backups, and {es} snapshots.

[float]
[[backup-security-files-location]]
==== Location of security configuration files

The configuration files reside on every node and are usually identical across
nodes. They are formatted as YAML text files. Also, on every node there is a
secure store file named `elasticsearch.keystore`, which is binary formatted.
This file is used only for sensitive settings such as service passwords. Some
setting values are paths pointing to other files, such as the keys and
certificates to configure TLS. Reassuringly, all these files are stored inside
the `$ES_PATH_CONF` directory, so when you back up the whole directory, as part
of a conventional backup, you capture all of the file-based configuration for
the {security-features}.

[float]
[[backup-security-configuration-inside-cluster]]
==== Security configuration inside the cluster

The API calls act on configuration information that is stored in the global
cluster metadata as well as inside a dedicated {es} index. This index is named
`.security-6` in the 6.x versions and `.security-7` in the 7.x releases. The
`.security` alias always points to the appropriate index. This index contains
the data which is not available in configuration files and *cannot* be
reliably backed up using standard filesystem tools. This data
describes:

* the definition of users in the native realm (including hashed passwords)
* role definitions
* role mappings
* application privileges
* API keys

NOTE: The index format is only compatible within a single major version,
and cannot be restored onto a version earlier that the version from which
it originated.
e.g. You can restore a security snapshot from 6.6.0 into  6.7.0 cluster, but
you cannot restore it to a cluster running {es} 6.5.0 or 7.0.0.

TIP: The `elasticsearch.yml` and `elasticsearch.keystore` files and the global
cluster metadata contain settings for all the {stack} features. The
`.security` index and all the other
<<security-files,security configuration files>> contain configuration data
exclusively for the {security-features}. It is easiest to backup and restore all
the configuration information as a whole, rather than trying to cherry-pick only
the security details.

[float]
[[backup-security-files]]
==== Backing up configuration files

The simplest way to backup configuration files is to copy the `$ES_PATH_CONF`
directory. Overall, this procedure is identical to a conventional backup.

NOTE: In a typical {es} deployment, all the configuration files are identical on
each node.

It is recommended that you back up the configuration files every time they are
modified. This is not as difficult as it sounds because, in a typical
deployment, after you achieve a desired configuration, you update these files
infrequently. Configuration files purposefully contain only the settings that
change rarely or are required for cluster formation or require file system
privileges.

TIP: For the YAML text files, you also have the option of storing diffs against a
baseline or checking them into `git`. This method makes it easier for the {es}
administrator to review the changes.

The binary and encoded files, such as the private keys and the secure store
file, are extra sensitive; they require restricted read access.

[float]
[[backup-security-snapshots]]
==== Snapshotting the security index and the global cluster metadata

To back up API-based configuration, which is stored inside the cluster, you use
the <<modules-snapshots,standard {es} snapshot functionality>>. The snapshot API
saves the settings, the type mapping, and the contents of nominated indices to a
location on a cloud storage service or on a shared network file system.
This API should be
used to snapshot the `.security` index. The snapshot operation can also
optionally capture the persistent settings from the global cluster metadata.

. Create a repository that you can use to backup the `.security` index.
Ideally this repository is dedicated only to this index.
+
--
[source,js]
-----------------------------------
PUT /_snapshot/my_backup
{
  "type": "fs",
  "settings": {
    "location": "my_backup_location"
  }
}
-----------------------------------
// CONSOLE
// TESTSETUP

You must have the elevated `manage` cluster privilege to create it, yet it's a
relatively infrequent operation. The elevated privileges are required to prevent
regular users from exfiltrating data to locations of their choosing.

Afterwards, users with the limited `snapshot_user` built-in role can create
snapshots inside that repository. This role grants privileges to create
snapshots in any existing repositories. It also grants privileges to list and
read settings for all indices (but not to read data).

For more information, see {stack-ov}/security-privileges.html[Security privileges]
and {stack-ov}/built-in-roles.html[Built-in roles].
--

. Create users that have the `snapshot_user` built-in role.
+
--
The following example creates a new user `snapshot_user` in the native realm:

[source,js]
--------------------------------------------------
POST /_security/user/snapshot_user
{
  "password" : "secret",
  "roles" : [ "snapshot_user" ]
}
--------------------------------------------------
// CONSOLE
--

. Create a snapshot.
+
--
The following example exemplifies the create snapshot operation, inside the
`my_backup` repository:

[source,js]
--------------------------------------------------
PUT /_snapshot/my_backup/snapshot_1
{
  "indices": ".security",
  "include_global_state": true <1>
}
--------------------------------------------------
// CONSOLE

<1> A few security settings are stored in the global cluster metadata as
persistent settings. These are included in the snapshot by default, but for
facilitating change reviews as well as restore convenience, we can pull them
out to stand in their own file.

[source,shell]
--------------------------------------------------
curl -X GET -u elastic "localhost:9200/_cluster/settings?pretty&flat_settings" | jq '.persistent | with_entries(select(.key|startswith("xpack.security")))'
--------------------------------------------------

You can store the output of this together with the other configuration files.

NOTE: Transient settings are not considered for backup.

--

[float]
[[backup-security-repos]]
===== Controlling access to the backup repository

If a third party reads the snapshot and exposes the contents of the `.security`
index, it does not mean you have compromised cluster security. An attacker
would still need to brute force cryptographic hashes before they can
impersonate users or use API keys. However, every document in the security
index is sensitive to changes. Modifications to that index have the potential
to compromise the integrity of all the data in the cluster. To prevent this
situation:

* Snapshot the `.security` index in a dedicated repository, where read and write
access is strictly restricted and audited.
* If there are indications that the snapshot has been read, change the passwords
of the users in the native realm and revoke API keys.
* If there are indications that the snapshot has been tampered with, do not
restore it. There is currently no option for the restore process to detect
malicious tampering.

The same recommendations apply to storing backups for configuration files.
However, use special caution when you store the `elasticsearch.keystore` and
private key file backups. Currently, the secure store is *not* password
protected and any read access can compromise the passwords of external systems
and private keys.

[float]
[[restore-security-configuration]]
==== Restoring security configuration

NOTE: You can restore a snapshot of the `.security` index only if it was created
in the same major release version. The last minor version of every major release
can convert and read both versions of the index.

To restore your security configuration from a backup, log in to one of the node
hosts, navigate to {es} installation directory, and follow these steps:

. Make sure the repository holding the `.security` snapshot is installed.
+
--
[source,js]
--------------------------------------------------
GET /_snapshot/my_backup
--------------------------------------------------
// CONSOLE
--

. Add a new user with the `superuser` built-in role to the file based realm.
+
--
For example, create a user named `jacknich`:
[source,shell]
--------------------------------------------------
bin/elasticsearch-users useradd jacknich -p password -r superuser
--------------------------------------------------
--

. Using the previously created user, delete the existing `.security-6` or
`.security-7` index.
+
--
[source,shell]
--------------------------------------------------
curl -u jacknich -X DELETE "localhost:9200/.security-7"
--------------------------------------------------

WARNING: After this step authentication will not work; all API calls will fail.

--

. Using the same user, restore the `.security` index from the snapshot.
+
--
[source,shell]
--------------------------------------------------
 curl -u jacknich -X POST "localhost:9200/_snapshot/my_backup/snapshot_1/_restore" -H 'Content-Type: application/json' -d'
 {
    "indices": ".security-7",
    "include_global_state": true
 }
 '
--------------------------------------------------

NOTE: The `include_global_state` is optional but it will help to make sure the
configuration in the index is compatible with the rest of the configuration in
the cluster, as was the case at the time of the snapshot. But be advised that
this will also restore non-security persistent cluster settings.
--

. Optionally, cherry-pick and <<cluster-update-settings,apply the persistent
settings>> that you have extracted with the `GET _cluster/settings` API, if you
need to review and override the settings that were included in the snapshot (by
the `include_global_state` flag).

Lastly, if your backup included configuration files copy these and overwrite
the contents of `$ES_PATH_CONF` and restart the node. This needs to be done on
*every node*. Depending on the extent of the differences between your current
cluster configuration and the restored configuration, you may not be able to
perform a rolling restart. 
If you are performing a full restore of your configuration directory, we recommend
a full cluster restart as the safest option.
Alternatively, you may wish to restore you configuration files to a separate
location on disk and use file comparison tools to review the differences between
your existing configuration and the restored configuration.
required. This is a conventional file configuration restore.
