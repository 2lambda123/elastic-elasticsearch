[role="xpack"]
[[audit-event-types]]
=== Audit event types

When you are <<enable-audit-logging,auditing security events>>, a single client request
might generate multiple audit events, across multiple cluster nodes. The common
`request.id` attribute can be used to correlate the associated events.


The following is an exhaustive list of the events that can be generated:

|======
| `anonymous_access_denied`         | | Logged when a request is denied due to a missing
                                        authentication token.                                                  | | example1
| `authentication_success`          | | Logged when a user successfully authenticates.                         | | example2
| `authentication_failed`           | | Logged when the authentication token cannot be
                                        matched to a known user.                                               | | example3
| `realm_authentication_failed`     | | Logged for every realm that fails to present a valid
                                        authentication token. `<realm>` represents the
                                        realm type.                                                            | | example4
| `access_denied`                   | | Logged when an authenticated user attempts to execute
                                        an action they do not have the necessary
                                        <<security-privileges,privilege>> to perform.                          | | example5
| `access_granted`                  | | Logged when an authenticated user attempts to execute
                                        an action they have the necessary privilege to perform.
                                        When the `system_access_granted` event is included, all system
                                        (internal) actions are also logged. The default setting does
                                        not log system actions to avoid cluttering the logs.                   | | example6
| `run_as_granted`                  | | Logged when an authenticated user attempts to
                                        <<run-as-privilege, run as>> another user that they have
                                        the necessary privileges to do.                                        | | example7
| `run_as_denied`                   | | Logged when an authenticated user attempts to
                                        <<run-as-privilege, run as>>
                                        another user action they do not have the necessary
                                        <<security-privileges,privilege>> to do so.                            | | example8
| `tampered_request`                | | Logged when the {security-features} detect that the request has
                                        been tampered with. Typically relates to `search/scroll`
                                        requests when the scroll ID is believed to have been
                                        tampered with.                                                         | | example9
| `connection_granted`              | | Logged when an incoming TCP connection passes the
                                        <<ip-filtering, IP Filter>> for a specific
                                        profile.                                                               | | example10
| `connection_denied`               | | Logged when an incoming TCP connection does not pass the
                                        <<ip-filtering, IP Filter>> for a specific
                                        profile.                                                               | | example11
| `put_user`                        | | Logged when the <<security-api-put-user, put user API>>
                                        has been invoked to create or
                                        update a native or built-in user. Note that user updates can
                                        also change the password.                                              | | example12
| `delete_user`                     | | Logged when the <<security-api-delete-user, delete user API>>
                                        has been invoked to delete a specific native user.                     | | example17
| `change_password`                 | | Logged when the <<security-api-change-password, change password API>>
                                        has been invoked to change the password of a native or built-in user.  | | example13
| `change_enable_user`              | | Logged when the <<security-api-enable-user, enable user API>>
                                        has been invoked to enable a native or a built-in user.                | | example13bis
| `change_disable_user`             | | Logged when the <<security-api-enable-user, enable user API>>
                                        has been invoked to disable a native or a built-in user.               | | example13bis2
| `put_role`                        | | Logged when the <<security-api-put-role, put role API>>
                                        has been invoked to create or update a role.                           | | example14
| `delete_role`                     | | Logged when the <<security-api-delete-role, delete role API>>
                                        has been invoked to delete a role.                                     | | example18
| `put_role_mapping`                | | Logged when the <<security-api-put-role-mapping, put role mapping API>>
                                        has been invoked to create or update a role mapping.                   | | example15
| `delete_role_mapping`             | | Logged when the
                                        <<security-api-delete-role-mapping, delete role mapping API>>
                                        has been invoked to delete a role mapping.                             | | example19
| `create_apikey`                   | | Logged when the <<security-api-create-api-key, create API key>>
                                        or the <<security-api-grant-api-key, grant API key>> APIs have
                                        been invoked to create a new API key.                                  | | example16
| `invalidate_apikeys`              | | Logged when the
                                        <<security-api-invalidate-api-key, invalidate API Key API>> has been
                                        invoked to invalidate one or more API Keys.                            | | example20
| `put_privileges`                  | | Logged when the <<security-api-put-privileges, put privileges API>>
                                        has been invoked to add or update one or more application privileges.  | | example15
| `delete_privileges`               | | Logged when the
                                        <<security-api-delete-privilege, delete application privileges API>>
                                        has been invoked to remove one or more application privileges.         | | example21
|======

[discrete]
[[audit-event-attributes]]
=== Audit event attributes

The audit events are formatted as JSON documents, and each event is printed on a separate
line in the audit log (the entries themselves do not contain the end-of-line delimiter).
The audit event JSON format is somewhat particular, as *most* fields follow a dotted
name syntax, are ordered, and contain non-null string values. This format creates a
structured columnar aspect, similar to a CSV, that can be more easily inspected visually
(compared to an equivalent nested JSON document).

There are however a few attributes that are exceptions to the above format. The `put`,
`delete`, `change`, `create` and `invalidate` attributes, which are only present for
events with the `event.type: "security_config_change"` attribute, contain the *nested JSON*
representation of the security change taking effect. The contents of security config change
are hence not splayed as top-level dot-named fields in the audit event document. That's because
the fields are specific to the particular kind of the security change and do not show up in
any other audit events, and so the benefits of a columnar format are much more limited; the
space-saving benefits of the nested structure is the favoured trade-off in this case.

The following list shows attributes that are common to all audit event types:

`@timestamp`      ::    The time, in ISO9601 format, when the event occurred.
`node.name`       ::    The name of the node. This can be changed
                        in the `elasticsearch.yml` config file.
`node.id`         ::    The node id. This is automatically generated and is
                        persistent across full cluster restarts.
`host.ip`         ::    The bound IP address of the node, with which the node
                        can be communicated with.
`host.name`       ::    The unresolved node's hostname.
`origin.address`  ::    The source IP address of the request associated with
                        this event. This could be the address of the remote client,
                        the address of another cluster node, or the local node's
                        bound address, if the request originated locally. Unless
                        the remote client connects directly to the cluster, the
                        _client  address_ will actually be the address of the first
                        OSI layer 3 proxy in front of the cluster.
`origin.type`     ::    The origin type of the request associated with this event:
                        `rest` (request originated from a REST API request),
                        `transport` (request was received on the transport channel),
                        or `local_node` (the local node issued the request).
`event.type`      ::    The internal processing layer that generated the event:
                        `rest`, `transport`, `ip_filter` or `security_config_change`.
                        This is different from `origin.type` because a request
                        originating from the REST API is translated to a number
                        of transport messages, generating audit events with
                        `origin.type: rest` and `event.type: transport`.
`event.action`    ::    The type of event that occurred: `anonymous_access_denied`,
                        `authentication_failed`, `authentication_success`,
                        `realm_authentication_failed`, `access_denied`, `access_granted`,
                        `connection_denied`, `connection_granted`, `tampered_request`,
                        `run_as_denied`, or `run_as_granted`. In addition, if
                        `event.type` equals `security_config_change`, the
                        `event.action` attribute takes one of the following values:
                        `put_user`, `change_password`, `put_role`, `put_role_mapping`,
                        `change_enable_user`, `change_disable_user`, `put_privileges`,
                        `create_apikey`, `delete_user`, `delete_role`,
                        `delete_role_mapping`, `invalidate_apikeys` or `delete_privileges`.
`opaque_id`       ::    The value of the `X-Opaque-Id` HTTP header (if present) of
                        the request associated with this event. This header can
                        be used freely by the client to mark API calls, as it has
                        no semantics in Elasticsearch.
`x_forwarded_for` ::    The verbatim value of the `X-Forwarded-For` HTTP request
                        header (if present) of the request associated with the
                        audit event. This header is commonly added by proxies
                        when they forward requests and the value is the address
                        of the proxied client. When a request crosses multiple
                        proxies the header is a comma delimited list with the
                        last value being the address of the second to last
                        proxy server (the address of the last proxy server is
                        designated by the `origin.address` field).


==== Audit event attributes of the REST event type

The events with `event.type` equal to `rest` have one of the following `event.action`
attribute values: `authentication_success`, `anonymous_access_denied`, `authentication_failed`,
`realm_authentication_failed`, `tampered_request` or `run_as_denied`.
These event types also have the following extra attributes (in addition to the
common ones):

`url.path`        ::    The path part of the URL (between the port and the query
                        string) of the REST request associated with this event.
                        This is URL encoded.
`url.query`       ::    The query part of the URL (after "?", if present) of the
                        REST request associated with this event. This is URL encoded.
`request.method`  ::    The HTTP method of the REST request associated with this
                        event. It is one of GET, POST, PUT, DELETE, OPTIONS,
                        HEAD, PATCH, TRACE and CONNECT.
`request.body`    ::    The full content of the REST request associated with this
                        event, if enabled. This contains the query body. The body
                        is escaped according to the JSON RFC 4627.

==== Audit event attributes of the transport event type

The events with `event.type` equal to `transport` have one of the following `event.action`
attribute values: `authentication_success`, `anonymous_access_denied`, `authentication_failed`,
`realm_authentication_failed`, `access_granted`, `access_denied`, `run_as_granted`,
`run_as_denied`, or `tampered_request`.
These event types also have the following extra attributes (in addition to the common
ones):

`action`              ::    The name of the transport action that was executed.
                            This is like the URL for a REST request.
`indices`             ::    The indices names array that the request associated
                            with this event pertains to (when applicable).
`request.name`        ::    The name of the request handler that was executed.

==== Audit event attributes of the ip_filter event type

The events with `event.type` equal to `ip_filter` have one of the following `event.action`
attribute values: `connection_granted` or `connection_denied`.
These event types also have the following extra attributes (in addition to the common
ones):

`transport_profile`   ::    The transport profile the request targeted.
`rule`                ::    The <<ip-filtering, IP filtering>> rule that denied
                            the request.

==== Extra audit event attributes for specific events

There are a few events that have some more attributes in addition to those
that have been previously described:

* `authentication_success`:
  `realm`              ::   The name of the realm that successfully authenticated the user.
                            If authenticated using an API key, this is the special value of
                            `_es_api_key`. This is a shorthand attribute
                            for the same information that is described by the `user.realm`,
                            `user.run_by.realm` and `authentication.type` attributes.
  `user.name`          ::   The name of the _effective_ user. This is usually the
                            same as the _authenticated_ user, but if using the
                            <<run-as-privilege, run as authorization functionality>>
                            this instead denotes the name of the  _impersonated_ user.
                            If authenticated using an API key, this is
                            the name of the API key owner.
  `user.realm`         ::   Name of the realm to which the _effective_ user 
                            belongs. If authenticated using an API key, this is
                            the name of the realm to which the API key owner belongs.
  `user.run_by.name`   ::   This attribute is present only if the request is
                            using the <<run-as-privilege, run as authorization functionality>>
                            and denotes the name of the  _authenticated_ user, 
                            which is also known as the _impersonator_.
  `user.run_by.realm`  ::   Name of the realm to which the _authenticated_
                            (_impersonator_) user belongs.
                            This attribute is provided only if the request
                            uses the <<run-as-privilege, run as authorization functionality>>.
  `authentication.type`::   Method used to authenticate the user.
                            Possible values are `REALM`, `API_KEY`, `TOKEN`, `ANONYMOUS` or `INTERNAL`.
  `api_key.id`         ::   API key ID returned by the <<security-api-create-api-key,create API key>> request.
                            This attribute is only provided for authentication using an API key.
  `api_key.name`       ::   API key name provided in the <<security-api-create-api-key,create API key>> request.
                            This attribute is only provided for authentication using an API key.

* `authentication_failed`:
  `user.name`          ::    The name of the user that failed authentication.
                             If the request authentication token is invalid or 
                             unparsable, this information might be missing.

* `realm_authentication_failed`:
  `user.name`          ::    The name of the user that failed authentication.
  `realm`              ::    The name of the realm that rejected this authentication.
                             **This event is generated for each consulted realm
                             in the chain.**

* `run_as_denied` and `run_as_granted`:
  `user.roles`         ::    The role names of the user as an array.
  `user.name`          ::    The name of the _authenticated_ user which is being
                             granted or denied the _impersonation_ action.
  `user.realm`         ::    The realm name that the _authenticated_ user belongs to.
  `user.run_as.name`   ::    The name of the user as which the _impersonation_
                             action is granted or denied.
  `user.run_as.realm`  ::    The realm name of that the _impersonated_ user belongs to.

* `access_granted` and `access_denied`:
  `user.roles`         ::    The role names of the user as an array. If authenticated
                             using an API key, this contains the
                             role names of the API key owner.
  `user.name`          ::    The name of the _effective_ user. This is usually the
                             same as the _authenticated_ user, but if using the
                             <<run-as-privilege, run as authorization functionality>>
                             this instead denotes the name of the  _impersonated_ user.
                             If authenticated using an API key, this is
                             the name of the API key owner.
  `user.realm`         ::   Name of the realm to which the _effective_ user 
                            belongs. If authenticated using an API key, this is
                            the name of the realm to which the API key owner belongs.
  `user.run_by.name`   ::    This attribute is present only if the request is
                             using the <<run-as-privilege, run as authorization functionality>>
                             and denoted the name of the _authenticated_ user,
                             which is also known as the _impersonator_.
  `user.run_by.realm`  ::    This attribute is present only if the request is
                             using the <<run-as-privilege, run as authorization functionality>>
                             and denotes the name of the realm that the _authenticated_
                             (_impersonator_) user belongs to.
  `authentication.type`::   Method used to authenticate the user.
                            Possible values are `REALM`, `API_KEY`, `TOKEN`, `ANONYMOUS` or `INTERNAL`.
  `api_key.id`         ::   API key ID returned by the <<security-api-create-api-key,create API key>> request.
                            This attribute is only provided for authentication using an API key.
  `api_key.name`       ::   API key name provided in the <<security-api-create-api-key,create API key>> request.
                            This attribute is only provided for authentication using an API key.

