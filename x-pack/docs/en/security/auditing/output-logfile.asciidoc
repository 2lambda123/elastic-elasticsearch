[role="xpack"]
[[audit-log-output]]
=== Logfile audit output

The `logfile` audit output is the only output for auditing. It writes data to
the `<clustername>_audit.json` file in the logs directory.

NOTE: If you overwrite the `log4j2.properties` and do not specify appenders for
any of the audit trails, audit events are forwarded to the root appender, which
by default points to the `elasticsearch.log` file.

[discrete]
[[audit-log-entry-format]]
=== Log entry format

The audit events are formatted as JSON documents, and each event is printed on a separate
line in the `<clustername>_audit.json` file (the entries themselves do not contain the
end-of-line delimiter).
The audit event JSON format is somewhat particular, as *most* fields follow a dotted
name syntax, are ordered, and contain non-null string values. This format creates a
structured columnar aspect, similar to a CSV, that can be more easily inspected visually
(compared to an equivalent nested JSON document).

There are however a few attributes that are exceptions to the above format. The `put`,
`delete`, `change`, `create` and `invalidate` attributes, which are only present for
events with the `event.type: "security_config_change"` attribute, contain the *nested JSON*
representation of the security change taking effect. The contents of the security config change
are hence not splayed as top-level dot-named fields in the audit event document. That's because
the fields are specific to the particular kind of the security change and do not show up in
any other audit events, and so the benefits of a columnar format are much more limited; the
space-saving benefits of the nested structure is the favoured trade-off in this case.

When the `request.body` attribute is present (see <<auditing-search-queries>>), it contains a
string value containing the full HTTP request body, ascaped as per the JSON RFC 4677.

There is a list of <<audit-event-types, audit event types>> specifying the
set of fields, as well as examples, for each entry type.

[discrete]
[[audit-log-settings]]
=== Logfile output settings

The events and some other information about what gets logged can be
controlled using settings in the `elasticsearch.yml` file. See
<<event-audit-settings>> and
<<node-audit-settings>>.

IMPORTANT: Be advised that *sensitive data may be audited in plain text* when including
the request body in audit events, even though all the security APIs, such as those that
change the userâ€™s password, have the credentials filtered out when audited.

You can also configure how the logfile is written in the `log4j2.properties`
file located in `ES_PATH_CONF` (or check out the relevant portion of
the https://github.com/elastic/elasticsearch/blob/{branch}/x-pack/plugin/core/src/main/config/log4j2.properties[log4j2.properties in the sources]).
By default, audit information is appended to the
`<clustername>_audit.json` file located in the standard Elasticsearch `logs` directory
(typically located at `$ES_HOME/logs`).
The file is also rotated and archived daily or upon reaching the 1GB file size limit.

[discrete]
[[audit-log-ignore-policy]]
=== Logfile audit events ignore policies

The comprehensive audit trail is necessary to ensure accountability. It offers tremendous
value during incident response and can even be required for demonstrating compliance.

The drawback of an audited system is represented by the inevitable performance penalty incurred.
In all truth, the audit trail spends _I/O ops_ that are not available anymore for the user's queries.
Sometimes the verbosity of the audit trail may become a problem that the event type restrictions,
<<audit-log-settings, defined by `include` and `exclude`>>, will not alleviate.

*Audit events ignore policies* are a finer way to tune the verbosity of the audit trail.
These policies define rules that match audit events which will be _ignored_ (read as: not printed).
Rules match on the values of attributes of audit events and complement the <<audit-log-settings, include/exclude>> method.
Imagine the corpus of audit events and the policies chopping off unwanted events.
With a sole exception, all audit events are subject to the ignore policies.
The exception are events of type `security_config_change`, which cannot be filtered out,
unless excluded altogether.

IMPORTANT: When utilizing audit events ignore policies you are acknowledging potential
accountability gaps that could render illegitimate actions undetectable.
Please take time to review these policies whenever your system architecture changes.

A policy is a named set of filter rules. Each filter rule applies to a single event attribute,
one of the `users`, `realms`, `roles` or `indices` attributes. The filter rule defines
a list of <<regexp-syntax,Lucene regexp>>, *any* of which has to match the value of the audit
event attribute for the rule to match.
A policy matches an event if *all* the rules comprising it match the event.
An audit event is ignored, therefore not printed, if it matches *any* policy. All other
non-matching events are printed as usual.

All policies are defined under the `xpack.security.audit.logfile.events.ignore_filters`
settings namespace. For example, the following policy named _example1_ matches
events from the _kibana_system_ or _admin_user_ principals **and** operating over indices of the
wildcard form _app-logs*_:

[source,yaml]
----------------------------
xpack.security.audit.logfile.events.ignore_filters:
  example1:
    users: ["kibana_system", "admin_user"]
    indices: ["app-logs*"]
----------------------------

An audit event generated by the _kibana_system_ user and operating over multiple indices
, some of which do not match the indices wildcard, will not match.
As expected, operations generated by all other users (even operating only on indices that
match the _indices_ filter) will not match this policy either.

Audit events of different types may have <<audit-event-attributes, different attributes>>.
If an event does not contain an attribute for which some policy defines filters, the
event will not match the policy.
For example, the following policy named _example2_, will never match `authentication_success` or
`authentication_failed` events, irrespective of the user's roles, because these
event schemas do not contain the `role` attribute:

[source,yaml]
----------------------------
xpack.security.audit.logfile.events.ignore_filters:
  example2:
    roles: ["admin", "ops_admin_*"]
----------------------------

Likewise, any events of users with multiple roles, some of which do not match the
regexps will not match this policy.

For completeness, although practical use cases should be sparse, a filter can match
a missing attribute of an event, using the empty string ("") or the empty list ([]).
For example, the following policy will match events that do not have the `indices`
attribute (`anonymous_access_denied`, `authentication_success` and other types) as well
as events over the _next_ index.

[source,yaml]
----------------------------
xpack.security.audit.logfile.events.ignore_filters:
  example3:
    indices: ["next", ""]
----------------------------
