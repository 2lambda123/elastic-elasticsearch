[role="xpack"]
[testenv="enterprise"]
[[configure-operator-privileges]]
=== Configure operator privileges

include::operator-privileges-designed-for-note.asciidoc[]

==== Enable operator privileges
In order to use the _operator privileges_ feature, it must be enabled explicitly on each node in the cluster.
This is done by configure the `elasticsearch.yml` file:

[source,yaml]
----------------------------
xpack.security.operator_privileges.enabled: true
----------------------------

If the node is already running before the above change is made, you need restart
it for the feature to take effect.

WARNING: The feature needs to be either enabled or disabled consistently across all nodes
in a cluster. Otherwise, you can get inconsistent behaviours depending on which node
first receives a request and which node executes it.

When operator privileges are enabled on a cluster, <<operator-only-functionality,specific functionalities>>
are restricted so that they may only be executed by users who have been explicitly designated as operator
users. That is, attempting to execute these functionalities as a regular user, even with the `superuser` role,
results in a security exception.

==== Designate operator users
Operator users are just normal {es} users with special rights to perform
operator-only functionalities. They are specified in an `operator_users.yml` file located
in `ES_PATH_CONF`. Similar to <<file-realm-configuration,other security config files>>,
the `operator_users.yml` file is local to a node and not globally to the cluster.
This means, in most cases, the same file should be distributed/copied to all nodes in
a cluster.

The `operator_users.yml` file defines a set of criteria that an authenticating
user must match to be considered as an operator.
The following snippet shows an example of such a file:

[source,yaml]
-----------------------------------
operator: <1>
  - usernames: ["system_agent_1","system_agent_2"] <2>
    realm_type: "file" <3>
    realm_name: "file1" <4>
    auth_type: "realm" <5>
-----------------------------------
<1> A fixed value of `operator` to signal the beginning of the definition.
<2> A list of usernames allowed for operator users. This field is mandatory.
<3> The type of the authenticating realm allowed for operator users. The default and only
    acceptable value is <<file-realm,`file`>>.
<4> The name of the authenticating realm allowed for operator users. For the `file` realm, the name is ignored.
<5> The authentication type allowed for operator users. The default and only acceptable value is `realm`.

You must specify at least the `usernames` field. Other fields will use their default values if not specified.
All fields must be matched for a user to be qualified as an operator. You can also specify multiple groups of
criteria. This is currently not very useful since this feature does not yet support other realms and
authentication types. Besides the configuration, there are also two implicit rules:

1. If the authenticating user <<run-as-privilege,runs as>> another user, neither of them will be considered
as an operator.
2. All <<internal-users>> are implicitly operator users.

IMPORTANT: Once a user is designated as an operator, it is still subject to regular RBAC <<authorization>> checks.
That is, in addition to specifying that the user is an operator you must also grant them the necessary
{es} roles to perform the functions that you wish to use.
Consequently, it is entirely possible that an operator user may encounter an "access denied" error,
and fail to perform certain actions due to RBAC check failures.
In short, an operator is *not* automatically a `superuser`.
