[role="xpack"]
[[configuring-tls-docker]]
=== Securely run {es} in a Docker container

Starting in {es} 8.0, security is enabled by default. With security enabled,
{stack} {security-features} require TLS encryption for the transport networking
layer, or your cluster will fail to start.

If you're starting a single-node {es} cluster in a Docker container, security
will be automatically enabled and configured for you. When defining multiple
nodes in a `docker-compose.yml` file, you'll need to explicitly enable and
configure security so that {es} doesn't try to generate a password for the
`elastic` user on every node. 

The following instructions illustrate how to enable security and configure TLS
for both the transport layer and HTTP layer using the {es} Docker image. The
example uses Docker Compose to manage the containers.

For further details, refer to
<<configuring-stack-security,Configuring security>> and
https://www.elastic.co/subscriptions[available subscriptions].

[discrete]
==== Install Docker Desktop or Docker Engine

Install the appropriate https://docs.docker.com/get-docker/[Docker application]
for your operating system.

[discrete]
==== Pull the {es} Docker image

Obtaining the {es} image for Docker is as simple as issuing a `docker pull`
command against the Elastic Docker registry:

ifeval::["{release-state}"=="unreleased"]

WARNING: Version {version} of {es} has not yet been released, so no
Docker image is currently available for this version.

endif::[]

ifeval::["{release-state}"!="unreleased"]

[source,sh,subs="attributes"]
----
docker pull {docker-repo}:{version}
----

endif::[]

[discrete]
==== Prepare the environment

Now that you have the {es} Docker image, create the following files inside of a
new directory. Copy and paste the contents of each example into the appropriate
file as described in the following sections:

* <<docker-instances-yml,`instances.yml`>>
* <<docker-env,`.env`>>
* <<getting-starter-tls-create-certs-composefile,`create-certs.yml`>>
* <<getting-starter-tls-create-docker-compose,`docker-compose.yml`>>

[[docker-instances-yml]]
[discrete]
===== `instances.yml`

When you run the example, {es} uses this file to create a two-node cluster.
The nodes are named `es01` and `es02`.

["source","yaml"]
----
instances:
  - name: es01
    dns:
      - es01 <1>
      - localhost
    ip:
      - 127.0.0.1

  - name: es02
    dns:
      - es02
      - localhost
    ip:
      - 127.0.0.1

  - name: es03
    dns:
      - es03
      - localhost
    ip:
      - 127.0.0.1      
----
<1> Allow use of embedded Docker DNS server names.

[[docker-env]]
[discrete]
===== `.env`

The `.env` file sets environment variables that are used when you run the
example. Ensure that you specify a strong password for the `elastic` user with
the `ELASTIC_PASSWORD` variable. You'll reference this variable later in your
`docker-compose.yml` file.

[source,yaml]
----
COMPOSE_PROJECT_NAME=es <1>
CERTS_DIR=/usr/share/elasticsearch/config/certificates <2>
ELASTIC_PASSWORD=<password> <3>
----
<1> Adds an `es_` prefix for all volumes and networks created by `docker-compose`.
<2> Specifies the path inside the Docker image where {es} expects the security
certificates.
<3> Sets the initial password for the `elastic` user.

[[getting-starter-tls-create-certs-composefile]]
[discrete]
===== `create-certs.yml`

The `create-certs.yml` file includes a script that generates node certificates
and a certificate authority (CA) certificate and key where {es} expects them.
These certificates and key are placed in a Docker volume named `es_certs`.

ifeval::["{release-state}"=="unreleased"]

WARNING: Version {version} of {es} has not yet been released, so a
`create-certs.yml` is not available for this version.

endif::[]

ifeval::["{release-state}"!="unreleased"]
["source","yaml",subs="attributes"]
----
version: '2.2'

services:
  create_certs:
    container_name: create_certs
    image: {docker-image}
    command: >
      bash -c '
        if [[ ! -f /certs/bundle.zip ]]; then
          bin/elasticsearch-certutil ca --silent --out /certs/ca.p12 --pass "";
          bin/elasticsearch-certutil cert --silent --pem --ca /certs/ca.p12 --in config/certificates/instances.yml -out /certs/bundle.zip;
          unzip /certs/bundle.zip -d /certs;
        fi;
        chown -R 1000:0 /certs
      '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes: ['certs:/certs', '.:/usr/share/elasticsearch/config/certificates']

volumes: {"certs"}
----
endif::[]

[[getting-starter-tls-create-docker-compose]]
[discrete]
===== `docker-compose.yml`

The `docker-compose.yml` file defines configuration settings for each of your
nodes 

NOTE: This sample `docker-compose.yml` file uses the `ES_JAVA_OPTS`
environment variable to manually set the heap size to 512MB. We do not recommend
using `ES_JAVA_OPTS` in production.
See {es-ref-dir}/docker.html#docker-set-heap-size[Manually set the heap size].

ifeval::["{release-state}"=="unreleased"]

WARNING: Version {version} of {es} has not yet been released, so a
`docker-compose.yml` is not available for this version.

endif::[]

ifeval::["{release-state}"!="unreleased"]
["source","yaml",subs="attributes"]
----
version: '2.2'

services:
  es01:
    container_name: es01
    image: {docker-image}
    environment:
      - node.name=es01
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD <1>
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/es01/es01.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate <2>
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es01/es01.key
    volumes: ['data01:/usr/share/elasticsearch/data', 'certs:$CERTS_DIR']
    ports:
      - 9200:9200
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  es02:
    container_name: es02
    image: {docker-image}
    environment:
      - node.name=es02
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.license.self_generated.type=trial
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/es02/es02.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es02/es02.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es02/es02.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es02/es02.key
    volumes: ['data02:/usr/share/elasticsearch/data', 'certs:$CERTS_DIR']

  es03:
    container_name: es03
    image: {docker-image}
    environment:
      - node.name=es02
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.license.self_generated.type=trial
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/es03/es03.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es03/es03.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es03/es03.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es03/es03.key
    volumes: ['data02:/usr/share/elasticsearch/data', 'certs:$CERTS_DIR']

  wait_until_ready:
    image: {docker-image}
    command: /usr/bin/true
    depends_on: {"es01": {"condition": "service_healthy"}}

volumes: {"data01", "data02", "data02", "certs"}
----
<1> Bootstrap `elastic` with the password defined in the `.env` file. See
<<bootstrap-elastic-passwords>>.
<2> Disable verification of authenticity for internode communication. Allows
creating self-signed certificates without having to pin specific internal IP addresses.
endif::[]

[discrete]
==== Run the example
. Generate the certificates. You only need to run this command one time:
+
--
["source","sh"]
----
docker-compose -f create-certs.yml run --rm create_certs
----
--

. Start your {es} nodes with TLS configured on the transport layer:
+
--
["source","sh"]
----
docker-compose up -d
----
--
. Access the {es} API over TLS using the bootstrapped password for the `elastic`
user that you specified in the `.env` file:
+
--
["source","sh",subs="attributes"]
----
docker run --rm -v es_certs:/certs --network=es_default {docker-image} curl --cacert /certs/ca/ca.crt -u elastic:<password> https://es01:9200
----
// NOTCONSOLE
--
+
`es_certs`:: The name of the volume that the script in `create-certs.yml`
creates to hold your certificates.

`<password>`:: The password for the `elastic` user, defined by the
`ELASTIC_PASSWORD` variable in the `.env` file.

. You can generate random passwords for all users with the
`elasticsearch-reset-passwords` tool:
+
--
WARNING: Windows users not running PowerShell will need to remove `\` and join lines in the snippet below.
["source","sh"]
----
docker exec es01 /bin/bash -c "bin/elasticsearch-reset-passwords \
auto --batch \
--url https://localhost:9200"
----
--

[discrete]
==== Stop the cluster
To stop the cluster, run `docker-compose down`. The data in the Docker volumes
is preserved and loaded when you restart the cluster with `docker-compose up`.

--
["source","sh"]
----
docker-compose down
----
--

To **delete the data volumes** when you stop the cluster, specify the `-v`
option:

["source","sh"]
----
docker-compose down -v
----
