[[update-node-certs]]
== Updating node security certificates
You need to update your TLS certificates if your current node certificates might
expire soon, you're adding new nodes to your secured cluster, or security
breach has broken the trust of your certificate chain. In these instances where
<<update-node-certs-same,your CA and key remains the same>>, you can sign new
certificates using the original Certificate Authority (CA) that you used to sign your existing certificates.

If you have to trust a new CA, you need to
<<update-node-certs-different,generate a new CA certificate and key>> for each
node that is signed by the new CA certificate and instruct your nodes to trust
this certificate chain.

Depending on which certificates are expiring, you might need to update the
certificates for the transport layer, the HTTP layer, or both. 

Regardless of the scenario, {es} monitors the SSL resources for updates
on a five-second interval, which is the default. You can just copy the new
certificate and key files (or keystore) into the {es} configuration directory
and your nodes will detect the changes and reload the keys and certificates. 

Because {es} doesn't reload the `elasticsearch.yml` configuration,
you must use *the same file names* so that {es} refreshes the security
certificates and keys.

If you need to update the `elasticsearch.yml` configuration or change
passwords for keys or keystores that are stored in the
<<secure-settings,secure settings>>, then you must complete a
<<use-rolling-restarts,rolling restart>>. {es} will not reload changes for
passwords stored in the secure settings. 

[[use-rolling-restarts]]
.Rolling restarts are preferred
****
While it's possible to do an in-place update for security certificates, using
a <<restart-cluster-rolling,rolling restart>> on your cluster is safer. An in-place update avoids some
complications of a rolling restart, but incurs the following risks:

* If you use PEM files, your certificate and key are in separate files. You
must update both files _simultaneously_ or the node might experience a temporary
period where it cannot establish new connections.
* Updating the certificate and key does not automatically force existing
connections to refresh. This means that even if you make a mistake, a node can
seem like it's functioning but only because it still has existing connections.
It's possible that a node will be unable to connect with other nodes, rendering
it unable to recover from a network outage or node restart.
****

[[update-node-certs-same]]
=== Update security certificates with the same CA
++++
<titleabbrev>With the same CA</titleabbrev>
++++

This procedure assumes that the you have access to the CA certificate and key
that was originally generated (or otherwise held by your organization) and used
to sign the certificate that is currently in use. It also assumes that the
clients connecting to {es} on the HTTP layer are configured to trust the CA
certificate.

If you have access to the CA used to sign your existing certificates, you only
need to replace the certificates and keys for each node in your cluster. If you
replace your existing certificates and keys on each node use the same filenames,
{es} reloads the files starts using the new certificates and keys.

You don't have to restart each node, but doing so forces new TLS connections and is <<use-rolling-restarts,a recommended practice>> when updating certificates.
Therefore, the following steps include a node restart after updating each
certificate.

The following steps provide instructions for generating new node certificates
and keys for both the transport layer and the HTTP layer. You might only need
to replace one of these layer's certificates depending on which of your
certificates are expiring.

[[cert-password-updates]] 
IMPORTANT: If your keystore is password protected, the password
is stored in the {es} secure settings, _and_ the password needs to change, then
you must perform a <<restart-cluster-rolling,rolling restart>> on your cluster.
You must also use a different file name for the keystore so that {es} doesn't
reload the file before the node is restarted.

TIP: If your CA has changed, complete the steps in 
<<update-node-certs-different,update security certificates with a different CA>>.

[[node-certs-same-transport]]
==== Generate a new certificate for the transport layer
The following examples use PKCS#12 files, but the same steps apply to JKS
keystores.

Rather than run the `elasticsearch-certutil` tool once for each node, create an
`instances.yml` file that contains information about each of your nodes. You can
then use the `elasticsearch-certutil` tool to generate certificates for all of
your nodes with a single command.

. Open the `ES_PATH_CONF/elasticsearch.yml` file and check the names of the
keystores that are currently in use. You'll use the same names for your new
certificate.
+
In this example, the keystore and truststore are pointing to different files.
Your configuration might use the same file that contains the certificate and CA.
In this case, include the path to that file for both the keystore and truststore.
+
[source,yaml]
----
xpack.security.transport.ssl.keystore.path: config/elastic-certificates.p12
xpack.security.transport.ssl.keystore.type: PKCS12
xpack.security.transport.ssl.truststore.path: config/elastic-stack-ca.p12
xpack.security.transport.ssl.truststore.type: PKCS12
----

. On any node in your cluster, create an `instances.yml` file that contains
information about each of your nodes. Include all IP addresses and DNS names
that you use to identify each node. 
+
[source,yaml]
----
instances:
  - name: "node1"
    ip:
      - "192.168.1.101"
    dns:
      - "node1"
      - "node1.mydomain.com"
  - name: "node2"
    ip:
      - "192.168.1.102"
    dns:
      - "node2"
      - "node2.mydomain.com"
  - name: "node3"
    ip:
      - "192.168.1.103"
    dns:
      - "node3"
      - "node3.mydomain.com"
  - name: "node4"
    ip:
      - "192.168.1.104"
    dns:
      - "node4"
      - "node4.mydomain.com"
----

. Using your existing CA, generate a keystore for each of your nodes. You must
use the CA that was used to sign the certificate currently in use.
+
[source,shell]
----
./bin/elasticsearch-certutil cert --in instances.yml --ca elastic-stack-ca.p12
----
+
[%collapsible%open]
.Command parameters
====
   `-in`:: Specifies the name of the input YAML file (`instances.yml`)
   containing information about each of your nodes.

   `--ca <ca_file>`:: Name of the CA keystore used to sign your certificates.
====

   a. Enter a name for the output file or accept the default of
   `certificate-bundle.zip`.

   b. When prompted, enter a password for each node certificate. It's good
   practice to use a different password for each node certificate and store the
   files in a secure location.

   c. Decompress the `certificate-bundle.zip` file. The output contains a
   directory for each of your nodes with a `<node-name>.p12` file.

   d. Rename the `<node-name>.p12` file to match the existing file name
   specified by the `xpack.security.transport.ssl.keystore.path` variable in 
   the `elasticsearch.yml` file on each node.

. If you entered a password when creating the node keystore that is different 
from the current keystore password, run the following command to store the
password in the {es} keystore:
+
--
[source,shell]
----
./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password
----
--

. [[start-rolling-restart,step 5]]On the current node in your cluster where you're updating the keystore,
start a <<restart-cluster-rolling,rolling restart>>.
+
Stop at the step indicating *Perform any needed changes*, and then proceed to
the next step in this procedure.

. [[replace-keystores]]Replace your existing keystore with the new keystore, ensuring that the
file names match. For example, `node1.p12`.
+
If your 
<<cert-password-updates,keystore password is changing>>, then save the
keystore with a new filename so that {es} doesn't attempt to reload the file
before you update the password.

. If you needed to save the new keystore with a new filename, update the
`ES_PATH_CONF/elasticsearch.yml` file to use the filename of the new keystore.
For example:
+
[source,yaml]
----
xpack.security.transport.ssl.keystore.path: config/node1.p12
xpack.security.transport.ssl.keystore.type: PKCS12
xpack.security.transport.ssl.truststore.path: config/elastic-stack-ca.p12
xpack.security.transport.ssl.truststore.type: PKCS12
----

. Start the node where you updated the keystore, and then complete the remaining
steps for a <<restart-cluster-rolling,rolling restart>>.

. [[verify-keystore,step 9]](Optional) Use the <<security-api-ssl,SSL certificate API>> to verify that
{es} loaded the new keystore.

. One node at a time, complete <<start-rolling-restart>> through
<<verify-keystore>> until you've updated all keystores in your cluster.

[discrete]
[[transport-layer-sameca-whatsnext]]
==== What's next?
Well done! You've updated the keystore for the transport layer. You can also
<<node-certs-same-http,update the keystore for the HTTP layer>> if
necessary. If you're not updating the keystore for the HTTP layer, then you're
all set. 

[[node-certs-same-http]]
==== Generate a new certificate for the HTTP layer
Other components such as {kib} or any of the Elastic language clients verify
this certificate when they connect to {es}.

NOTE: If your organization has its own CA, you'll need to 
<<certutil-csr,generate Certificate Signing Requests (CSRs)>>. CSRs contain
information that your CA uses to generate and sign a security certificate
instead of using self-signed certificates that the `elasticsearch-certutil` tool
generates.

. On any node in your cluster where {es} is installed, run the {es} HTTP
certificate tool.
+
[source,shell]
----
./bin/elasticsearch-certutil http
----
+
This command generates a `.zip` file that contains certificates and keys
to use with {es} and {kib}. Each folder contains a `README.txt`
explaining how to use these files.

   a. When asked if you want to generate a CSR, enter `n`.

   b. When asked if you want to use an existing CA, enter `y`.

   c. Enter the absolute path to your CA, such as the path to the
    `elastic-stack-ca.p12` file.

   d. Enter the password for your CA.

   e. Enter an expiration value for your certificate. You can enter the
   validity period in years, months, or days. For example, enter `1y` for one
   year.

   f. When asked if you want to generate one certificate per node, enter `y`.
+
Each certificate will have its own private key, and will be issued for a
specific hostname or IP address.

   g. When prompted, enter the name of the first node in your cluster. Use the
   same node name as the value for the `node.name` parameter in the
   `elasticsearch.yml` file.

   h. Enter all hostnames used to connect to your first node. These hostnames
   will be added as DNS names in the Subject Alternative Name (SAN) field in your certificate.
+
List every hostname and variant used to connect to your cluster over HTTPS.

   i. Enter the IP addresses that clients can use to connect to your node.

   j. Repeat these steps for each additional node in your cluster.

. After generating a certificate for each of your nodes, enter a password for
   your private key when prompted.

. Unzip the generated `elasticsearch-ssl-http.zip` file. This compressed file
   contains one directory for both {es} and {kib}. Within the `/elasticsearch`
   directory is a directory for each node that you specified with it's own
   `http.p12` file. For example:
+
--
[source,txt]
----
/node1
|_ README.txt
|_ http.p12
|_ sample-elasticsearch.yml
----

[source,txt]
----
/node2
|_ README.txt
|_ http.p12
|_ sample-elasticsearch.yml
----

[source,txt]
----
/node3
|_ README.txt
|_ http.p12
|_ sample-elasticsearch.yml
----
--

. If necessary, rename the `http.p12` file to match the name of your existing
certificate for HTTP client communications. This keystore contains both a
certificate and key.

. [[start-rolling-restart-http,step 5]]On the current node in your cluster where you're updating the keystore,
start a <<restart-cluster-rolling,rolling restart>>.
+
Stop at the step indicating *Perform any needed changes*, and then proceed to
the next step in this procedure.

. Replace your existing keystore with the new keystore, ensuring that the
file names match. For example, `node1-http.p12`.
+
If your 
<<cert-password-updates,keystore password is changing>>, then save the
keystore with a new filename so that {es} doesn't attempt to reload the file
before you update the password.

. If you needed to save the new keystore with a new filename, update the
`ES_PATH_CONF/elasticsearch.yml` file to use the filename of the new keystore.
For example:
+
[source,yaml]
----
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.keystore.path: node1-http.p12
----

. If your keystore password is changing, add the password for your private key
to the secure settings in {es}.
+
[source,shell]
----
./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
----

. Start the node where you updated the keystore, and then complete the remaining
steps for a <<restart-cluster-rolling,rolling restart>>.

. [[verify-keystore-http,step 10]](Optional) Use the <<security-api-ssl,SSL certificate API>> to verify that
{es} loaded the new keystore.

. One node at a time, complete <<start-rolling-restart-http>> through
<<verify-keystore-http>> until you've updated all keystores in your cluster.

[[update-node-certs-different]]
=== Update security certificates with a different CA
++++
<titleabbrev>With a different CA</titleabbrev>
++++
If you have to trust a new CA, generate a new CA certificate and key for each
node that is signed by the new CA certificate and instruct your nodes to trust
this certificate chain.

[[node-certs-different-transport]]
==== Generate a new certificate for the transport layer
Create a new CA certificate and add it to your existing CA truststore. After
{es} reloads the file, you can remove the old CA certificate from your
truststore.

NOTE: The following examples use PKCS#12 files, but the same steps apply to JKS
keystores.

. Open the `ES_PATH_CONF/elasticsearch.yml` file and check the names of the
security certificates that are currently in use. You'll use the same names
for your new certificates.
+
In this example, the keystore and truststore are using different files.
Your configuration might use the same file for both the keystore and the 
truststore. Elastic recommends using separate files. 
+
[source,yaml]
----
xpack.security.transport.ssl.keystore.path: config/elastic-certificates.p12
xpack.security.transport.ssl.keystore.type: PKCS12
xpack.security.transport.ssl.truststore.path: config/elastic-stack-ca.p12
xpack.security.transport.ssl.truststore.type: PKCS12
----

. On *any* node in your cluster, generate a new CA certificate. You only need
to complete this step one time.
+
NOTE: If your organization has its own CA, you'll need to 
<<certutil-csr,generate Certificate Signing Requests (CSRs)>>. CSRs contain
information that your CA uses to generate and sign a security certificate
instead of using self-signed certificates that the `elasticsearch-certutil` tool
generates.
+
[source,shell]
----
./bin/elasticsearch-certutil ca --pem
----
+
[%collapsible%open]
.Command parameters
====
   `--pem`:: Generates a directory containing a CA certificate and key in PEM
   format instead of PKCS#12. 
====

    a. Enter a name for the compressed output file that will contain your
    certificate and key, or accept the default name of `elastic-stack-ca.zip`.

    b. Unzip the output file. The resulting directory contains a CA certificate
    (`ca.crt`) and a private key (`ca.key`).
+
--
IMPORTANT: Keep these file in a secure location as they contain the private key
for your CA. 
--

. On *every* node in your cluster, import the new `ca.crt` certificate into your
existing CA truststore. This step ensures that your cluster trusts the new CA
certificate. This example uses the Java `keytool` utility to import the
certificate into the `elastic-stack-ca.p12` CA truststore.
+
[source,shell]
----
keytool -importcert -trustcacerts -noprompt -keystore elastic-stack-ca.p12 \
-storepass <password>  -alias new-ca -file ca.crt
----
+
[%collapsible%open]
.Command parameters
====
   `-keystore`:: Name of the truststore that you are importing the new CA
   certificate into. 

   `-storepass`:: Password for the CA truststore. 

   `-alias`:: Name that you want to assign to the new CA certificate entry in the keystore.

   `-file`:: Name of the new CA certificate to import.
====

. Check that the new CA certificate was added to your truststore. The output
should contain both the existing CA certificate and your new certificate. Each
CA certificate is identified by the `friendlyName` attribute in the output.
+
When prompted, enter the password for the CA truststore.
+
[source,shell]
----
keytool -keystore config/elastic-stack-ca.p12 -list
----

[discrete]
[[node-certs-different-nodes]]
==== Generate a new certificate for each node in your cluster
Now that your CA truststore is updated, use your new CA certificate to sign
a certificate for each node in your cluster. Rather than run the
`elasticsearch-certutil` tool once for each node, create an `instances.yml` file
that contains information about each of your nodes. You can then use the
`elasticsearch-certutil` tool to generate certificates for all of your nodes
with a single command.

. On any node in your cluster, create an `instances.yml` file that contains
information about each of your nodes. Include all IP addresses and DNS names
that you use to identify each node. 
+
[source,yaml]
----
instances:
  - name: "node1"
    ip:
      - "192.168.1.101"
    dns:
      - "node1"
      - "node1.mydomain.com"
  - name: "node2"
    ip:
      - "192.168.1.102"
    dns:
      - "node2"
      - "node2.mydomain.com"
  - name: "node3"
    ip:
      - "192.168.1.103"
    dns:
      - "node3"
      - "node3.mydomain.com"
  - name: "node4"
    ip:
      - "192.168.1.104"
    dns:
      - "node4"
      - "node4.mydomain.com"
----

. Using the new CA certificate and key, create a new certificate for each node
in your cluster. Include the `instances.yml` file that you created previously.
+
[source,shell]
----
./bin/elasticsearch-certutil cert --in instances.yml --ca-cert ca/ca.crt \
--ca-key ca/ca.key
----
+
[%collapsible%open]
.Command parameters
====
   `-in`:: Specifies the name of the input YAML file (`instances.yml`)
   containing information about each of your nodes.

   `--ca-cert`:: Specifies the path to your new CA certificate (`ca.crt`) in PEM
   format. You must also specify the `--ca-key` parameter.

   `--ca-key`:: Specifies the path to the private key (`ca.key`) for your CA
   certificate. You must also specify the `--ca-cert` parameter.
====

   a. Enter a name for the output file or accept the default of
   `certificate-bundle.zip`.

   b. When prompted, enter a password for each node certificate. It's good
   practice to use a different password for each node certificate and store the
   files in a secure location.

   c. Decompress the `certificate-bundle.zip` file. The output contains a
   directory for each of your nodes with a `<node-name>.p12` file.

   d. Rename the `<node-name>.p12` file to match the existing file name
   specified by the `xpack.security.transport.ssl.keystore.path` variable in 
   the `elasticsearch.yml` file on each node.

. [[start-rolling-restart-newca,step 3]]On the current node in your cluster where
you're updating the keystore, start a
<<restart-cluster-rolling,rolling restart>>.
+
Stop at the step indicating *Perform any needed changes*, and then proceed to
the next step in this procedure.

. Replace your existing keystore with the new keystore, ensuring that the
file names match. For example, `<node-name>.p12`.
+
If your 
<<cert-password-updates,keystore password is changing>>, then save the
keystore with a new filename so that {es} doesn't attempt to reload the file
before you update the password.

. If you needed to save the new keystore with a new filename, update the
`ES_PATH_CONF/elasticsearch.yml` file to use the filename of the new keystore.
For example:
+
[source,yaml]
----
xpack.security.transport.ssl.keystore.path: config/<node-name>.p12
xpack.security.transport.ssl.keystore.type: PKCS12
xpack.security.transport.ssl.truststore.path: config/elastic-stack-ca.p12
xpack.security.transport.ssl.truststore.type: PKCS12
----

. Start the node where you updated the keystore, and then complete the remaining
steps for a <<restart-cluster-rolling,rolling restart>>.

. [[verify-keystore-newca,step 7]](Optional) Use the <<security-api-ssl,SSL certificate API>> to verify that
{es} loaded the new keystore.

. One node at a time, complete <<start-rolling-restart-newca>> through
<<verify-keystore-newca>> until you've updated all keystores in your cluster.

. (Optional) After rotating keystores on each node in your cluster, remove the
old CA certificate from your truststore.
+
[source,shell]
----
keytool -delete -noprompt -alias <old-ca>  -keystore config/elastic-stack-ca.p12 \
-storepass <password>
----
+
[%collapsible%open]
.Command parameters
====
   `-alias`:: Name of the old CA certificate that you want to remove from your
   truststore.
====

[discrete]
[[transport-layer-newca-whatsnext]]
==== What's next?
Well done! You've updated the keystore for the transport layer. You can also
<<node-certs-different-http,update the keystore for the HTTP layer>> if
necessary. If you're not updating the keystore for the HTTP layer, then you're
all set. 

[[node-certs-different-http]]
==== Generate a new certificate for the HTTP layer
You can generate certificates for the HTTP layer using your new CA certificate
and private key. Other components such as {kib} or any of the Elastic language
clients verify this certificate when they connect to {es}.

NOTE: If your organization has its own CA, you'll need to 
<<certutil-csr,generate Certificate Signing Requests (CSRs)>>. CSRs contain
information that your CA uses to generate and sign a security certificate
instead of using self-signed certificates that the `elasticsearch-certutil` tool
generates.

. On any node in your cluster where {es} is installed, run the {es} HTTP
certificate tool.
+
[source,shell]
----
./bin/elasticsearch-certutil http
----
+
This command generates a `.zip` file that contains certificates and keys
to use with {es} and {kib}. Each folder contains a `README.txt`
explaining how to use these files.

   a. When asked if you want to generate a CSR, enter `n`.

   b. When asked if you want to use an existing CA, enter `y`.

   c. Enter the absolute path to your *new* CA certificate, such as the path to
   the `ca.crt` file.

   d. Enter the absolute path to your new CA certificate private key, such as
   the path to the `ca.key` file.

   e. Enter an expiration value for your certificate. You can enter the
   validity period in years, months, or days. For example, enter `1y` for one
   year.

   f. When asked if you want to generate one certificate per node, enter `y`.
+
Each certificate will have its own private key, and will be issued for a
specific hostname or IP address.

   g. When prompted, enter the name of the first node in your cluster. Use the
   same node name as the value for the `node.name` parameter in the
   `elasticsearch.yml` file.

   h. Enter all hostnames used to connect to your first node. These hostnames
   will be added as DNS names in the Subject Alternative Name (SAN) field in your certificate.
+
List every hostname and variant used to connect to your cluster over HTTPS.

   i. Enter the IP addresses that clients can use to connect to your node.

   j. Repeat these steps for each additional node in your cluster.

. After generating a certificate for each of your nodes, enter a password for
   your keystore when prompted.

. Unzip the generated `elasticsearch-ssl-http.zip` file. This compressed file
   contains one directory for both {es} and {kib}. Within the `/elasticsearch`
   directory is a directory for each node that you specified with it's own
   `http.p12` file. For example:
+
--
[source,txt]
----
/node1
|_ README.txt
|_ http.p12
|_ sample-elasticsearch.yml
----

[source,txt]
----
/node2
|_ README.txt
|_ http.p12
|_ sample-elasticsearch.yml
----

[source,txt]
----
/node3
|_ README.txt
|_ http.p12
|_ sample-elasticsearch.yml
----
--

. If necessary, rename each `http.p12` file to match the name of your existing
certificate for HTTP client communications. This keystore contains both a
certificate and key.

. [[start-rolling-restart-http-newca,step 5]]On the current node in your cluster where you're updating the keystore,
start a <<restart-cluster-rolling,rolling restart>>.
+
Stop at the step indicating *Perform any needed changes*, and then proceed to
the next step in this procedure.

. Replace your existing keystore with the new keystore, ensuring that the
file names match. For example, `node1-http.p12`.
+
If your 
<<cert-password-updates,keystore password is changing>>, then save the
keystore with a new filename so that {es} doesn't attempt to reload the file
before you update the password.

. If you needed to save the new keystore with a new filename, update the
`ES_PATH_CONF/elasticsearch.yml` file to use the filename of the new keystore.
For example:
+
[source,yaml]
----
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.keystore.path: node1-http.p12
----

. If your keystore password is changing, add the password for your private key
to the secure settings in {es}.
+
[source,shell]
----
./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
----

. Start the node where you updated the keystore, and then complete the remaining
steps for a <<restart-cluster-rolling,rolling restart>>.

. [[verify-keystore-http-newca,step 10]](Optional) Use the <<security-api-ssl,SSL certificate API>> to verify that
{es} loaded the new keystore.

. One node at a time, complete <<start-rolling-restart-http-newca>> through
<<verify-keystore-http-newca>> until you've updated all keystores in your cluster.

. (Optional) After rotating keystores on each node in your cluster, remove the
old CA certificate from your truststore. 
+
[source,shell]
----
keytool -delete -noprompt -alias <old-ca>  -keystore config/http.p12 \
-storepass <password>
----
+
[%collapsible%open]
.Command parameters
====
   `-alias`:: Name of the old CA certificate that you want to remove from your
   truststore.
====
