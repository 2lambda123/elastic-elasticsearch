[[update-node-certs]]
== Updating node security certificates
When updating your node security certificates, there are two main scenarios that
you'll encounter:

* <<update-node-certs-same,Your certificate authority (CA) or key remains the same>>
* <<update-node-certs-different,Your CA certificate or key changes>>

Regardless of the scenario, {es} monitors the SSL resources for updates
on a five-second interval. You can just copy the new certificate and key files
(or keystore) into the appropriate location and your nodes will detect the
changes. 

Because {es} doesn't reload the `elasticsearch.yml` configuration,
you must use *the same file names* so that {es} refreshes the security
certificates and keys. 

IMPORTANT: If you need to change a password for a key, keystore, or truststore
that is stored in the <<secure-settings,secure settings>>, then you must restart
the cluster. {es} will not reload changes for passwords stored in the secure
settings. We recommend rolling restarts when restarting the cluster.

.Rolling restarts are preferred
****
While it's possible to do an in-place update for security certificates, using
a <<restart-cluster-rolling,rolling restart>> on your cluster is safer. An in-place update avoids some
complications of a rolling restart, but incurs the following risks:

* If you use PEM files, your certificate and key are in separate files. You
must update both files _simultaneously_ or the node might experience a temporary
period where it cannot establish new connections.
* Updating the certificate and key does not automatically force existing
connections to refresh. This means that even if you make a mistake, a node can
seem like it's functioning but only because it still has existing connections.
It's possible that a node will be unable to connect with other nodes, rendering
it unable to recover from a network outage or node restart.
****

[[update-node-certs-same]]
=== Update security certificates with the same CA
++++
<titleabbrev>With the same CA</titleabbrev>
++++

If your CA hasn't changed, you can just generate a new certificate, save it with
the same name as your existing certificate, and replace the existing file.
You'll need to generate new certificates and keys for both the transport layer
and the HTTP layer.

This procedure assumes that the you have access to the CA certificate and key
that was originally generated (or otherwise held by your organization) and used
to sign the certificate that is currently in use. It also assumes that the
clients connecting to {es} on the HTTP layer are configured to trust the CA
certificate.

TIP: If your CA has changed, complete the steps in 
<<update-node-certs-different,update security certificates with different names>>.

[discrete]
[[node-certs-same-transport]]
==== Generate a new certificate for the transport layer
Create a new PKCS#12 file that contains the a certificate and key and replace
the existing PKCS#12 file (such as `elastic-certificates.p12`) with the new
certificate. 

NOTE: The following examples use PKCS#12 files, but the same steps apply to JKS keystores.

. Open the `ES_PATH_CONF/elasticsearch.yml` file and check the names of the
security certificates that are currently in use. You'll use the same names
for your new certificate.
+
In this example, the keystore and truststore are pointing to different files.
Your configuration might use the same file that contains the certificate and CA.
+
[source,yaml]
----
xpack.security.transport.ssl.keystore.path: config/elastic-certificates.p12
xpack.security.transport.ssl.keystore.type: PKCS12
xpack.security.transport.ssl.keystore.password: password
xpack.security.transport.ssl.truststore.path: config/elastic-ca.p12
xpack.security.transport.ssl.truststore.type: PKCS12
xpack.security.transport.ssl.truststore.password: password
----

. On any node in your cluster, generate a certificate and private key for your
node. You must include the CA that was used to sign the certificate currently
in use.
+
[source,shell]
----
./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12
----
+
   `--ca <ca_file>`:: Name of the CA file used to sign your certificates. The
   default file name from the `elasticsearch-certutil` tool is `elastic-stack-ca.p12`.

    a. Enter the password for your CA when prompted.

    b. Enter the name for your certificate, which must match the name of the
    certificate currently in use.

    c. (Optional) Enter a password for your certificate. 

. If you entered a password when creating the node certificate, run the following commands to store the password in the {es} keystore:
+
--
[source,shell]
----
./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password
----

[source,shell]
----
./bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password
----
--

. [[cert-password-updates]] If your certificate is password protected, the password is stored in the {es} keystore, _and_ the password needs to change, then you must perform a <<restart-cluster-rolling,rolling restart>> on your cluster. Complete the steps until the step that indicates *Perform any needed changes*, and then continue to the next step to replace your existing certificates.

. Replace your existing certificate with the new certificate, ensuring that the
file names match.

. Repeat the previous step on each node in your cluster to update the existing certificate, completing a rolling restart beforehand if your certificate matches the password stipulations outlined in <<cert-password-updates,this step>>.

[discrete]
[[node-certs-same-http]]
==== Generate a new certificate for the HTTP layer
This certificate is used to verify other components when they connect to {es}.

. Stop {es} and {kib} if they are running.

. From the directory where you installed {es}, run the {es} HTTP certificate 
tool.
+
[source,shell]
----
./bin/elasticsearch-certutil http
----
+
This command generates a `.zip` file that contains certificates and keys
to use with {es} and {kib}. Each folder contains a `README.txt`
explaining how to use these files.

   a. When asked if you want to generate a CSR, enter `n`.

   b. When asked if you want to use an existing CA, enter `y`.

   c. Enter the absolute path to your CA, such as the path to the
    `elastic-stack-ca.p12` file.

   d. Enter the password for your CA.

   e. Enter an expiration value for your certificate. You can enter the
   validity period in years, months, or days. For example, enter `90D` for 90
   days.

   f. When asked if you want to generate one certificate per node, enter `y`.
+
Each certificate will have its own private key, and will be issued for a
specific hostname or IP address.

   g. When prompted, enter the name of the first node in your cluster. Use the same node name that you used when <<generate-certificates,generating node certificates>>.

   h. Enter all hostnames used to connect to your first node. These hostnames
   will be added as DNS names in the Subject Alternative Name (SAN) field in your certificate.
+
List every hostname and variant used to connect to your cluster over HTTPS.

   i. Enter the IP addresses that clients can use to connect to your node.

   j. Repeat these steps for each additional node in your cluster.

. After generating a certificate for each of your nodes, enter a password for
   your private key when prompted.

. Unzip the generated `elasticsearch-ssl-http.zip` file. This compressed file
   contains one directory for both {es} and {kib}.
+
--
[source,txt]
----
/elasticsearch
|_ README.txt
|_ http.p12
|_ sample-elasticsearch.yml
----

[source,txt]
----
/kibana
|_ README.txt
|_ elasticsearch-ca.pem
|_ sample-kibana.yml
----
--

. Rename the `http.p12` file to match the name of your existing certificate for
HTTP client communications.

. On each node, edit the `elasticsearch.yml` file to enable HTTPS security and
   specify the location of the `http.p12` security certificate.
+
[source,yaml]
----
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.keystore.path: <your-http-certificate>.p12
----

. Add the password for your private key to the secure settings in {es}.
+
[source,shell]
----
./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
----

. [[cert-password-updates-https]] If your certificate is password protected, the password is stored in the {es} keystore, _and_ the password needs to change, then you must perform a <<restart-cluster-rolling,rolling restart>> on your cluster. Complete the steps until the step that indicates *Perform any needed changes*, and then continue to the next step to replace your existing certificates.

. Replace your existing certificate with the new certificate, ensuring that the
file names match.
+
{es} will reload the file and its configuration and start presenting the new 
certificate to the incoming TLS connections.

. Repeat the previous step on each node in your cluster to update the existing certificate, completing a rolling restart beforehand if your certificate matches the password stipulations outlined in <<cert-password-updates-https,this step>>.

[[update-node-certs-different]]
=== Update security certificates with a different CA
++++
<titleabbrev>With a different CA</titleabbrev>
++++

[discrete]
[[node-certs-different-transport]]
==== Generate a new certificate for the transport layer
If your CA is changing or has already changed, you'll need to generate a new
CA key and certificate. You can then add this CA certificate to all nodes so
that they know and trust it. Then, generate new certificate/key pairs for each
node that are signed by the new CA and instruct your nodes to use the new files. 

NOTE: The following examples use PKCS#12 files, but the same steps apply to JKS keystores.

. Open the `ES_PATH_CONF/elasticsearch.yml` file and check the names of the
security certificates that are currently in use. You'll use the same names
for your new certificate.
+
In this example, the keystore and truststore are pointing to different files.
Your configuration might use the same file that contains the certificate and CA.
+
[source,yaml]
----
xpack.security.transport.ssl.keystore.path: config/elastic-certificates.p12
xpack.security.transport.ssl.keystore.type: PKCS12
xpack.security.transport.ssl.keystore.password: password
xpack.security.transport.ssl.truststore.path: config/elastic-ca.p12
xpack.security.transport.ssl.truststore.type: PKCS12
xpack.security.transport.ssl.truststore.password: password
----

. On any node in your cluster, generate a new certificate and private key. You
only need to complete this step once, and can use the generated security files
on every node in your cluster.
+
You must include the CA that was used to sign the certificate currently in use.
+
[source,shell]
----
./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --pem
----

   `--ca <ca_file>`:: Name of the CA file used to sign your certificates. The
   default file name from the `elasticsearch-certutil` tool is `elastic-stack-ca.p12`.
   `--pem`:: Generates an `/instance` directory containing a new certificate and
    key in PEM format instead of PKCS#12. 

    a. Enter the password for your CA when prompted.
    
    b. Enter a name for the compressed output file that will contain your
    certificate and key, or accept the default name of `certificate-bundle.zip`.

    c. Unzip the output file. The
    resulting directory contains two files: `instance.crt` and `instance.key`.
+
--
IMPORTANT: Keep these file in a secure location as they contain the private key
for your instance. 
--

. On every node in your cluster, import the new `instance.crt` certificate into your
existing CA certificate. This step ensures that your nodes trust the new
certificate. This example uses the Java `keytool` utility to import the
certificate into the `elasticsearch-certificates.p12` CA certificate.
+
[source,shell]
----
keytool -importcert -trustcacerts -noprompt -keystore elasticsearch-certificates.p12 \
-storepass passw0rd  -alias testca -file instance.crt
----


[discrete]
[[node-certs-different-http]]
==== Generate a new certificate for the HTTP layer