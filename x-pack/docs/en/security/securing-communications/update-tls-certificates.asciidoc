[[update-node-certs]]
== Updating node security certificates
If your cluster certificates are expiring soon or you no longer have the key for
your existing Certificate Authority (CA), then you'll need to update the TLS
certificates for both the transport and HTTP layers. When updating your node
certificates, there are two main scenarios that you'll encounter:

* <<update-node-certs-same,Your CA and key remains the same>>
* <<update-node-certs-different,Your CA certificate and key changes>>

Regardless of the scenario, {es} monitors the SSL resources for updates
on a five-second interval, which is the default. You can just copy the new
certificate and key files (or keystore) into the {es} configuration directory
and your nodes will detect the changes and will reload the keys and certificates. 

Because {es} doesn't reload the `elasticsearch.yml` configuration,
you must use *the same file names* so that {es} refreshes the security
certificates and keys.

If you need to update the `elasticsearch.yml` configuration or change
passwords for keys or keystores that are stored in the
<<secure-settings,secure settings>>, then you must complete a
<<use-rolling-restarts,rolling restart>>. {es} will not reload changes for
passwords stored in the secure settings. 

[[use-rolling-restarts]]
.Rolling restarts are preferred
****
While it's possible to do an in-place update for security certificates, using
a <<restart-cluster-rolling,rolling restart>> on your cluster is safer. An in-place update avoids some
complications of a rolling restart, but incurs the following risks:

* If you use PEM files, your certificate and key are in separate files. You
must update both files _simultaneously_ or the node might experience a temporary
period where it cannot establish new connections.
* Updating the certificate and key does not automatically force existing
connections to refresh. This means that even if you make a mistake, a node can
seem like it's functioning but only because it still has existing connections.
It's possible that a node will be unable to connect with other nodes, rendering
it unable to recover from a network outage or node restart.
****

[[update-node-certs-same]]
=== Update security certificates with the same CA
++++
<titleabbrev>With the same CA</titleabbrev>
++++

If your CA hasn't changed, you can replace your existing certificate on each
node with a new certificate that has the same filename. When {es} restarts, it
reloads the file and uses the new certificate. Using the same filename means
that you don't have to update the `elasticsearch.yml` file, and can just
replace the existing certificate.

You don't have to restart each node, but doing so forces new TLS connections and is <<use-rolling-restarts,a recommended practice>> when updating certificates.
Therefore, the following steps include a node restart after updating each
certificate.

You'll generate new node certificates and keys for both the transport layer and
the HTTP layer.

[[cert-password-updates]] 
IMPORTANT: If your keystore is password protected, the password
is stored in the {es} secure settings, _and_ the password needs to change, then you
must perform a <<restart-cluster-rolling,rolling restart>> on your cluster. You
must also use a different file name for the keystore so that {es} reloads the
new file.

This procedure assumes that the you have access to the CA certificate and key
that was originally generated (or otherwise held by your organization) and used
to sign the certificate that is currently in use. It also assumes that the
clients connecting to {es} on the HTTP layer are configured to trust the CA
certificate.

TIP: If your CA has changed, complete the steps in 
<<update-node-certs-different,update security certificates with a different CA>>.

[[node-certs-same-transport]]
==== Generate a new certificate for the transport layer
Create a new PKCS#12 file that contains a certificate and key and replace
the existing PKCS#12 file (such as `elastic-certificates.p12`) with the new
certificate. Stop one node at a time, replace the node keystore, and then
start the node.

NOTE: The following examples use PKCS#12 files, but the same steps apply to JKS
keystores.

. Open the `ES_PATH_CONF/elasticsearch.yml` file and check the names of the
keystores that are currently in use. You'll use the same names for your new
certificate.
+
In this example, the keystore and truststore are pointing to different files.
Your configuration might use the same file that contains the certificate and CA.
In this case, include the path to that file for both the keystore and truststore.
+
[source,yaml]
----
xpack.security.transport.ssl.keystore.path: config/elastic-certificates.p12
xpack.security.transport.ssl.keystore.type: PKCS12
xpack.security.transport.ssl.truststore.path: config/elastic-stack-ca.p12
xpack.security.transport.ssl.truststore.type: PKCS12
----

. On every node in your cluster, generate a certificate and private key for your
node. You must use the CA that was used to sign the certificate currently
in use.
+
[source,shell]
----
./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12
----
+
[%collapsible%open]
.Command parameters
====
   `--ca <ca_file>`:: Name of the CA keystore used to sign your certificates. The
   default file name from the `elasticsearch-certutil` tool is
   `elastic-stack-ca.p12`.
====
+
    a. Enter the password for your CA keystore when prompted.

    b. Enter the name for your keystore, which must match the name of the
    keystore currently in use.
+
NOTE: If your 
<<cert-password-updates,keystore password is changing>>, then save the
keystore with a new filename. 

    c. (Optional) Enter a password for your keystore. 

. If you entered a password when creating the node keystore, and if it is different than the one the current keystore has, run the
following command to store the password in the {es} keystore:
+
--
[source,shell]
----
./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password
----
--

. Stop {es} on the current node in your cluster where you are updating the
keystore.

. Replace your existing keystore with the new keystore, ensuring that the
file names match. For example, `elastic-stack-ca.p12`.

. If your keystore is password protected, the password is stored in the {es}
keystore, _and_ the password needs to change, then update the
`ES_PATH_CONF/elasticsearch.yml` file to use the filename of the new keystore
file that you created.

. Start the node where you updated the keystore. 

. (Optional) Use the <<security-api-ssl,SSL certificate API>> to verify that
{es} loaded the new keystore.

. On each additional node in your cluster, perform the previous steps,
and restart {es}.

[[node-certs-same-http]]
==== Generate a new certificate for the HTTP layer
The certificate for the HTTP layer is used to verify other components when they
connect to {es}, such as {kib} or any of the Elastic language clients.

. Stop {es} and {kib} on the first node in your cluster where you are updating
the HTTP certificate. 

. From the directory where you installed {es}, run the {es} HTTP certificate 
tool.
+
[source,shell]
----
./bin/elasticsearch-certutil http
----
+
This command generates a `.zip` file that contains certificates and keys
to use with {es} and {kib}. Each folder contains a `README.txt`
explaining how to use these files.

   a. When asked if you want to generate a CSR, enter `n`.

   b. When asked if you want to use an existing CA, enter `y`.

   c. Enter the absolute path to your CA, such as the path to the
    `elastic-stack-ca.p12` file.

   d. Enter the password for your CA.

   e. Enter an expiration value for your certificate. You can enter the
   validity period in years, months, or days. For example, enter `90D` for 90
   days.

   f. When asked if you want to generate one certificate per node, enter `y`.
+
Each certificate will have its own private key, and will be issued for a
specific hostname or IP address.

   g. When prompted, enter the name of the first node in your cluster. Use the
   same node name as the value for the `node.name` parameter in the
   `elasticsearch.yml` file.

   h. Enter all hostnames used to connect to your first node. These hostnames
   will be added as DNS names in the Subject Alternative Name (SAN) field in your certificate.
+
List every hostname and variant used to connect to your cluster over HTTPS.

   i. Enter the IP addresses that clients can use to connect to your node.

   j. Repeat these steps for each additional node in your cluster.

. After generating a certificate for each of your nodes, enter a password for
   your private key when prompted.

. Unzip the generated `elasticsearch-ssl-http.zip` file. This compressed file
   contains one directory for both {es} and {kib}.
+
--
[source,txt]
----
/elasticsearch
|_ README.txt
|_ http.p12
|_ sample-elasticsearch.yml
----

[source,txt]
----
/kibana
|_ README.txt
|_ elasticsearch-ca.pem
|_ sample-kibana.yml
----
--

. If necessary, rename the `http.p12` file to match the name of your existing
certificate for HTTP client communications. This keystore contains both a
certificate and key.

. Replace your existing keystore (such as `http.p12`) with the new keystore,
ensuring that the file names match.
+
IMPORTANT: If your keystore is password protected, the password
is stored in the {es} keystore, _and_ the password needs to change, then you
must update the `ES_PATH_CONF/elasticsearch.yml` file to use the filename of the
new keystore file that you created.

. Add the password for your private key to the secure settings in {es}.
+
[source,shell]
----
./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
----

. Restart the node where you updated the keystore. {es} will reload the file and
its configuration and start presenting the new  certificate to the incoming TLS
connections.

. (Optional) Use the <<security-api-ssl,SSL certificate API>> to verify that
{es} loaded the new keystore.

. On each additional node in your cluster, stop {es} and {kib}, update the
keystore, and restart {es} and {kib}.

[[update-node-certs-different]]
=== Update security certificates with a different CA
++++
<titleabbrev>With a different CA</titleabbrev>
++++
If your CA is changing, you'll need to generate a new CA certificate and key.
You can then add this CA certificate to your existing CA truststore so that all
nodes in your cluster so know and trust it. Then, generate a new certificate for
each node that is signed by the new CA certificate and instruct your nodes to
use the new files. 

[[node-certs-different-transport]]
==== Generate a new certificate for the transport layer
Create a new CA certificate and add it to your existing CA truststore. After
{es} reloads the file, you can remove the old CA certificate from your
truststore.

NOTE: The following examples use PKCS#12 files, but the same steps apply to JKS
keystores.

. Open the `ES_PATH_CONF/elasticsearch.yml` file and check the names of the
security certificates that are currently in use. You'll use the same names
for your new certificates.
+
In this example, the keystore and truststore are using different files.
Your configuration might use the same file for both the keystore and the 
truststore. Elastic recommends using separate files. 
+
[source,yaml]
----
xpack.security.transport.ssl.keystore.path: config/elastic-certificates.p12
xpack.security.transport.ssl.keystore.type: PKCS12
xpack.security.transport.ssl.truststore.path: config/elastic-stack-ca.p12
xpack.security.transport.ssl.truststore.type: PKCS12
----

. On *any* node in your cluster, generate a new CA certificate. You only need
to complete this step one time.
+
NOTE: If your organization has its own CA, then use that CA to generate a new
CA certificate in PEM format.
+
[source,shell]
----
./bin/elasticsearch-certutil ca --pem
----
+
[%collapsible%open]
.Command parameters
====
   `--pem`:: Generates a directory containing a CA certificate and key in PEM
   format instead of PKCS#12. 
====

    a. Enter a name for the compressed output file that will contain your
    certificate and key, or accept the default name of `elastic-stack-ca.zip`.

    b. Unzip the output file. The resulting directory contains a CA certificate
    (`ca.crt`) and a private key (`ca.key`).
+
--
IMPORTANT: Keep these file in a secure location as they contain the private key
for your CA. 
--

. On *every* node in your cluster, import the new `ca.crt` certificate into your
existing CA truststore. This step ensures that your cluster trusts the new CA
certificate. This example uses the Java `keytool` utility to import the
certificate into the `elastic-stack-ca.p12` CA truststore.
+
[source,shell]
----
keytool -importcert -trustcacerts -noprompt -keystore elastic-stack-ca.p12 \
-storepass <password>  -alias new-ca -file ca.crt
----
+
[%collapsible%open]
.Command parameters
====
   `-keystore`:: Name of the truststore that you are importing the new CA
   certificate into. 

   `-storepass`:: Password for the CA truststore. 

   `-alias`:: Name that you want to assign to the new CA certificate entry in the keystore.

   `-file`:: Name of the new CA certificate to import.
====

. Check that the new CA certificate was added to your truststore. The output
should contain both the existing CA certificate and your new certificate. Each
CA certificate is identified by the `friendlyName` attribute in the output.
+
When prompted, enter the password for the CA truststore.
+
[source,shell]
----
openssl pkcs12 -info -in config/elastic-stack-ca.p12
----

. (Optional) Remove the old CA certificate from your truststore. 
+
[source,shell]
----
keytool -delete -noprompt -alias old-ca  -keystore config/elastic-stack-ca.p12 \
-storepass <password>
----
+
[%collapsible%open]
.Command parameters
====
   `-alias`:: Name of the old CA certificate that you want to remove from your
   truststore.
====

[discrete]
[[node-certs-different-nodes]]
==== Generate a new certificate for each node in your cluster
Now that your CA truststore is updated, use your new CA certificate to sign
a certificate for each node in your cluster. Rather than run the
`elasticsearch-certutil` tool once for each node, create an `instances.yml` file
that contains information about each of your nodes. You can then use the
`elasticsearch-certutil` tool to generate certificates for all of your nodes
with a single command.

. On any node in your cluster, create an `instances.yml` file that contains
information about each of your nodes. Include all IP addresses and DNS names
that you use to identify each node. 
+
[source,yaml]
----
instances:
  - name: "node1"
    ip:
      - "192.168.1.101"
    dns:
      - "node1"
      - "node1.mydomain.com"
  - name: "node2"
    ip:
      - "192.168.1.102"
    dns:
      - "node2"
      - "node2.mydomain.com"
  - name: "node3"
    ip:
      - "192.168.1.103"
    dns:
      - "node3"
      - "node3.mydomain.com"
  - name: "node4"
    ip:
      - "192.168.1.104"
    dns:
      - "node4"
      - "node4.mydomain.com"
----

. Using the new CA certificate and key, create a new certificate for each node
in your cluster. Include the `instances.yml` file that you created previously.
+
[source,shell]
----
./bin/elasticsearch-certutil cert --in instances.yml --ca-cert ca/ca.crt \
--ca-key ca/ca.key
----
+
[%collapsible%open]
.Command parameters
====
   `-in`:: Specifies the name of the input YAML file (`instances.yml`)
   containing information about each of your nodes.

   `--ca-cert`:: Specifies the path to your new CA certificate (`ca.crt`) in PEM
   format. You must also specify the `--ca-key` parameter.

   `--ca-key`:: Specifies the path to the private key (`ca.key`) for your CA
   certificate. You must also specify the `--ca-cert` parameter.
====

   a. Enter a name for the output file or accept the default of
   `certificate-bundle.zip`.

   b. When prompted, enter a password for each node certificate. It's good
   practice to use a different password for each node certificate and store the
   files in a secure location.

   c. Decompress the `certificate-bundle.zip` file. The output contains a
   directory for each of your nodes with a `<node-name>.p12` file.

   d. Rename the `<node-name>.p12` file to match the existing file name
   specified by the `xpack.security.transport.ssl.keystore.path` variable in 
   the `elasticsearch.yml` file on each node.

. On *every* node, copy the appropriate node certificate to the `ES_PATH_CONF`
directory.
+
NOTE: The `ES_PATH_CONF` variable is the path for the {es}
configuration files. If you installed {es} using archive distributions
(`zip` or `tar.gz`), the variable defaults to `ES_HOME/config`. If you used
package distributions (Debian or RPM), the variable defaults to `/etc/elasticsearch`.

. Delete the old node keystore from each node. 

[[node-certs-different-http]]
==== Generate a new certificate for the HTTP layer
You can generate certificates for the HTTP layer using your new CA certificate
and private key. This certificate is used to verify other components when they
connect to {es}, such as {kib} or any of the Elastic language clients.

. Stop {es} and {kib} on the first node in your cluster where you are updating
the HTTP certificate. 

. From the directory where you installed {es}, run the {es} HTTP certificate 
tool.
+
[source,shell]
----
./bin/elasticsearch-certutil http
----
+
This command generates a `.zip` file that contains certificates and keys
to use with {es} and {kib}. Each folder contains a `README.txt`
explaining how to use these files.

   a. When asked if you want to generate a CSR, enter `n`.

   b. When asked if you want to use an existing CA, enter `y`.

   c. Enter the absolute path to your *new* CA certificate, such as the path to
   the `ca.crt` file.

   d. Enter the absolute path to your new CA certificate private key, such as
   the path to the `ca.key` file.

   e. Enter an expiration value for your certificate. You can enter the
   validity period in years, months, or days. For example, enter `90D` for 90
   days.

   f. When asked if you want to generate one certificate per node, enter `y`.
+
Each certificate will have its own private key, and will be issued for a
specific hostname or IP address.

   g. When prompted, enter the name of the first node in your cluster. Use the
   same node name as the value for the `node.name` parameter in the
   `elasticsearch.yml` file.

   h. Enter all hostnames used to connect to your first node. These hostnames
   will be added as DNS names in the Subject Alternative Name (SAN) field in your certificate.
+
List every hostname and variant used to connect to your cluster over HTTPS.

   i. Enter the IP addresses that clients can use to connect to your node.

   j. Repeat these steps for each additional node in your cluster.

. After generating a certificate for each of your nodes, enter a password for
   your keystore when prompted.

. Unzip the generated `elasticsearch-ssl-http.zip` file. This compressed file
   contains one directory for both {es} and {kib}. Additionally, a directory is
   created for each node that you specified with it's own `http.p12` file.
+
--
[source,txt]
----
/elasticsearch
|_ README.txt
|_ http.p12
|_ sample-elasticsearch.yml
----

[source,txt]
----
/kibana
|_ README.txt
|_ elasticsearch-ca.pem
|_ sample-kibana.yml
----
--

. If necessary, rename the `http.p12` file to match the name of your existing
certificate for HTTP client communications. This keystore contains both a
certificate and key.

. Replace your existing keystore (such as `http.p12`) with the new keystore,
ensuring that the file names match.
+
IMPORTANT: If your keystore is password protected, the password
is stored in the {es} keystore, _and_ the password needs to change, then you
must update the `ES_PATH_CONF/elasticsearch.yml` file to use the filename of the
new keystore file that you created.

. Add the password for your private key to the secure settings in {es}.
+
[source,shell]
----
./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
----

. Restart the node where you updated the keystore. {es} will reload the file and
its configuration and start presenting the new  certificate to the incoming TLS
connections.

. (Optional) Use the <<security-api-ssl,SSL certificate API>> to verify that
{es} loaded the new keystore.

. On each additional node in your cluster, stop {es} and {kib}, update the
keystore, and restart {es} and {kib}.
