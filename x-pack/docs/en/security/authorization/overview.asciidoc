[role="xpack"]
[[authorization]]
== User authorization

{security} introduces the concept of _authorization_ to the {stack}.
Authorization is the process of determining whether the user behind an incoming
request is allowed to execute it. 

This process takes place after a request is successfully 
<<setting-up-authentication,authenticated>> and the user behind the request is 
identified.

[[roles]]
[float]
=== Roles, permissions, and privileges

The authorization process revolves around the following constructs:

//TO-DO: Add conceptual diagram

_Secured Resource_::
A resource to which access is restricted. Indices, aliases, documents, fields,
users, and the {es} cluster itself are all examples of secured objects.

_Privilege_::
A named group of one or more actions that a user may execute against a
secured resource. Each secured resource has its own sets of available privileges.
For example, `read` is an index privilege that represents all actions that enable
reading the indexed/stored data. For a complete list of available privileges
see <<security-privileges>>.

_Permissions_::
A set of one or more privileges against a secured resource. Permissions can
easily be described in words, here are few examples:
 * `read` privilege on the `products` index
 * `manage` privilege on the cluster
 * `run_as` privilege on `john` user
 * `read` privilege on documents that match query X
 * `read` privilege on `credit_card` field

_Role_::
A named set of permissions

_User_::
The authenticated user.

_Group_::
One or more groups to which a user belongs. Groups are not supported in some 
realms, such as native, file, or PKI realms. 

[float]
[[role-based-access-control]]
=== Role-based access control

{security} provides a role-based access control (RBAC) mechanism, which enables 
you to authorize users by assigning privileges to roles and assigning roles to 
users or groups. 

A role has a unique name and identifies a set of permissions that translate to
privileges on resources. You can associate a user or group with an arbitrary 
number of roles. When you map roles to groups, the roles of a user in that group 
are the combination of the roles assigned to that group and the roles assigned 
to that user. Likewise, the total set of permissions that a user has is defined 
by the union of the permissions in all its roles.

The method for assigning roles to users varies depending on which realms you use 
to authenticate users. For more information, see <<mapping-roles>>.

//[float]
//[[attribute-based-access-control]]
//=== Attribute-based access control

//TBD
