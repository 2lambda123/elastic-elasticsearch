[role="xpack"]
[testenv="basic"]
[[ilm-explain]]
=== Explain Lifecycle API
++++
<titleabbrev>Explain Lifecycle</titleabbrev>
++++

Shows the current lifecycle staus for an index.

==== Request

`GET <index>/_ilm/explain`

==== Description

This API returns information relating to the current lifecycle state of an
index. This includes information such as the currently executing phase, action
and step and the timestamp when the index entered them. It also shows the
version of the current phase that is being run and in the event that there has
been a failure, information regarding the failure.

==== Path Parameters

`index` (required)::
  (string) Identifier for the index.

==== Request Parameters

`timeout`::
  (time units) Specifies the period of time to wait for the completion of the 
  GET operation. When this period of time elapses, the API fails and returns
  an error. The default value is `30s`. For more information about time units, 
  see <<time-units>>.

`master_timeout`::
  (time units) Specifies the period of time to wait for the connection with master.
  When this period of time elapses, the API fails and returns an error.
  The default value is `30s`. For more information about time units, see <<time-units>>.


==== Examples

The following example retrieves the lifecycle state for the index `my_index`:

//////////////////////////

[source,js]
--------------------------------------------------
PUT _ilm/my_policy
{
  "policy": {
    "phases": {
      "warm": {
        "minimum_age": "10d",
        "actions": {
          "forcemerge": {
            "max_num_segments": 1
          }
        }
      },
      "delete": {
        "minimum_age": "30d",
        "actions": {
          "delete": {}
        }
      }
    }
  }
}

PUT my_index
{
  "settings": {
    "index.lifecycle.name": "my_policy"
  }
}
--------------------------------------------------
// CONSOLE
// TEST

//////////////////////////

[source,js]
--------------------------------------------------
GET my_index/_ilm/explain
--------------------------------------------------
// CONSOLE
// TEST

If the request does not encounter errors, you receive the following result:

[source,js]
--------------------------------------------------
{
  "This needs to be": "populated"
}
--------------------------------------------------
// CONSOLE
// TESTRESPONSE
