[[set-up-lifecycle-policy]]
== Set up an {ilm} policy

{ilm} policies are typically associated with indices when they are created. You
can configure a policy in an index template so it is applied to each index
created from the template, or specify a policy when creating individual indices.
You can also apply policies to existing indices using the
<<apply-index-policy, set policy API>>.

To use an {ilm} policy to manage indices created from an index template:

. Define the policy with the put policy API. For example, the following
request creates a two-phase policy that rolls to a new index based on the index
size and deletes the old index when it reaches a certain age.
+
[source,js]
------------------------
PUT _ilm/my_rollover_policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover": {
            "max_size": "25GB" <1>
          }
        }
      },
      "delete": {
        "minimum_age": "30d",
        "actions": {
          "delete": {} <2>
        }
      }
    }
  }
}
------------------------
// CONSOLE
<1> Rollover to a new index when the index size reaches 25GB
<2> Delete the old index when its 30 days old

. Set the policy for an index template by configuring the `index.lifecycle.name`
 and `index.lifecycle.rollover_alias` settings. For {ilm} to manage an index,
 the `index.lifecycle.name` setting must be configured in the index settings and
 reference a valid policy name.
+
 For example, the following request creates an index template that uses
 `my_rollover_policy`.
+
[source,js]
 -----------------------
 PUT _template/my_template
 {
   "index_patterns": ["test-*"], <1>
   "settings": {
     "number_of_shards": 1,
     "number_of_replicas": 1,
     "index.lifecycle.name": "my_rollover_policy", <2>
     "index.lifecycle.rollover_alias": "test-alias"
   }
 }
 -----------------------
 // CONSOLE
<1> Apply this template to to all indices with the name prefix `test-`
<2> Use `my_rollover_policy` to manage all indices that match the index pattern.

. Create an initial index with the same name as the rollover alias.
+
[source,js]
-----------------------
PUT test-000001
{
  "aliases": {
    "test-alias":{
      "is_write_index": true <1>
    }
  }
}
-----------------------
// CONSOLE
<1> Set this initial index to be the write index for this alias.

We can now write data to the `test-alias` alias. Because we have a rollover
action defined in our policy when the index grows larger than 25GB {ilm} will
create a new index and roll the alias over to use the new index automatically.

[float]
[[apply-index-policy]]
=== Apply a policy to a single index

You can apply a policy directly when you create an index by configuring
the `index.lifecycle.name` setting, or apply a policy to an existing index with
the set policy API.

IMPORTANT: Avoid applying policies that contain rollover actions to individual
indices. If a rollover is triggered, the policy will **not** carry forward to
the new index. Always use index templates to apply policies with rollover actions.

For example, the following request creates `my-index` and tells {ilm} to
immediately start managing it with the `my_policy`.

[source,js]
-----------------------
PUT my-index
{
  "settings": {
    "number_of_shards": 1,
    "number_of_replicas": 1,
    "index.lifecycle.name": "my_policy"
  }
}
-----------------------
// CONSOLE

If `my-index` already exists, you can use set policy to apply `my_policy`:

[source,js]
-----------------------
PUT /my_index/_ilm/my_policy
-----------------------
// CONSOLE
