//
// Script
//

stringAscii
// tag::ascii
SELECT ASCII(first_name) s FROM "test_emp" WHERE emp_no < 10010 ORDER BY emp_no;
// end::ascii
stringChar
// tag::char
SELECT CHAR(emp_no % 10000) m, first_name FROM "test_emp" WHERE emp_no < 10010 ORDER BY emp_no;
// end::char

//
// Filter by Scalar
//
stringAsciiFilter
SELECT emp_no, ASCII(first_name) a FROM "test_emp" WHERE ASCII(first_name) < 10010 ORDER BY emp_no;

// stringCharFilter
// SELECT emp_no, CHAR(emp_no % 10000) m FROM "test_emp" WHERE CHAR(emp_no % 10000) = 'A';

// lcaseFilter
// SELECT LCASE(first_name), CHAR(ASCII(LCASE(first_name))) FROM "test_emp" WHERE CHAR(ASCII(LCASE(first_name))) = 'a';

// ltrimFilter
// SELECT LTRIM(first_name) FROM "test_emp" WHERE LTRIM(first_name) = 'Bob';

// rtrimFilter
// SELECT RTRIM(first_name) FROM "test_emp" WHERE RTRIM(first_name) = 'Johnny';

// spaceFilter
// SELECT SPACE(languages), languages FROM "test_emp" WHERE SPACE(languages) = '   ';
// spaceFilterWithLengthFunctions
// SELECT SPACE(languages), languages FROM "test_emp" WHERE LENGTH(SPACE(languages)) = 3;

// ucaseFilter
// SELECT UCASE(gender), COUNT(*) count FROM "test_emp" WHERE UCASE(gender) = 'F' GROUP BY UCASE(gender);

//
// Group and order by
//
asciiGroupByAndOrderBy
SELECT ASCII(first_name) A, COUNT(*) count FROM "test_emp" WHERE ASCII(first_name) < 75 GROUP BY ASCII(first_name) ORDER BY ASCII(first_name) DESC;

charGroupByAndOrderBy
SELECT CHAR(emp_no % 10000) C FROM "test_emp" WHERE emp_no > 10010 GROUP BY CHAR(emp_no % 10000) ORDER BY CHAR(emp_no % 10000) DESC LIMIT 20;

//charLengthGroupByAndOrderBy
//I think this one fails of some testing/ResultSet error: java.lang.AssertionError: Different result for column [cl], entry [1] expected: java.lang.Long<3> but was: java.lang.Integer<3>
//SELECT CHAR_LENGTH(first_name) cl, COUNT(*) count FROM "test_emp" GROUP BY CHAR_LENGTH(first_name) ORDER BY CHAR_LENGTH(first_name);

//lcaseGroupByAndOrderBy
// this one fails with "Different result for column [lc], entry [1] expected:<[shahaf]> but was:<[adamantios]>"
//SELECT LCASE(first_name) lc, CHAR(ASCII(LCASE(first_name))) chr FROM "test_emp" GROUP BY LCASE(first_name);

rtrimGroupByAndOrderBy
SELECT RTRIM(first_name) rt FROM "test_emp" GROUP BY RTRIM(first_name) HAVING COUNT(*)>1;

ltrimGroupByAndOrderBy
SELECT LTRIM(first_name) lt FROM "test_emp" GROUP BY LTRIM(first_name) HAVING COUNT(*)>1;

//spaceGroupByAndOrderByWithCharLength
// next one fails with "Different result for column [cls], entry [1] expected: java.lang.Long<1> but was: java.lang.Integer<1>"
//SELECT CHAR_LENGTH(SPACE(languages)) cls FROM "test_emp" GROUP BY CHAR_LENGTH(SPACE(languages));
//spaceGroupByAndOrderBy
// next one fails in H2 where it returns [] as if it was trimmed
//SELECT SPACE("languages") s, COUNT(*) count FROM "test_emp" GROUP BY SPACE("languages");
//spaceGroupByAndOrderByWithCharLength
//SELECT SPACE("languages") s, COUNT(*) count, CHAR_LENGTH(SPACE("languages")) cls FROM "test_emp" WHERE "languages" IS NOT NULL GROUP BY SPACE("languages") ORDER BY SPACE("languages");

// handling null values for lcase. H2 returns a new group 'null' for these.
// SELECT LCASE("gender"), COUNT(*) count FROM "test_emp" GROUP BY LCASE("gender");

// bit_length function
// in H2, each character uses 16 bits. The tests below will fail in H2, but not in MySQL or PostgreSQL
// bitLengthGroupByAndOrderBy
// SELECT BIT_LENGTH(first_name), COUNT(*) count FROM "test_emp" GROUP BY BIT_LENGTH(first_name) ORDER BY BIT_LENGTH(first_name);
// selectBitLengthOrderByField
// SELECT BIT_LENGTH(first_name), first_name FROM "test_emp" WHERE BIT_LENGTH(first_name) > 64 ORDER BY first_name;

ucaseGroupByAndOrderBy
SELECT UCASE(gender) uc, COUNT(*) count FROM "test_emp" GROUP BY UCASE(gender) ORDER BY UCASE(gender) DESC;