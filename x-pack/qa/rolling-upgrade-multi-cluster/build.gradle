import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.test.RestIntegTestTask
import org.elasticsearch.gradle.testclusters.RestTestRunnerTask

apply plugin: 'elasticsearch.testclusters'
apply plugin: 'elasticsearch.standalone-test'

dependencies {
    testCompile project(':x-pack:qa')
}

// This is a top level task which we will add dependencies to below.
// It is a single task that can be used to backcompat tests against all versions.
task bwcTest {
    description = 'Runs backwards compatibility tests.'
    group = 'verification'
}

configurations {
    restSpec
}

dependencies {
    restSpec project(':rest-api-spec')
}

processTestResources {
    dependsOn configurations.restSpec
    from ({ zipTree(configurations.restSpec.singleFile) }) {
        include 'rest-api-spec/api/**'
    }
    from (project(xpackProject('plugin').path).sourceSets.test.resources) {
        include 'rest-api-spec/api/**'
    }
}

for (Version bwcVersion : bwcVersions.wireCompatible) {
    String baseName = "v${bwcVersion}"

    testClusters {
        "${baseName}-leader" {
            numberOfNodes = 3
        }
        "${baseName}-follower" {
            numberOfNodes = 3
        }
    }
    testClusters.all {
        testDistribution = "DEFAULT"
        versions = [bwcVersion.toString(), project.version]

        setting 'repositories.url.allowed_urls', 'http://snapshot.test*'
        setting 'xpack.security.enabled', 'false'
        setting 'xpack.monitoring.enabled', 'false'
        setting 'xpack.ml.enabled', 'false'
        setting 'xpack.watcher.enabled', 'false'
        setting 'xpack.license.self_generated.type', 'trial'
    }

    tasks.withType(RestTestRunnerTask) {
        useCluster testClusters."${baseName}-leader"
        useCluster testClusters."${baseName}-follower"
        systemProperty 'tests.upgrade_from_version', bwcVersion.toString().replace('-SNAPSHOT', '')
        //nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",") }")
        //nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName() }")
        nonInputProperties.systemProperty('tests.leader_host', "${-> testClusters."${baseName}-leader".allHttpSocketURI.join(",") }")
        nonInputProperties.systemProperty('tests.leader_remote_cluster_seed', "${-> testClusters."${baseName}-leader".allTransportPortURI.get(0) }")
        nonInputProperties.systemProperty('tests.follower_host', "${-> testClusters."${baseName}-follower".allHttpSocketURI.join(",") }")
        nonInputProperties.systemProperty('tests.follower_remote_cluster_seed', "${-> testClusters."${baseName}-follower".allTransportPortURI.get(0) }")
    }

    for (kind in ["follower", "leader"]) {
        tasks.register("${baseName}#${kind}#clusterTest", RestTestRunnerTask) {
            systemProperty 'tests.rest.upgrade_state', 'none'
            systemProperty 'tests.rest.cluster_name', kind
        }

        tasks.register("${baseName}#${kind}#oneThirdUpgradedTest", RestTestRunnerTask) {
            systemProperty 'tests.rest.upgrade_state', 'one_third'
            systemProperty 'tests.rest.cluster_name', kind
            doFirst {
                testClusters."${baseName}-${kind}".nextNodeToNextVersion()
            }
        }

        tasks.register("${baseName}#${kind}#twoThirdsUpgradedTest", RestTestRunnerTask) {
            systemProperty 'tests.rest.upgrade_state', 'two_third'
            systemProperty 'tests.rest.cluster_name', kind
            doFirst {
                testClusters."${baseName}-${kind}".nextNodeToNextVersion()
            }
        }

        tasks.register("${baseName}#${kind}#upgradedClusterTest", RestTestRunnerTask) {
            systemProperty 'tests.rest.upgrade_state', 'all'
            systemProperty 'tests.rest.cluster_name', kind
            doFirst {
                testClusters."${baseName}-${kind}".nextNodeToNextVersion()
            }
        }
    }

    tasks.register("${baseName}#bwcTest") {
        dependsOn "${baseName}#upgradedClusterTest"
    }

    if (project.bwc_tests_enabled) {
        bwcTest.dependsOn("${baseName}#bwcTest")
    }
}

test.enabled = false // no unit tests for rolling upgrades, only the rest integration test

task bwcTestSnapshots {
    if (project.bwc_tests_enabled) {
        for (final def version : bwcVersions.unreleasedWireCompatible) {
            dependsOn "v${version}#bwcTest"
        }
    }
}
check.dependsOn(bwcTestSnapshots)