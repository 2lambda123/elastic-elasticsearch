import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.internal.info.BuildParams
import org.elasticsearch.gradle.testclusters.StandaloneRestIntegTestTask

apply plugin: 'elasticsearch.internal-testclusters'
apply plugin: 'elasticsearch.standalone-rest-test'
apply plugin: 'elasticsearch.bwc-test'

dependencies {
  testImplementation project(':x-pack:qa')
}

for (Version bwcVersion : BuildParams.bwcVersions.wireCompatible) {
  String baseName = "v${bwcVersion}"

  def baseLeaderCluster = testClusters.register("${baseName}-leader") {
      numberOfNodes = 3
  }
  def baseFollowerCluster = testClusters.register("${baseName}-follower") {
    numberOfNodes = 3
  }
  testClusters.matching { it.name.startsWith("${baseName}-") }.configureEach {
    testDistribution = "DEFAULT"
    versions = [bwcVersion.toString(), project.version]

    setting 'repositories.url.allowed_urls', 'http://snapshot.test*'
    setting 'xpack.security.enabled', 'false'
    setting 'xpack.ml.enabled', 'false'
    setting 'xpack.watcher.enabled', 'false'
    setting 'xpack.license.self_generated.type', 'trial'
  }

  tasks.withType(StandaloneRestIntegTestTask).matching { it.name.startsWith("${baseName}#") }.configureEach {
    useCluster baseLeaderCluster.get()
    useCluster baseFollowerCluster.get()
    systemProperty 'tests.upgrade_from_version', bwcVersion.toString().replace('-SNAPSHOT', '')

    doFirst {
      def baseCluster = testClusters.named("${baseName}-${kindExt}").get()
      if (name.endsWith("#clusterTest") == false) {
        println "Upgrade node $it"
        baseCluster.nextNodeToNextVersion()
      }
      nonInputProperties.systemProperty('tests.rest.cluster', "${-> baseCluster.allHttpSocketURI.join(",")}")
      nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}-${kindExt}".getName()}")
      nonInputProperties.systemProperty('tests.leader_host', "${-> baseLeaderCluster.allHttpSocketURI.last()}")
      nonInputProperties.systemProperty('tests.leader_remote_cluster_seed', "${-> baseLeaderCluster.get().allTransportPortURI.last()}")
      nonInputProperties.systemProperty('tests.follower_host', "${-> baseFollowerCluster.get().allHttpSocketURI.last()}")
      nonInputProperties.systemProperty('tests.follower_remote_cluster_seed', "${-> baseFollowerCluster.get().allTransportPortURI.last()}")
    }
  }

  ["follower", "leader"].each { kind ->
    tasks.register("${baseName}#${kind}#clusterTest", StandaloneRestIntegTestTask) {
      systemProperty 'tests.rest.upgrade_state', 'none'
      systemProperty 'tests.rest.cluster_name', kind
      ext.kindExt = kind
    }

    tasks.register("${baseName}#${kind}#oneThirdUpgradedTest", StandaloneRestIntegTestTask) {
      systemProperty 'tests.rest.upgrade_state', 'one_third'
      systemProperty 'tests.rest.cluster_name', kind
      dependsOn "${baseName}#leader#clusterTest", "${baseName}#follower#clusterTest"
      ext.kindExt = kind
    }

    tasks.register("${baseName}#${kind}#twoThirdsUpgradedTest", StandaloneRestIntegTestTask) {
      systemProperty 'tests.rest.upgrade_state', 'two_third'
      systemProperty 'tests.rest.cluster_name', kind
      dependsOn "${baseName}#${kind}#oneThirdUpgradedTest"
      ext.kindExt = kind
    }

    tasks.register("${baseName}#${kind}#upgradedClusterTest", StandaloneRestIntegTestTask) {
      systemProperty 'tests.rest.upgrade_state', 'all'
      systemProperty 'tests.rest.cluster_name', kind
      dependsOn "${baseName}#${kind}#twoThirdsUpgradedTest"
      ext.kindExt = kind
    }
  }

  tasks.named("${baseName}#follower#clusterTest") {
    dependsOn "${baseName}#leader#clusterTest"
  }

  tasks.named("${baseName}#leader#oneThirdUpgradedTest") {
    dependsOn "${baseName}#follower#upgradedClusterTest"
  }

  tasks.register(bwcTaskName(bwcVersion)) {
    dependsOn "${baseName}#leader#upgradedClusterTest"
  }
}

// Security is explicitly disabled, do not run tests in FIPS mode
tasks.withType(Test).configureEach {
  onlyIf { BuildParams.inFipsJvm == false}
}
