# Cross-Origin Resource Sharing (CORS) Filter configuration
#
# See http://software.dzhuvinov.com/cors-filter-configuration.html


# Set to "true" to allow generic HTTP requests, else only valid and accepted
# CORS requests will be allowed (strict CORS filtering).
#
# Recommended value: "true"
cors.allowGenericHttpRequests = true

# Lists the allowed CORS origins. They must be specified as
# whitespace-separated URLs. Requests from origins not included here will be
# refused with an HTTP 403 "Forbidden" response. If set to "*" all origins will
# be allowed.
cors.allowOrigin = *

# Set to "true" to allow requests from any origin which is a subdomain origin
# of cors.allowOrigin.
#
# Example:
#
# Explicitly allowed origin: http://example.com
#
# Matches the original origin as well as any subdomain, e.g.
# http://foo.example.com, http://bar.example.com, etc.
cors.allowSubdomains = false


# Lists the supported HTTP methods. Requests for methods not included here will
# be refused by the CORS filter with an HTTP 405 "Method not allowed" response.
cors.supportedMethods = GET, POST

# Lists the supported non-simple (according to the CORS standard) header names.
cors.supportedHeaders = Content-Type

# Lists the non-simple headers (according to the CORS standard) that the web
# client (browser) should expose.
cors.exposedHeaders = X-Web-Service

# Indicates whether user credentials, such as cookies, HTTP authentication or
# client-side certificates, are supported.
cors.supportsCredentials = true

# Indicates how long the results of a CORS preflight request can be cached by
# the web client, in seconds. If -1 unspecified.
#
# Recommended value: 1 day (86400 seconds).
cors.maxAge = 86400